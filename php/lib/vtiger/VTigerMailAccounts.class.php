<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerMailAccounts extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerMailAccounts';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_mail_accounts';
	const SQL_INSERT='INSERT INTO `vtiger_mail_accounts` (`account_id`,`user_id`,`display_name`,`mail_id`,`account_name`,`mail_protocol`,`mail_username`,`mail_password`,`mail_servername`,`box_refresh`,`mails_per_page`,`ssltype`,`sslmeth`,`int_mailer`,`status`,`set_default`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_mail_accounts` (`account_id`,`user_id`,`display_name`,`mail_id`,`account_name`,`mail_protocol`,`mail_username`,`mail_password`,`mail_servername`,`box_refresh`,`mails_per_page`,`ssltype`,`sslmeth`,`int_mailer`,`status`,`set_default`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_mail_accounts` SET `account_id`=?,`user_id`=?,`display_name`=?,`mail_id`=?,`account_name`=?,`mail_protocol`=?,`mail_username`=?,`mail_password`=?,`mail_servername`=?,`box_refresh`=?,`mails_per_page`=?,`ssltype`=?,`sslmeth`=?,`int_mailer`=?,`status`=?,`set_default`=? WHERE `account_id`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_mail_accounts` WHERE `account_id`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_mail_accounts` WHERE `account_id`=?';
	const FIELD_ACCOUNT_ID=1255979619;
	const FIELD_USER_ID=230949849;
	const FIELD_DISPLAY_NAME=634600542;
	const FIELD_MAIL_ID=1209045613;
	const FIELD_ACCOUNT_NAME=110753235;
	const FIELD_MAIL_PROTOCOL=1336036970;
	const FIELD_MAIL_USERNAME=2059487400;
	const FIELD_MAIL_PASSWORD=-752780691;
	const FIELD_MAIL_SERVERNAME=-690134112;
	const FIELD_BOX_REFRESH=365944113;
	const FIELD_MAILS_PER_PAGE=-53291350;
	const FIELD_SSLTYPE=-1537508080;
	const FIELD_SSLMETH=-1537735710;
	const FIELD_INT_MAILER=-716797718;
	const FIELD_STATUS=-1018832664;
	const FIELD_SET_DEFAULT=946919470;
	private static $PRIMARY_KEYS=array(self::FIELD_ACCOUNT_ID);
	private static $AUTOINCREMENT_FIELDS=array();
	private static $FIELD_NAMES=array(
		self::FIELD_ACCOUNT_ID=>'account_id',
		self::FIELD_USER_ID=>'user_id',
		self::FIELD_DISPLAY_NAME=>'display_name',
		self::FIELD_MAIL_ID=>'mail_id',
		self::FIELD_ACCOUNT_NAME=>'account_name',
		self::FIELD_MAIL_PROTOCOL=>'mail_protocol',
		self::FIELD_MAIL_USERNAME=>'mail_username',
		self::FIELD_MAIL_PASSWORD=>'mail_password',
		self::FIELD_MAIL_SERVERNAME=>'mail_servername',
		self::FIELD_BOX_REFRESH=>'box_refresh',
		self::FIELD_MAILS_PER_PAGE=>'mails_per_page',
		self::FIELD_SSLTYPE=>'ssltype',
		self::FIELD_SSLMETH=>'sslmeth',
		self::FIELD_INT_MAILER=>'int_mailer',
		self::FIELD_STATUS=>'status',
		self::FIELD_SET_DEFAULT=>'set_default');
	private static $PROPERTY_NAMES=array(
		self::FIELD_ACCOUNT_ID=>'accountId',
		self::FIELD_USER_ID=>'userId',
		self::FIELD_DISPLAY_NAME=>'displayName',
		self::FIELD_MAIL_ID=>'mailId',
		self::FIELD_ACCOUNT_NAME=>'accountName',
		self::FIELD_MAIL_PROTOCOL=>'mailProtocol',
		self::FIELD_MAIL_USERNAME=>'mailUserName',
		self::FIELD_MAIL_PASSWORD=>'mailPassword',
		self::FIELD_MAIL_SERVERNAME=>'mailServerName',
		self::FIELD_BOX_REFRESH=>'boxRefresh',
		self::FIELD_MAILS_PER_PAGE=>'mailsPerPage',
		self::FIELD_SSLTYPE=>'ssLType',
		self::FIELD_SSLMETH=>'ssLMetH',
		self::FIELD_INT_MAILER=>'intMailer',
		self::FIELD_STATUS=>'status',
		self::FIELD_SET_DEFAULT=>'setDefault');
	private static $PROPERTY_TYPES=array(
		self::FIELD_ACCOUNT_ID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_USER_ID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_DISPLAY_NAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MAIL_ID=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ACCOUNT_NAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MAIL_PROTOCOL=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MAIL_USERNAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MAIL_PASSWORD=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MAIL_SERVERNAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_BOX_REFRESH=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_MAILS_PER_PAGE=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_SSLTYPE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SSLMETH=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_INT_MAILER=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_STATUS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SET_DEFAULT=>Db2PhpEntity::PHP_TYPE_INT);
	private static $FIELD_TYPES=array(
		self::FIELD_ACCOUNT_ID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_USER_ID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_DISPLAY_NAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_MAIL_ID=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_ACCOUNT_NAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_MAIL_PROTOCOL=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,20,0,true),
		self::FIELD_MAIL_USERNAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,false),
		self::FIELD_MAIL_PASSWORD=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,250,0,false),
		self::FIELD_MAIL_SERVERNAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_BOX_REFRESH=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_MAILS_PER_PAGE=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_SSLTYPE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_SSLMETH=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_INT_MAILER=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_STATUS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,10,0,true),
		self::FIELD_SET_DEFAULT=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true));
	private static $DEFAULT_VALUES=array(
		self::FIELD_ACCOUNT_ID=>0,
		self::FIELD_USER_ID=>0,
		self::FIELD_DISPLAY_NAME=>null,
		self::FIELD_MAIL_ID=>null,
		self::FIELD_ACCOUNT_NAME=>null,
		self::FIELD_MAIL_PROTOCOL=>null,
		self::FIELD_MAIL_USERNAME=>'',
		self::FIELD_MAIL_PASSWORD=>'',
		self::FIELD_MAIL_SERVERNAME=>null,
		self::FIELD_BOX_REFRESH=>null,
		self::FIELD_MAILS_PER_PAGE=>null,
		self::FIELD_SSLTYPE=>null,
		self::FIELD_SSLMETH=>null,
		self::FIELD_INT_MAILER=>0,
		self::FIELD_STATUS=>null,
		self::FIELD_SET_DEFAULT=>null);
	private $accountId;
	private $userId;
	private $displayName;
	private $mailId;
	private $accountName;
	private $mailProtocol;
	private $mailUserName;
	private $mailPassword;
	private $mailServerName;
	private $boxRefresh;
	private $mailsPerPage;
	private $ssLType;
	private $ssLMetH;
	private $intMailer;
	private $status;
	private $setDefault;

	/**
	 * set value for account_id 
	 *
	 * type:INT,size:10,default:null,primary,unique
	 *
	 * @param mixed $accountId
	 * @return VTigerMailAccounts
	 */
	public function &setAccountId($accountId) {
		$this->notifyChanged(self::FIELD_ACCOUNT_ID,$this->accountId,$accountId);
		$this->accountId=$accountId;
		return $this;
	}

	/**
	 * get value for account_id 
	 *
	 * type:INT,size:10,default:null,primary,unique
	 *
	 * @return mixed
	 */
	public function getAccountId() {
		return $this->accountId;
	}

	/**
	 * set value for user_id 
	 *
	 * type:INT,size:10,default:null
	 *
	 * @param mixed $userId
	 * @return VTigerMailAccounts
	 */
	public function &setUserId($userId) {
		$this->notifyChanged(self::FIELD_USER_ID,$this->userId,$userId);
		$this->userId=$userId;
		return $this;
	}

	/**
	 * get value for user_id 
	 *
	 * type:INT,size:10,default:null
	 *
	 * @return mixed
	 */
	public function getUserId() {
		return $this->userId;
	}

	/**
	 * set value for display_name 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $displayName
	 * @return VTigerMailAccounts
	 */
	public function &setDisplayName($displayName) {
		$this->notifyChanged(self::FIELD_DISPLAY_NAME,$this->displayName,$displayName);
		$this->displayName=$displayName;
		return $this;
	}

	/**
	 * get value for display_name 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDisplayName() {
		return $this->displayName;
	}

	/**
	 * set value for mail_id 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $mailId
	 * @return VTigerMailAccounts
	 */
	public function &setMailId($mailId) {
		$this->notifyChanged(self::FIELD_MAIL_ID,$this->mailId,$mailId);
		$this->mailId=$mailId;
		return $this;
	}

	/**
	 * get value for mail_id 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMailId() {
		return $this->mailId;
	}

	/**
	 * set value for account_name 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $accountName
	 * @return VTigerMailAccounts
	 */
	public function &setAccountName($accountName) {
		$this->notifyChanged(self::FIELD_ACCOUNT_NAME,$this->accountName,$accountName);
		$this->accountName=$accountName;
		return $this;
	}

	/**
	 * get value for account_name 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getAccountName() {
		return $this->accountName;
	}

	/**
	 * set value for mail_protocol 
	 *
	 * type:VARCHAR,size:20,default:null,nullable
	 *
	 * @param mixed $mailProtocol
	 * @return VTigerMailAccounts
	 */
	public function &setMailProtocol($mailProtocol) {
		$this->notifyChanged(self::FIELD_MAIL_PROTOCOL,$this->mailProtocol,$mailProtocol);
		$this->mailProtocol=$mailProtocol;
		return $this;
	}

	/**
	 * get value for mail_protocol 
	 *
	 * type:VARCHAR,size:20,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMailProtocol() {
		return $this->mailProtocol;
	}

	/**
	 * set value for mail_username 
	 *
	 * type:VARCHAR,size:50,default:null
	 *
	 * @param mixed $mailUserName
	 * @return VTigerMailAccounts
	 */
	public function &setMailUserName($mailUserName) {
		$this->notifyChanged(self::FIELD_MAIL_USERNAME,$this->mailUserName,$mailUserName);
		$this->mailUserName=$mailUserName;
		return $this;
	}

	/**
	 * get value for mail_username 
	 *
	 * type:VARCHAR,size:50,default:null
	 *
	 * @return mixed
	 */
	public function getMailUserName() {
		return $this->mailUserName;
	}

	/**
	 * set value for mail_password 
	 *
	 * type:VARCHAR,size:250,default:null
	 *
	 * @param mixed $mailPassword
	 * @return VTigerMailAccounts
	 */
	public function &setMailPassword($mailPassword) {
		$this->notifyChanged(self::FIELD_MAIL_PASSWORD,$this->mailPassword,$mailPassword);
		$this->mailPassword=$mailPassword;
		return $this;
	}

	/**
	 * get value for mail_password 
	 *
	 * type:VARCHAR,size:250,default:null
	 *
	 * @return mixed
	 */
	public function getMailPassword() {
		return $this->mailPassword;
	}

	/**
	 * set value for mail_servername 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $mailServerName
	 * @return VTigerMailAccounts
	 */
	public function &setMailServerName($mailServerName) {
		$this->notifyChanged(self::FIELD_MAIL_SERVERNAME,$this->mailServerName,$mailServerName);
		$this->mailServerName=$mailServerName;
		return $this;
	}

	/**
	 * get value for mail_servername 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMailServerName() {
		return $this->mailServerName;
	}

	/**
	 * set value for box_refresh 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $boxRefresh
	 * @return VTigerMailAccounts
	 */
	public function &setBoxRefresh($boxRefresh) {
		$this->notifyChanged(self::FIELD_BOX_REFRESH,$this->boxRefresh,$boxRefresh);
		$this->boxRefresh=$boxRefresh;
		return $this;
	}

	/**
	 * get value for box_refresh 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getBoxRefresh() {
		return $this->boxRefresh;
	}

	/**
	 * set value for mails_per_page 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $mailsPerPage
	 * @return VTigerMailAccounts
	 */
	public function &setMailsPerPage($mailsPerPage) {
		$this->notifyChanged(self::FIELD_MAILS_PER_PAGE,$this->mailsPerPage,$mailsPerPage);
		$this->mailsPerPage=$mailsPerPage;
		return $this;
	}

	/**
	 * get value for mails_per_page 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMailsPerPage() {
		return $this->mailsPerPage;
	}

	/**
	 * set value for ssltype 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $ssLType
	 * @return VTigerMailAccounts
	 */
	public function &setSsLType($ssLType) {
		$this->notifyChanged(self::FIELD_SSLTYPE,$this->ssLType,$ssLType);
		$this->ssLType=$ssLType;
		return $this;
	}

	/**
	 * get value for ssltype 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSsLType() {
		return $this->ssLType;
	}

	/**
	 * set value for sslmeth 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $ssLMetH
	 * @return VTigerMailAccounts
	 */
	public function &setSsLMetH($ssLMetH) {
		$this->notifyChanged(self::FIELD_SSLMETH,$this->ssLMetH,$ssLMetH);
		$this->ssLMetH=$ssLMetH;
		return $this;
	}

	/**
	 * get value for sslmeth 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSsLMetH() {
		return $this->ssLMetH;
	}

	/**
	 * set value for int_mailer 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @param mixed $intMailer
	 * @return VTigerMailAccounts
	 */
	public function &setIntMailer($intMailer) {
		$this->notifyChanged(self::FIELD_INT_MAILER,$this->intMailer,$intMailer);
		$this->intMailer=$intMailer;
		return $this;
	}

	/**
	 * get value for int_mailer 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getIntMailer() {
		return $this->intMailer;
	}

	/**
	 * set value for status 
	 *
	 * type:VARCHAR,size:10,default:null,nullable
	 *
	 * @param mixed $status
	 * @return VTigerMailAccounts
	 */
	public function &setStatus($status) {
		$this->notifyChanged(self::FIELD_STATUS,$this->status,$status);
		$this->status=$status;
		return $this;
	}

	/**
	 * get value for status 
	 *
	 * type:VARCHAR,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getStatus() {
		return $this->status;
	}

	/**
	 * set value for set_default 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $setDefault
	 * @return VTigerMailAccounts
	 */
	public function &setSetDefault($setDefault) {
		$this->notifyChanged(self::FIELD_SET_DEFAULT,$this->setDefault,$setDefault);
		$this->setDefault=$setDefault;
		return $this;
	}

	/**
	 * get value for set_default 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSetDefault() {
		return $this->setDefault;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_ACCOUNT_ID=>$this->getAccountId(),
			self::FIELD_USER_ID=>$this->getUserId(),
			self::FIELD_DISPLAY_NAME=>$this->getDisplayName(),
			self::FIELD_MAIL_ID=>$this->getMailId(),
			self::FIELD_ACCOUNT_NAME=>$this->getAccountName(),
			self::FIELD_MAIL_PROTOCOL=>$this->getMailProtocol(),
			self::FIELD_MAIL_USERNAME=>$this->getMailUserName(),
			self::FIELD_MAIL_PASSWORD=>$this->getMailPassword(),
			self::FIELD_MAIL_SERVERNAME=>$this->getMailServerName(),
			self::FIELD_BOX_REFRESH=>$this->getBoxRefresh(),
			self::FIELD_MAILS_PER_PAGE=>$this->getMailsPerPage(),
			self::FIELD_SSLTYPE=>$this->getSsLType(),
			self::FIELD_SSLMETH=>$this->getSsLMetH(),
			self::FIELD_INT_MAILER=>$this->getIntMailer(),
			self::FIELD_STATUS=>$this->getStatus(),
			self::FIELD_SET_DEFAULT=>$this->getSetDefault());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_ACCOUNT_ID=>$this->getAccountId());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerMailAccounts instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerMailAccounts $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerMailAccounts[]
	 */
	public static function findByExample(PDO $db,VTigerMailAccounts $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerMailAccounts instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerMailAccounts[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_mail_accounts`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerMailAccounts instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerMailAccounts[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerMailAccounts instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerMailAccounts[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerMailAccounts();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerMailAccounts instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerMailAccounts[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_mail_accounts`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setAccountId($result['account_id']);
		$this->setUserId($result['user_id']);
		$this->setDisplayName($result['display_name']);
		$this->setMailId($result['mail_id']);
		$this->setAccountName($result['account_name']);
		$this->setMailProtocol($result['mail_protocol']);
		$this->setMailUserName($result['mail_username']);
		$this->setMailPassword($result['mail_password']);
		$this->setMailServerName($result['mail_servername']);
		$this->setBoxRefresh($result['box_refresh']);
		$this->setMailsPerPage($result['mails_per_page']);
		$this->setSsLType($result['ssltype']);
		$this->setSsLMetH($result['sslmeth']);
		$this->setIntMailer($result['int_mailer']);
		$this->setStatus($result['status']);
		$this->setSetDefault($result['set_default']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerMailAccounts
	 */
	public static function findById(PDO $db,$accountId) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$accountId);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerMailAccounts();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getAccountId());
		$stmt->bindValue(2,$this->getUserId());
		$stmt->bindValue(3,$this->getDisplayName());
		$stmt->bindValue(4,$this->getMailId());
		$stmt->bindValue(5,$this->getAccountName());
		$stmt->bindValue(6,$this->getMailProtocol());
		$stmt->bindValue(7,$this->getMailUserName());
		$stmt->bindValue(8,$this->getMailPassword());
		$stmt->bindValue(9,$this->getMailServerName());
		$stmt->bindValue(10,$this->getBoxRefresh());
		$stmt->bindValue(11,$this->getMailsPerPage());
		$stmt->bindValue(12,$this->getSsLType());
		$stmt->bindValue(13,$this->getSsLMetH());
		$stmt->bindValue(14,$this->getIntMailer());
		$stmt->bindValue(15,$this->getStatus());
		$stmt->bindValue(16,$this->getSetDefault());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_INSERT);
		$this->bindValues($stmt);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(17,$this->getAccountId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getAccountId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerMailAccounts';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerMailAccounts');
	}

	/**
	 * get single VTigerMailAccounts instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerMailAccounts
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerMailAccounts();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerMailAccounts from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerMailAccounts[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerMailAccounts') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>