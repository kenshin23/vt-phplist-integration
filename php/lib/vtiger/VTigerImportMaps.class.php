<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerImportMaps extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerImportMaps';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_import_maps';
	const SQL_INSERT='INSERT INTO `vtiger_import_maps` (`id`,`name`,`module`,`content`,`has_header`,`deleted`,`date_entered`,`date_modified`,`assigned_user_id`,`is_published`) VALUES (?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_import_maps` (`name`,`module`,`content`,`has_header`,`deleted`,`date_entered`,`date_modified`,`assigned_user_id`,`is_published`) VALUES (?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_import_maps` SET `id`=?,`name`=?,`module`=?,`content`=?,`has_header`=?,`deleted`=?,`date_entered`=?,`date_modified`=?,`assigned_user_id`=?,`is_published`=? WHERE `id`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_import_maps` WHERE `id`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_import_maps` WHERE `id`=?';
	const FIELD_ID=-1465487826;
	const FIELD_NAME=415621854;
	const FIELD_MODULE=-35305985;
	const FIELD_CONTENT=-1370388666;
	const FIELD_HAS_HEADER=5876197;
	const FIELD_DELETED=-771456282;
	const FIELD_DATE_ENTERED=265956153;
	const FIELD_DATE_MODIFIED=1145064775;
	const FIELD_ASSIGNED_USER_ID=1596225649;
	const FIELD_IS_PUBLISHED=1308238444;
	private static $PRIMARY_KEYS=array(self::FIELD_ID);
	private static $AUTOINCREMENT_FIELDS=array(self::FIELD_ID);
	private static $FIELD_NAMES=array(
		self::FIELD_ID=>'id',
		self::FIELD_NAME=>'name',
		self::FIELD_MODULE=>'module',
		self::FIELD_CONTENT=>'content',
		self::FIELD_HAS_HEADER=>'has_header',
		self::FIELD_DELETED=>'deleted',
		self::FIELD_DATE_ENTERED=>'date_entered',
		self::FIELD_DATE_MODIFIED=>'date_modified',
		self::FIELD_ASSIGNED_USER_ID=>'assigned_user_id',
		self::FIELD_IS_PUBLISHED=>'is_published');
	private static $PROPERTY_NAMES=array(
		self::FIELD_ID=>'id',
		self::FIELD_NAME=>'name',
		self::FIELD_MODULE=>'module',
		self::FIELD_CONTENT=>'content',
		self::FIELD_HAS_HEADER=>'hasHeader',
		self::FIELD_DELETED=>'deleted',
		self::FIELD_DATE_ENTERED=>'dateEntered',
		self::FIELD_DATE_MODIFIED=>'dateModified',
		self::FIELD_ASSIGNED_USER_ID=>'assignedUserId',
		self::FIELD_IS_PUBLISHED=>'isPublished');
	private static $PROPERTY_TYPES=array(
		self::FIELD_ID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_NAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MODULE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CONTENT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_HAS_HEADER=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_DELETED=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_DATE_ENTERED=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DATE_MODIFIED=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ASSIGNED_USER_ID=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_IS_PUBLISHED=>Db2PhpEntity::PHP_TYPE_STRING);
	private static $FIELD_TYPES=array(
		self::FIELD_ID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_NAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,36,0,false),
		self::FIELD_MODULE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,36,0,false),
		self::FIELD_CONTENT=>array(Db2PhpEntity::JDBC_TYPE_LONGVARBINARY,2147483647,0,true),
		self::FIELD_HAS_HEADER=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_DELETED=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_DATE_ENTERED=>array(Db2PhpEntity::JDBC_TYPE_TIMESTAMP,19,0,false),
		self::FIELD_DATE_MODIFIED=>array(Db2PhpEntity::JDBC_TYPE_TIMESTAMP,19,0,false),
		self::FIELD_ASSIGNED_USER_ID=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,36,0,true),
		self::FIELD_IS_PUBLISHED=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,3,0,false));
	private static $DEFAULT_VALUES=array(
		self::FIELD_ID=>null,
		self::FIELD_NAME=>'',
		self::FIELD_MODULE=>'',
		self::FIELD_CONTENT=>null,
		self::FIELD_HAS_HEADER=>1,
		self::FIELD_DELETED=>0,
		self::FIELD_DATE_ENTERED=>'CURRENT_TIMESTAMP',
		self::FIELD_DATE_MODIFIED=>'0000-00-00 00:00:00',
		self::FIELD_ASSIGNED_USER_ID=>null,
		self::FIELD_IS_PUBLISHED=>'no');
	private $id;
	private $name;
	private $module;
	private $content;
	private $hasHeader;
	private $deleted;
	private $dateEntered;
	private $dateModified;
	private $assignedUserId;
	private $isPublished;

	/**
	 * set value for id 
	 *
	 * type:INT,size:10,default:null,primary,unique,autoincrement
	 *
	 * @param mixed $id
	 * @return VTigerImportMaps
	 */
	public function &setId($id) {
		$this->notifyChanged(self::FIELD_ID,$this->id,$id);
		$this->id=$id;
		return $this;
	}

	/**
	 * get value for id 
	 *
	 * type:INT,size:10,default:null,primary,unique,autoincrement
	 *
	 * @return mixed
	 */
	public function getId() {
		return $this->id;
	}

	/**
	 * set value for name 
	 *
	 * type:VARCHAR,size:36,default:null,index
	 *
	 * @param mixed $name
	 * @return VTigerImportMaps
	 */
	public function &setName($name) {
		$this->notifyChanged(self::FIELD_NAME,$this->name,$name);
		$this->name=$name;
		return $this;
	}

	/**
	 * get value for name 
	 *
	 * type:VARCHAR,size:36,default:null,index
	 *
	 * @return mixed
	 */
	public function getName() {
		return $this->name;
	}

	/**
	 * set value for module 
	 *
	 * type:VARCHAR,size:36,default:null,index
	 *
	 * @param mixed $module
	 * @return VTigerImportMaps
	 */
	public function &setModule($module) {
		$this->notifyChanged(self::FIELD_MODULE,$this->module,$module);
		$this->module=$module;
		return $this;
	}

	/**
	 * get value for module 
	 *
	 * type:VARCHAR,size:36,default:null,index
	 *
	 * @return mixed
	 */
	public function getModule() {
		return $this->module;
	}

	/**
	 * set value for content 
	 *
	 * type:LONGBLOB,size:2147483647,default:null,nullable
	 *
	 * @param mixed $content
	 * @return VTigerImportMaps
	 */
	public function &setContent($content) {
		$this->notifyChanged(self::FIELD_CONTENT,$this->content,$content);
		$this->content=$content;
		return $this;
	}

	/**
	 * get value for content 
	 *
	 * type:LONGBLOB,size:2147483647,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getContent() {
		return $this->content;
	}

	/**
	 * set value for has_header 
	 *
	 * type:INT,size:10,default:1
	 *
	 * @param mixed $hasHeader
	 * @return VTigerImportMaps
	 */
	public function &setHasHeader($hasHeader) {
		$this->notifyChanged(self::FIELD_HAS_HEADER,$this->hasHeader,$hasHeader);
		$this->hasHeader=$hasHeader;
		return $this;
	}

	/**
	 * get value for has_header 
	 *
	 * type:INT,size:10,default:1
	 *
	 * @return mixed
	 */
	public function getHasHeader() {
		return $this->hasHeader;
	}

	/**
	 * set value for deleted 
	 *
	 * type:INT,size:10,default:0,index
	 *
	 * @param mixed $deleted
	 * @return VTigerImportMaps
	 */
	public function &setDeleted($deleted) {
		$this->notifyChanged(self::FIELD_DELETED,$this->deleted,$deleted);
		$this->deleted=$deleted;
		return $this;
	}

	/**
	 * get value for deleted 
	 *
	 * type:INT,size:10,default:0,index
	 *
	 * @return mixed
	 */
	public function getDeleted() {
		return $this->deleted;
	}

	/**
	 * set value for date_entered 
	 *
	 * type:TIMESTAMP,size:19,default:CURRENT_TIMESTAMP
	 *
	 * @param mixed $dateEntered
	 * @return VTigerImportMaps
	 */
	public function &setDateEntered($dateEntered) {
		$this->notifyChanged(self::FIELD_DATE_ENTERED,$this->dateEntered,$dateEntered);
		$this->dateEntered=$dateEntered;
		return $this;
	}

	/**
	 * get value for date_entered 
	 *
	 * type:TIMESTAMP,size:19,default:CURRENT_TIMESTAMP
	 *
	 * @return mixed
	 */
	public function getDateEntered() {
		return $this->dateEntered;
	}

	/**
	 * set value for date_modified 
	 *
	 * type:TIMESTAMP,size:19,default:0000-00-00 00:00:00
	 *
	 * @param mixed $dateModified
	 * @return VTigerImportMaps
	 */
	public function &setDateModified($dateModified) {
		$this->notifyChanged(self::FIELD_DATE_MODIFIED,$this->dateModified,$dateModified);
		$this->dateModified=$dateModified;
		return $this;
	}

	/**
	 * get value for date_modified 
	 *
	 * type:TIMESTAMP,size:19,default:0000-00-00 00:00:00
	 *
	 * @return mixed
	 */
	public function getDateModified() {
		return $this->dateModified;
	}

	/**
	 * set value for assigned_user_id 
	 *
	 * type:VARCHAR,size:36,default:null,index,nullable
	 *
	 * @param mixed $assignedUserId
	 * @return VTigerImportMaps
	 */
	public function &setAssignedUserId($assignedUserId) {
		$this->notifyChanged(self::FIELD_ASSIGNED_USER_ID,$this->assignedUserId,$assignedUserId);
		$this->assignedUserId=$assignedUserId;
		return $this;
	}

	/**
	 * get value for assigned_user_id 
	 *
	 * type:VARCHAR,size:36,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getAssignedUserId() {
		return $this->assignedUserId;
	}

	/**
	 * set value for is_published 
	 *
	 * type:VARCHAR,size:3,default:no
	 *
	 * @param mixed $isPublished
	 * @return VTigerImportMaps
	 */
	public function &setIsPublished($isPublished) {
		$this->notifyChanged(self::FIELD_IS_PUBLISHED,$this->isPublished,$isPublished);
		$this->isPublished=$isPublished;
		return $this;
	}

	/**
	 * get value for is_published 
	 *
	 * type:VARCHAR,size:3,default:no
	 *
	 * @return mixed
	 */
	public function getIsPublished() {
		return $this->isPublished;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_ID=>$this->getId(),
			self::FIELD_NAME=>$this->getName(),
			self::FIELD_MODULE=>$this->getModule(),
			self::FIELD_CONTENT=>$this->getContent(),
			self::FIELD_HAS_HEADER=>$this->getHasHeader(),
			self::FIELD_DELETED=>$this->getDeleted(),
			self::FIELD_DATE_ENTERED=>$this->getDateEntered(),
			self::FIELD_DATE_MODIFIED=>$this->getDateModified(),
			self::FIELD_ASSIGNED_USER_ID=>$this->getAssignedUserId(),
			self::FIELD_IS_PUBLISHED=>$this->getIsPublished());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_ID=>$this->getId());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerImportMaps instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerImportMaps $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerImportMaps[]
	 */
	public static function findByExample(PDO $db,VTigerImportMaps $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerImportMaps instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerImportMaps[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_import_maps`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerImportMaps instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerImportMaps[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerImportMaps instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerImportMaps[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerImportMaps();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerImportMaps instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerImportMaps[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_import_maps`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setId($result['id']);
		$this->setName($result['name']);
		$this->setModule($result['module']);
		$this->setContent($result['content']);
		$this->setHasHeader($result['has_header']);
		$this->setDeleted($result['deleted']);
		$this->setDateEntered($result['date_entered']);
		$this->setDateModified($result['date_modified']);
		$this->setAssignedUserId($result['assigned_user_id']);
		$this->setIsPublished($result['is_published']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerImportMaps
	 */
	public static function findById(PDO $db,$id) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$id);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerImportMaps();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getId());
		$stmt->bindValue(2,$this->getName());
		$stmt->bindValue(3,$this->getModule());
		$stmt->bindValue(4,$this->getContent());
		$stmt->bindValue(5,$this->getHasHeader());
		$stmt->bindValue(6,$this->getDeleted());
		$stmt->bindValue(7,$this->getDateEntered());
		$stmt->bindValue(8,$this->getDateModified());
		$stmt->bindValue(9,$this->getAssignedUserId());
		$stmt->bindValue(10,$this->getIsPublished());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		if (null===$this->getId()) {
			$stmt=self::prepareStatement($db,self::SQL_INSERT_AUTOINCREMENT);
			$stmt->bindValue(1,$this->getName());
			$stmt->bindValue(2,$this->getModule());
			$stmt->bindValue(3,$this->getContent());
			$stmt->bindValue(4,$this->getHasHeader());
			$stmt->bindValue(5,$this->getDeleted());
			$stmt->bindValue(6,$this->getDateEntered());
			$stmt->bindValue(7,$this->getDateModified());
			$stmt->bindValue(8,$this->getAssignedUserId());
			$stmt->bindValue(9,$this->getIsPublished());
		} else {
			$stmt=self::prepareStatement($db,self::SQL_INSERT);
			$this->bindValues($stmt);
		}
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$lastInsertId=$db->lastInsertId();
		if (false!==$lastInsertId) {
			$this->setId($lastInsertId);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(11,$this->getId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerImportMaps';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerImportMaps');
	}

	/**
	 * get single VTigerImportMaps instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerImportMaps
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerImportMaps();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerImportMaps from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerImportMaps[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerImportMaps') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>