<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerPotential extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerPotential';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_potential';
	const SQL_INSERT='INSERT INTO `vtiger_potential` (`potentialid`,`potential_no`,`related_to`,`potentialname`,`amount`,`currency`,`closingdate`,`typeofrevenue`,`nextstep`,`private`,`probability`,`campaignid`,`sales_stage`,`potentialtype`,`leadsource`,`productid`,`productversion`,`quotationref`,`partnercontact`,`remarks`,`runtimefee`,`followupdate`,`evaluationstatus`,`description`,`forecastcategory`,`outcomeanalysis`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_potential` (`potentialid`,`potential_no`,`related_to`,`potentialname`,`amount`,`currency`,`closingdate`,`typeofrevenue`,`nextstep`,`private`,`probability`,`campaignid`,`sales_stage`,`potentialtype`,`leadsource`,`productid`,`productversion`,`quotationref`,`partnercontact`,`remarks`,`runtimefee`,`followupdate`,`evaluationstatus`,`description`,`forecastcategory`,`outcomeanalysis`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_potential` SET `potentialid`=?,`potential_no`=?,`related_to`=?,`potentialname`=?,`amount`=?,`currency`=?,`closingdate`=?,`typeofrevenue`=?,`nextstep`=?,`private`=?,`probability`=?,`campaignid`=?,`sales_stage`=?,`potentialtype`=?,`leadsource`=?,`productid`=?,`productversion`=?,`quotationref`=?,`partnercontact`=?,`remarks`=?,`runtimefee`=?,`followupdate`=?,`evaluationstatus`=?,`description`=?,`forecastcategory`=?,`outcomeanalysis`=? WHERE `potentialid`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_potential` WHERE `potentialid`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_potential` WHERE `potentialid`=?';
	const FIELD_POTENTIALID=263808563;
	const FIELD_POTENTIAL_NO=-411878328;
	const FIELD_RELATED_TO=-1168719019;
	const FIELD_POTENTIALNAME=117108131;
	const FIELD_AMOUNT=1590182814;
	const FIELD_CURRENCY=1235888599;
	const FIELD_CLOSINGDATE=1499664989;
	const FIELD_TYPEOFREVENUE=-2083706267;
	const FIELD_NEXTSTEP=2085820933;
	const FIELD_PRIVATE=-1678664963;
	const FIELD_PROBABILITY=20496559;
	const FIELD_CAMPAIGNID=2049174129;
	const FIELD_SALES_STAGE=-1249993083;
	const FIELD_POTENTIALTYPE=117310034;
	const FIELD_LEADSOURCE=662958781;
	const FIELD_PRODUCTID=-2051581628;
	const FIELD_PRODUCTVERSION=2145649231;
	const FIELD_QUOTATIONREF=292261453;
	const FIELD_PARTNERCONTACT=-585686114;
	const FIELD_REMARKS=-272752019;
	const FIELD_RUNTIMEFEE=-1457361676;
	const FIELD_FOLLOWUPDATE=569643648;
	const FIELD_EVALUATIONSTATUS=1905364468;
	const FIELD_DESCRIPTION=-413488010;
	const FIELD_FORECASTCATEGORY=-1424527425;
	const FIELD_OUTCOMEANALYSIS=-449624;
	private static $PRIMARY_KEYS=array(self::FIELD_POTENTIALID);
	private static $AUTOINCREMENT_FIELDS=array();
	private static $FIELD_NAMES=array(
		self::FIELD_POTENTIALID=>'potentialid',
		self::FIELD_POTENTIAL_NO=>'potential_no',
		self::FIELD_RELATED_TO=>'related_to',
		self::FIELD_POTENTIALNAME=>'potentialname',
		self::FIELD_AMOUNT=>'amount',
		self::FIELD_CURRENCY=>'currency',
		self::FIELD_CLOSINGDATE=>'closingdate',
		self::FIELD_TYPEOFREVENUE=>'typeofrevenue',
		self::FIELD_NEXTSTEP=>'nextstep',
		self::FIELD_PRIVATE=>'private',
		self::FIELD_PROBABILITY=>'probability',
		self::FIELD_CAMPAIGNID=>'campaignid',
		self::FIELD_SALES_STAGE=>'sales_stage',
		self::FIELD_POTENTIALTYPE=>'potentialtype',
		self::FIELD_LEADSOURCE=>'leadsource',
		self::FIELD_PRODUCTID=>'productid',
		self::FIELD_PRODUCTVERSION=>'productversion',
		self::FIELD_QUOTATIONREF=>'quotationref',
		self::FIELD_PARTNERCONTACT=>'partnercontact',
		self::FIELD_REMARKS=>'remarks',
		self::FIELD_RUNTIMEFEE=>'runtimefee',
		self::FIELD_FOLLOWUPDATE=>'followupdate',
		self::FIELD_EVALUATIONSTATUS=>'evaluationstatus',
		self::FIELD_DESCRIPTION=>'description',
		self::FIELD_FORECASTCATEGORY=>'forecastcategory',
		self::FIELD_OUTCOMEANALYSIS=>'outcomeanalysis');
	private static $PROPERTY_NAMES=array(
		self::FIELD_POTENTIALID=>'potentialId',
		self::FIELD_POTENTIAL_NO=>'potentialNo',
		self::FIELD_RELATED_TO=>'relatedTo',
		self::FIELD_POTENTIALNAME=>'potentialName',
		self::FIELD_AMOUNT=>'amount',
		self::FIELD_CURRENCY=>'currency',
		self::FIELD_CLOSINGDATE=>'closingDate',
		self::FIELD_TYPEOFREVENUE=>'typeOfRevenue',
		self::FIELD_NEXTSTEP=>'nextStep',
		self::FIELD_PRIVATE=>'private',
		self::FIELD_PROBABILITY=>'probability',
		self::FIELD_CAMPAIGNID=>'campaignId',
		self::FIELD_SALES_STAGE=>'salesStage',
		self::FIELD_POTENTIALTYPE=>'potentialType',
		self::FIELD_LEADSOURCE=>'leadSource',
		self::FIELD_PRODUCTID=>'productId',
		self::FIELD_PRODUCTVERSION=>'productVersion',
		self::FIELD_QUOTATIONREF=>'quotationRef',
		self::FIELD_PARTNERCONTACT=>'partnerContact',
		self::FIELD_REMARKS=>'remarks',
		self::FIELD_RUNTIMEFEE=>'runTimeFee',
		self::FIELD_FOLLOWUPDATE=>'followupDate',
		self::FIELD_EVALUATIONSTATUS=>'evaluationsTatUs',
		self::FIELD_DESCRIPTION=>'description',
		self::FIELD_FORECASTCATEGORY=>'forecastCategory',
		self::FIELD_OUTCOMEANALYSIS=>'outcomeAnalysis');
	private static $PROPERTY_TYPES=array(
		self::FIELD_POTENTIALID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_POTENTIAL_NO=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_RELATED_TO=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_POTENTIALNAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_AMOUNT=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_CURRENCY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CLOSINGDATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TYPEOFREVENUE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_NEXTSTEP=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PRIVATE=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_PROBABILITY=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_CAMPAIGNID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_SALES_STAGE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_POTENTIALTYPE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_LEADSOURCE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PRODUCTID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_PRODUCTVERSION=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_QUOTATIONREF=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PARTNERCONTACT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_REMARKS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_RUNTIMEFEE=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_FOLLOWUPDATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_EVALUATIONSTATUS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DESCRIPTION=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_FORECASTCATEGORY=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_OUTCOMEANALYSIS=>Db2PhpEntity::PHP_TYPE_INT);
	private static $FIELD_TYPES=array(
		self::FIELD_POTENTIALID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_POTENTIAL_NO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,false),
		self::FIELD_RELATED_TO=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_POTENTIALNAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,120,0,false),
		self::FIELD_AMOUNT=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,14,2,true),
		self::FIELD_CURRENCY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,20,0,true),
		self::FIELD_CLOSINGDATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_TYPEOFREVENUE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_NEXTSTEP=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_PRIVATE=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_PROBABILITY=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,7,3,true),
		self::FIELD_CAMPAIGNID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_SALES_STAGE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_POTENTIALTYPE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_LEADSOURCE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_PRODUCTID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_PRODUCTVERSION=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_QUOTATIONREF=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_PARTNERCONTACT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_REMARKS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_RUNTIMEFEE=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_FOLLOWUPDATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_EVALUATIONSTATUS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_DESCRIPTION=>array(Db2PhpEntity::JDBC_TYPE_LONGVARCHAR,65535,0,true),
		self::FIELD_FORECASTCATEGORY=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_OUTCOMEANALYSIS=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true));
	private static $DEFAULT_VALUES=array(
		self::FIELD_POTENTIALID=>0,
		self::FIELD_POTENTIAL_NO=>'',
		self::FIELD_RELATED_TO=>null,
		self::FIELD_POTENTIALNAME=>'',
		self::FIELD_AMOUNT=>0.00,
		self::FIELD_CURRENCY=>null,
		self::FIELD_CLOSINGDATE=>null,
		self::FIELD_TYPEOFREVENUE=>null,
		self::FIELD_NEXTSTEP=>null,
		self::FIELD_PRIVATE=>0,
		self::FIELD_PROBABILITY=>0.000,
		self::FIELD_CAMPAIGNID=>null,
		self::FIELD_SALES_STAGE=>null,
		self::FIELD_POTENTIALTYPE=>null,
		self::FIELD_LEADSOURCE=>null,
		self::FIELD_PRODUCTID=>null,
		self::FIELD_PRODUCTVERSION=>null,
		self::FIELD_QUOTATIONREF=>null,
		self::FIELD_PARTNERCONTACT=>null,
		self::FIELD_REMARKS=>null,
		self::FIELD_RUNTIMEFEE=>0,
		self::FIELD_FOLLOWUPDATE=>null,
		self::FIELD_EVALUATIONSTATUS=>null,
		self::FIELD_DESCRIPTION=>null,
		self::FIELD_FORECASTCATEGORY=>0,
		self::FIELD_OUTCOMEANALYSIS=>0);
	private $potentialId;
	private $potentialNo;
	private $relatedTo;
	private $potentialName;
	private $amount;
	private $currency;
	private $closingDate;
	private $typeOfRevenue;
	private $nextStep;
	private $private;
	private $probability;
	private $campaignId;
	private $salesStage;
	private $potentialType;
	private $leadSource;
	private $productId;
	private $productVersion;
	private $quotationRef;
	private $partnerContact;
	private $remarks;
	private $runTimeFee;
	private $followupDate;
	private $evaluationsTatUs;
	private $description;
	private $forecastCategory;
	private $outcomeAnalysis;

	/**
	 * set value for potentialid 
	 *
	 * type:INT,size:10,default:0,primary,unique
	 *
	 * @param mixed $potentialId
	 * @return VTigerPotential
	 */
	public function &setPotentialId($potentialId) {
		$this->notifyChanged(self::FIELD_POTENTIALID,$this->potentialId,$potentialId);
		$this->potentialId=$potentialId;
		return $this;
	}

	/**
	 * get value for potentialid 
	 *
	 * type:INT,size:10,default:0,primary,unique
	 *
	 * @return mixed
	 */
	public function getPotentialId() {
		return $this->potentialId;
	}

	/**
	 * set value for potential_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @param mixed $potentialNo
	 * @return VTigerPotential
	 */
	public function &setPotentialNo($potentialNo) {
		$this->notifyChanged(self::FIELD_POTENTIAL_NO,$this->potentialNo,$potentialNo);
		$this->potentialNo=$potentialNo;
		return $this;
	}

	/**
	 * get value for potential_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @return mixed
	 */
	public function getPotentialNo() {
		return $this->potentialNo;
	}

	/**
	 * set value for related_to 
	 *
	 * type:INT,size:10,default:null,index,nullable
	 *
	 * @param mixed $relatedTo
	 * @return VTigerPotential
	 */
	public function &setRelatedTo($relatedTo) {
		$this->notifyChanged(self::FIELD_RELATED_TO,$this->relatedTo,$relatedTo);
		$this->relatedTo=$relatedTo;
		return $this;
	}

	/**
	 * get value for related_to 
	 *
	 * type:INT,size:10,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getRelatedTo() {
		return $this->relatedTo;
	}

	/**
	 * set value for potentialname 
	 *
	 * type:VARCHAR,size:120,default:null
	 *
	 * @param mixed $potentialName
	 * @return VTigerPotential
	 */
	public function &setPotentialName($potentialName) {
		$this->notifyChanged(self::FIELD_POTENTIALNAME,$this->potentialName,$potentialName);
		$this->potentialName=$potentialName;
		return $this;
	}

	/**
	 * get value for potentialname 
	 *
	 * type:VARCHAR,size:120,default:null
	 *
	 * @return mixed
	 */
	public function getPotentialName() {
		return $this->potentialName;
	}

	/**
	 * set value for amount 
	 *
	 * type:DECIMAL,size:14,default:0.00,index,nullable
	 *
	 * @param mixed $amount
	 * @return VTigerPotential
	 */
	public function &setAmount($amount) {
		$this->notifyChanged(self::FIELD_AMOUNT,$this->amount,$amount);
		$this->amount=$amount;
		return $this;
	}

	/**
	 * get value for amount 
	 *
	 * type:DECIMAL,size:14,default:0.00,index,nullable
	 *
	 * @return mixed
	 */
	public function getAmount() {
		return $this->amount;
	}

	/**
	 * set value for currency 
	 *
	 * type:VARCHAR,size:20,default:null,nullable
	 *
	 * @param mixed $currency
	 * @return VTigerPotential
	 */
	public function &setCurrency($currency) {
		$this->notifyChanged(self::FIELD_CURRENCY,$this->currency,$currency);
		$this->currency=$currency;
		return $this;
	}

	/**
	 * get value for currency 
	 *
	 * type:VARCHAR,size:20,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getCurrency() {
		return $this->currency;
	}

	/**
	 * set value for closingdate 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $closingDate
	 * @return VTigerPotential
	 */
	public function &setClosingDate($closingDate) {
		$this->notifyChanged(self::FIELD_CLOSINGDATE,$this->closingDate,$closingDate);
		$this->closingDate=$closingDate;
		return $this;
	}

	/**
	 * get value for closingdate 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getClosingDate() {
		return $this->closingDate;
	}

	/**
	 * set value for typeofrevenue 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $typeOfRevenue
	 * @return VTigerPotential
	 */
	public function &setTypeOfRevenue($typeOfRevenue) {
		$this->notifyChanged(self::FIELD_TYPEOFREVENUE,$this->typeOfRevenue,$typeOfRevenue);
		$this->typeOfRevenue=$typeOfRevenue;
		return $this;
	}

	/**
	 * get value for typeofrevenue 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTypeOfRevenue() {
		return $this->typeOfRevenue;
	}

	/**
	 * set value for nextstep 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $nextStep
	 * @return VTigerPotential
	 */
	public function &setNextStep($nextStep) {
		$this->notifyChanged(self::FIELD_NEXTSTEP,$this->nextStep,$nextStep);
		$this->nextStep=$nextStep;
		return $this;
	}

	/**
	 * get value for nextstep 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getNextStep() {
		return $this->nextStep;
	}

	/**
	 * set value for private 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @param mixed $private
	 * @return VTigerPotential
	 */
	public function &setPrivate($private) {
		$this->notifyChanged(self::FIELD_PRIVATE,$this->private,$private);
		$this->private=$private;
		return $this;
	}

	/**
	 * get value for private 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getPrivate() {
		return $this->private;
	}

	/**
	 * set value for probability 
	 *
	 * type:DECIMAL,size:7,default:0.000,nullable
	 *
	 * @param mixed $probability
	 * @return VTigerPotential
	 */
	public function &setProbability($probability) {
		$this->notifyChanged(self::FIELD_PROBABILITY,$this->probability,$probability);
		$this->probability=$probability;
		return $this;
	}

	/**
	 * get value for probability 
	 *
	 * type:DECIMAL,size:7,default:0.000,nullable
	 *
	 * @return mixed
	 */
	public function getProbability() {
		return $this->probability;
	}

	/**
	 * set value for campaignid 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $campaignId
	 * @return VTigerPotential
	 */
	public function &setCampaignId($campaignId) {
		$this->notifyChanged(self::FIELD_CAMPAIGNID,$this->campaignId,$campaignId);
		$this->campaignId=$campaignId;
		return $this;
	}

	/**
	 * get value for campaignid 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getCampaignId() {
		return $this->campaignId;
	}

	/**
	 * set value for sales_stage 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @param mixed $salesStage
	 * @return VTigerPotential
	 */
	public function &setSalesStage($salesStage) {
		$this->notifyChanged(self::FIELD_SALES_STAGE,$this->salesStage,$salesStage);
		$this->salesStage=$salesStage;
		return $this;
	}

	/**
	 * get value for sales_stage 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getSalesStage() {
		return $this->salesStage;
	}

	/**
	 * set value for potentialtype 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $potentialType
	 * @return VTigerPotential
	 */
	public function &setPotentialType($potentialType) {
		$this->notifyChanged(self::FIELD_POTENTIALTYPE,$this->potentialType,$potentialType);
		$this->potentialType=$potentialType;
		return $this;
	}

	/**
	 * get value for potentialtype 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPotentialType() {
		return $this->potentialType;
	}

	/**
	 * set value for leadsource 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $leadSource
	 * @return VTigerPotential
	 */
	public function &setLeadSource($leadSource) {
		$this->notifyChanged(self::FIELD_LEADSOURCE,$this->leadSource,$leadSource);
		$this->leadSource=$leadSource;
		return $this;
	}

	/**
	 * get value for leadsource 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getLeadSource() {
		return $this->leadSource;
	}

	/**
	 * set value for productid 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $productId
	 * @return VTigerPotential
	 */
	public function &setProductId($productId) {
		$this->notifyChanged(self::FIELD_PRODUCTID,$this->productId,$productId);
		$this->productId=$productId;
		return $this;
	}

	/**
	 * get value for productid 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getProductId() {
		return $this->productId;
	}

	/**
	 * set value for productversion 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $productVersion
	 * @return VTigerPotential
	 */
	public function &setProductVersion($productVersion) {
		$this->notifyChanged(self::FIELD_PRODUCTVERSION,$this->productVersion,$productVersion);
		$this->productVersion=$productVersion;
		return $this;
	}

	/**
	 * get value for productversion 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getProductVersion() {
		return $this->productVersion;
	}

	/**
	 * set value for quotationref 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $quotationRef
	 * @return VTigerPotential
	 */
	public function &setQuotationRef($quotationRef) {
		$this->notifyChanged(self::FIELD_QUOTATIONREF,$this->quotationRef,$quotationRef);
		$this->quotationRef=$quotationRef;
		return $this;
	}

	/**
	 * get value for quotationref 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getQuotationRef() {
		return $this->quotationRef;
	}

	/**
	 * set value for partnercontact 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $partnerContact
	 * @return VTigerPotential
	 */
	public function &setPartnerContact($partnerContact) {
		$this->notifyChanged(self::FIELD_PARTNERCONTACT,$this->partnerContact,$partnerContact);
		$this->partnerContact=$partnerContact;
		return $this;
	}

	/**
	 * get value for partnercontact 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPartnerContact() {
		return $this->partnerContact;
	}

	/**
	 * set value for remarks 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $remarks
	 * @return VTigerPotential
	 */
	public function &setRemarks($remarks) {
		$this->notifyChanged(self::FIELD_REMARKS,$this->remarks,$remarks);
		$this->remarks=$remarks;
		return $this;
	}

	/**
	 * get value for remarks 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getRemarks() {
		return $this->remarks;
	}

	/**
	 * set value for runtimefee 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @param mixed $runTimeFee
	 * @return VTigerPotential
	 */
	public function &setRunTimeFee($runTimeFee) {
		$this->notifyChanged(self::FIELD_RUNTIMEFEE,$this->runTimeFee,$runTimeFee);
		$this->runTimeFee=$runTimeFee;
		return $this;
	}

	/**
	 * get value for runtimefee 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getRunTimeFee() {
		return $this->runTimeFee;
	}

	/**
	 * set value for followupdate 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $followupDate
	 * @return VTigerPotential
	 */
	public function &setFollowupDate($followupDate) {
		$this->notifyChanged(self::FIELD_FOLLOWUPDATE,$this->followupDate,$followupDate);
		$this->followupDate=$followupDate;
		return $this;
	}

	/**
	 * get value for followupdate 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getFollowupDate() {
		return $this->followupDate;
	}

	/**
	 * set value for evaluationstatus 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $evaluationsTatUs
	 * @return VTigerPotential
	 */
	public function &setEvaluationsTatUs($evaluationsTatUs) {
		$this->notifyChanged(self::FIELD_EVALUATIONSTATUS,$this->evaluationsTatUs,$evaluationsTatUs);
		$this->evaluationsTatUs=$evaluationsTatUs;
		return $this;
	}

	/**
	 * get value for evaluationstatus 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getEvaluationsTatUs() {
		return $this->evaluationsTatUs;
	}

	/**
	 * set value for description 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @param mixed $description
	 * @return VTigerPotential
	 */
	public function &setDescription($description) {
		$this->notifyChanged(self::FIELD_DESCRIPTION,$this->description,$description);
		$this->description=$description;
		return $this;
	}

	/**
	 * get value for description 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDescription() {
		return $this->description;
	}

	/**
	 * set value for forecastcategory 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @param mixed $forecastCategory
	 * @return VTigerPotential
	 */
	public function &setForecastCategory($forecastCategory) {
		$this->notifyChanged(self::FIELD_FORECASTCATEGORY,$this->forecastCategory,$forecastCategory);
		$this->forecastCategory=$forecastCategory;
		return $this;
	}

	/**
	 * get value for forecastcategory 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getForecastCategory() {
		return $this->forecastCategory;
	}

	/**
	 * set value for outcomeanalysis 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @param mixed $outcomeAnalysis
	 * @return VTigerPotential
	 */
	public function &setOutcomeAnalysis($outcomeAnalysis) {
		$this->notifyChanged(self::FIELD_OUTCOMEANALYSIS,$this->outcomeAnalysis,$outcomeAnalysis);
		$this->outcomeAnalysis=$outcomeAnalysis;
		return $this;
	}

	/**
	 * get value for outcomeanalysis 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getOutcomeAnalysis() {
		return $this->outcomeAnalysis;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_POTENTIALID=>$this->getPotentialId(),
			self::FIELD_POTENTIAL_NO=>$this->getPotentialNo(),
			self::FIELD_RELATED_TO=>$this->getRelatedTo(),
			self::FIELD_POTENTIALNAME=>$this->getPotentialName(),
			self::FIELD_AMOUNT=>$this->getAmount(),
			self::FIELD_CURRENCY=>$this->getCurrency(),
			self::FIELD_CLOSINGDATE=>$this->getClosingDate(),
			self::FIELD_TYPEOFREVENUE=>$this->getTypeOfRevenue(),
			self::FIELD_NEXTSTEP=>$this->getNextStep(),
			self::FIELD_PRIVATE=>$this->getPrivate(),
			self::FIELD_PROBABILITY=>$this->getProbability(),
			self::FIELD_CAMPAIGNID=>$this->getCampaignId(),
			self::FIELD_SALES_STAGE=>$this->getSalesStage(),
			self::FIELD_POTENTIALTYPE=>$this->getPotentialType(),
			self::FIELD_LEADSOURCE=>$this->getLeadSource(),
			self::FIELD_PRODUCTID=>$this->getProductId(),
			self::FIELD_PRODUCTVERSION=>$this->getProductVersion(),
			self::FIELD_QUOTATIONREF=>$this->getQuotationRef(),
			self::FIELD_PARTNERCONTACT=>$this->getPartnerContact(),
			self::FIELD_REMARKS=>$this->getRemarks(),
			self::FIELD_RUNTIMEFEE=>$this->getRunTimeFee(),
			self::FIELD_FOLLOWUPDATE=>$this->getFollowupDate(),
			self::FIELD_EVALUATIONSTATUS=>$this->getEvaluationsTatUs(),
			self::FIELD_DESCRIPTION=>$this->getDescription(),
			self::FIELD_FORECASTCATEGORY=>$this->getForecastCategory(),
			self::FIELD_OUTCOMEANALYSIS=>$this->getOutcomeAnalysis());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_POTENTIALID=>$this->getPotentialId());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerPotential instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerPotential $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerPotential[]
	 */
	public static function findByExample(PDO $db,VTigerPotential $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerPotential instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerPotential[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_potential`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerPotential instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerPotential[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerPotential instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerPotential[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerPotential();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerPotential instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerPotential[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_potential`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setPotentialId($result['potentialid']);
		$this->setPotentialNo($result['potential_no']);
		$this->setRelatedTo($result['related_to']);
		$this->setPotentialName($result['potentialname']);
		$this->setAmount($result['amount']);
		$this->setCurrency($result['currency']);
		$this->setClosingDate($result['closingdate']);
		$this->setTypeOfRevenue($result['typeofrevenue']);
		$this->setNextStep($result['nextstep']);
		$this->setPrivate($result['private']);
		$this->setProbability($result['probability']);
		$this->setCampaignId($result['campaignid']);
		$this->setSalesStage($result['sales_stage']);
		$this->setPotentialType($result['potentialtype']);
		$this->setLeadSource($result['leadsource']);
		$this->setProductId($result['productid']);
		$this->setProductVersion($result['productversion']);
		$this->setQuotationRef($result['quotationref']);
		$this->setPartnerContact($result['partnercontact']);
		$this->setRemarks($result['remarks']);
		$this->setRunTimeFee($result['runtimefee']);
		$this->setFollowupDate($result['followupdate']);
		$this->setEvaluationsTatUs($result['evaluationstatus']);
		$this->setDescription($result['description']);
		$this->setForecastCategory($result['forecastcategory']);
		$this->setOutcomeAnalysis($result['outcomeanalysis']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerPotential
	 */
	public static function findById(PDO $db,$potentialId) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$potentialId);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerPotential();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getPotentialId());
		$stmt->bindValue(2,$this->getPotentialNo());
		$stmt->bindValue(3,$this->getRelatedTo());
		$stmt->bindValue(4,$this->getPotentialName());
		$stmt->bindValue(5,$this->getAmount());
		$stmt->bindValue(6,$this->getCurrency());
		$stmt->bindValue(7,$this->getClosingDate());
		$stmt->bindValue(8,$this->getTypeOfRevenue());
		$stmt->bindValue(9,$this->getNextStep());
		$stmt->bindValue(10,$this->getPrivate());
		$stmt->bindValue(11,$this->getProbability());
		$stmt->bindValue(12,$this->getCampaignId());
		$stmt->bindValue(13,$this->getSalesStage());
		$stmt->bindValue(14,$this->getPotentialType());
		$stmt->bindValue(15,$this->getLeadSource());
		$stmt->bindValue(16,$this->getProductId());
		$stmt->bindValue(17,$this->getProductVersion());
		$stmt->bindValue(18,$this->getQuotationRef());
		$stmt->bindValue(19,$this->getPartnerContact());
		$stmt->bindValue(20,$this->getRemarks());
		$stmt->bindValue(21,$this->getRunTimeFee());
		$stmt->bindValue(22,$this->getFollowupDate());
		$stmt->bindValue(23,$this->getEvaluationsTatUs());
		$stmt->bindValue(24,$this->getDescription());
		$stmt->bindValue(25,$this->getForecastCategory());
		$stmt->bindValue(26,$this->getOutcomeAnalysis());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_INSERT);
		$this->bindValues($stmt);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(27,$this->getPotentialId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getPotentialId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Fetch VTigerContPotentialRel's which this VTigerPotential references.
	 * `vtiger_potential`.`potentialid` -> `vtiger_contpotentialrel`.`potentialid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerContPotentialRel[]
	 */
	public function fetchVTigerContPotentialRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerContPotentialRel::FIELD_POTENTIALID=>$this->getPotentialId());
		return VTigerContPotentialRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerLeadPotRel's which this VTigerPotential references.
	 * `vtiger_potential`.`potentialid` -> `vtiger_leadpotrel`.`potentialid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerLeadPotRel[]
	 */
	public function fetchVTigerLeadPotRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerLeadPotRel::FIELD_POTENTIALID=>$this->getPotentialId());
		return VTigerLeadPotRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerPotCompetitorRel's which this VTigerPotential references.
	 * `vtiger_potential`.`potentialid` -> `vtiger_potcompetitorrel`.`potentialid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerPotCompetitorRel[]
	 */
	public function fetchVTigerPotCompetitorRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerPotCompetitorRel::FIELD_POTENTIALID=>$this->getPotentialId());
		return VTigerPotCompetitorRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerPotentialsCf's which this VTigerPotential references.
	 * `vtiger_potential`.`potentialid` -> `vtiger_potentialscf`.`potentialid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerPotentialsCf[]
	 */
	public function fetchVTigerPotentialsCfCollection(PDO $db, $sort=null) {
		$filter=array(VTigerPotentialsCf::FIELD_POTENTIALID=>$this->getPotentialId());
		return VTigerPotentialsCf::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerPotStageHistory's which this VTigerPotential references.
	 * `vtiger_potential`.`potentialid` -> `vtiger_potstagehistory`.`potentialid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerPotStageHistory[]
	 */
	public function fetchVTigerPotStageHistoryCollection(PDO $db, $sort=null) {
		$filter=array(VTigerPotStageHistory::FIELD_POTENTIALID=>$this->getPotentialId());
		return VTigerPotStageHistory::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerQuotes's which this VTigerPotential references.
	 * `vtiger_potential`.`potentialid` -> `vtiger_quotes`.`potentialid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerQuotes[]
	 */
	public function fetchVTigerQuotesCollection(PDO $db, $sort=null) {
		$filter=array(VTigerQuotes::FIELD_POTENTIALID=>$this->getPotentialId());
		return VTigerQuotes::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerCRmEntity which references this VTigerPotential. Will return null in case reference is invalid.
	 * `vtiger_potential`.`potentialid` -> `vtiger_crmentity`.`crmid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerCRmEntity
	 */
	public function fetchVTigerCRmEntity(PDO $db, $sort=null) {
		$filter=array(VTigerCRmEntity::FIELD_CRMID=>$this->getPotentialId());
		$result=VTigerCRmEntity::findByFilter($db, $filter, true, $sort);
		return empty($result) ? null : $result[0];
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerPotential';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerPotential');
	}

	/**
	 * get single VTigerPotential instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerPotential
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerPotential();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerPotential from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerPotential[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerPotential') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>