<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerCampaign extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerCampaign';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_campaign';
	const SQL_INSERT='INSERT INTO `vtiger_campaign` (`campaign_no`,`campaignname`,`campaigntype`,`campaignstatus`,`expectedrevenue`,`budgetcost`,`actualcost`,`expectedresponse`,`numsent`,`product_id`,`sponsor`,`targetaudience`,`targetsize`,`expectedresponsecount`,`expectedsalescount`,`expectedroi`,`actualresponsecount`,`actualsalescount`,`actualroi`,`campaignid`,`closingdate`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_campaign` (`campaign_no`,`campaignname`,`campaigntype`,`campaignstatus`,`expectedrevenue`,`budgetcost`,`actualcost`,`expectedresponse`,`numsent`,`product_id`,`sponsor`,`targetaudience`,`targetsize`,`expectedresponsecount`,`expectedsalescount`,`expectedroi`,`actualresponsecount`,`actualsalescount`,`actualroi`,`campaignid`,`closingdate`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_campaign` SET `campaign_no`=?,`campaignname`=?,`campaigntype`=?,`campaignstatus`=?,`expectedrevenue`=?,`budgetcost`=?,`actualcost`=?,`expectedresponse`=?,`numsent`=?,`product_id`=?,`sponsor`=?,`targetaudience`=?,`targetsize`=?,`expectedresponsecount`=?,`expectedsalescount`=?,`expectedroi`=?,`actualresponsecount`=?,`actualsalescount`=?,`actualroi`=?,`campaignid`=?,`closingdate`=? WHERE `campaignid`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_campaign` WHERE `campaignid`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_campaign` WHERE `campaignid`=?';
	const FIELD_CAMPAIGN_NO=-1012344856;
	const FIELD_CAMPAIGNNAME=-1317485053;
	const FIELD_CAMPAIGNTYPE=-1317283150;
	const FIELD_CAMPAIGNSTATUS=1072569706;
	const FIELD_EXPECTEDREVENUE=1470051068;
	const FIELD_BUDGETCOST=873136378;
	const FIELD_ACTUALCOST=777498307;
	const FIELD_EXPECTEDRESPONSE=-1748762271;
	const FIELD_NUMSENT=455546038;
	const FIELD_PRODUCT_ID=-979265837;
	const FIELD_SPONSOR=456662962;
	const FIELD_TARGETAUDIENCE=1124045565;
	const FIELD_TARGETSIZE=2050223482;
	const FIELD_EXPECTEDRESPONSECOUNT=46269518;
	const FIELD_EXPECTEDSALESCOUNT=1126888611;
	const FIELD_EXPECTEDROI=-1566762836;
	const FIELD_ACTUALRESPONSECOUNT=1070543672;
	const FIELD_ACTUALSALESCOUNT=-1697366535;
	const FIELD_ACTUALROI=-1914567658;
	const FIELD_CAMPAIGNID=244438675;
	const FIELD_CLOSINGDATE=1387440763;
	private static $PRIMARY_KEYS=array(self::FIELD_CAMPAIGNID);
	private static $AUTOINCREMENT_FIELDS=array();
	private static $FIELD_NAMES=array(
		self::FIELD_CAMPAIGN_NO=>'campaign_no',
		self::FIELD_CAMPAIGNNAME=>'campaignname',
		self::FIELD_CAMPAIGNTYPE=>'campaigntype',
		self::FIELD_CAMPAIGNSTATUS=>'campaignstatus',
		self::FIELD_EXPECTEDREVENUE=>'expectedrevenue',
		self::FIELD_BUDGETCOST=>'budgetcost',
		self::FIELD_ACTUALCOST=>'actualcost',
		self::FIELD_EXPECTEDRESPONSE=>'expectedresponse',
		self::FIELD_NUMSENT=>'numsent',
		self::FIELD_PRODUCT_ID=>'product_id',
		self::FIELD_SPONSOR=>'sponsor',
		self::FIELD_TARGETAUDIENCE=>'targetaudience',
		self::FIELD_TARGETSIZE=>'targetsize',
		self::FIELD_EXPECTEDRESPONSECOUNT=>'expectedresponsecount',
		self::FIELD_EXPECTEDSALESCOUNT=>'expectedsalescount',
		self::FIELD_EXPECTEDROI=>'expectedroi',
		self::FIELD_ACTUALRESPONSECOUNT=>'actualresponsecount',
		self::FIELD_ACTUALSALESCOUNT=>'actualsalescount',
		self::FIELD_ACTUALROI=>'actualroi',
		self::FIELD_CAMPAIGNID=>'campaignid',
		self::FIELD_CLOSINGDATE=>'closingdate');
	private static $PROPERTY_NAMES=array(
		self::FIELD_CAMPAIGN_NO=>'campaignNo',
		self::FIELD_CAMPAIGNNAME=>'campaignName',
		self::FIELD_CAMPAIGNTYPE=>'campaignType',
		self::FIELD_CAMPAIGNSTATUS=>'campaignsTatUs',
		self::FIELD_EXPECTEDREVENUE=>'expectedRevenue',
		self::FIELD_BUDGETCOST=>'budgetCost',
		self::FIELD_ACTUALCOST=>'actualCost',
		self::FIELD_EXPECTEDRESPONSE=>'expectedResponse',
		self::FIELD_NUMSENT=>'nUmSent',
		self::FIELD_PRODUCT_ID=>'productId',
		self::FIELD_SPONSOR=>'sponsor',
		self::FIELD_TARGETAUDIENCE=>'targetAudience',
		self::FIELD_TARGETSIZE=>'targetsIze',
		self::FIELD_EXPECTEDRESPONSECOUNT=>'expectedResponseCount',
		self::FIELD_EXPECTEDSALESCOUNT=>'expectedSalesCount',
		self::FIELD_EXPECTEDROI=>'expectedRoi',
		self::FIELD_ACTUALRESPONSECOUNT=>'actualResponseCount',
		self::FIELD_ACTUALSALESCOUNT=>'actualSalesCount',
		self::FIELD_ACTUALROI=>'actualRoi',
		self::FIELD_CAMPAIGNID=>'campaignId',
		self::FIELD_CLOSINGDATE=>'closingDate');
	private static $PROPERTY_TYPES=array(
		self::FIELD_CAMPAIGN_NO=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CAMPAIGNNAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CAMPAIGNTYPE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CAMPAIGNSTATUS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_EXPECTEDREVENUE=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_BUDGETCOST=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_ACTUALCOST=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_EXPECTEDRESPONSE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_NUMSENT=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_PRODUCT_ID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_SPONSOR=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TARGETAUDIENCE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TARGETSIZE=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_EXPECTEDRESPONSECOUNT=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_EXPECTEDSALESCOUNT=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_EXPECTEDROI=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_ACTUALRESPONSECOUNT=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_ACTUALSALESCOUNT=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_ACTUALROI=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_CAMPAIGNID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_CLOSINGDATE=>Db2PhpEntity::PHP_TYPE_STRING);
	private static $FIELD_TYPES=array(
		self::FIELD_CAMPAIGN_NO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,false),
		self::FIELD_CAMPAIGNNAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,255,0,true),
		self::FIELD_CAMPAIGNTYPE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_CAMPAIGNSTATUS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_EXPECTEDREVENUE=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,25,3,true),
		self::FIELD_BUDGETCOST=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,25,3,true),
		self::FIELD_ACTUALCOST=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,25,3,true),
		self::FIELD_EXPECTEDRESPONSE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_NUMSENT=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,11,0,true),
		self::FIELD_PRODUCT_ID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_SPONSOR=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,255,0,true),
		self::FIELD_TARGETAUDIENCE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,255,0,true),
		self::FIELD_TARGETSIZE=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_EXPECTEDRESPONSECOUNT=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_EXPECTEDSALESCOUNT=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_EXPECTEDROI=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,25,3,true),
		self::FIELD_ACTUALRESPONSECOUNT=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_ACTUALSALESCOUNT=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_ACTUALROI=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,25,3,true),
		self::FIELD_CAMPAIGNID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_CLOSINGDATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true));
	private static $DEFAULT_VALUES=array(
		self::FIELD_CAMPAIGN_NO=>'',
		self::FIELD_CAMPAIGNNAME=>null,
		self::FIELD_CAMPAIGNTYPE=>null,
		self::FIELD_CAMPAIGNSTATUS=>null,
		self::FIELD_EXPECTEDREVENUE=>null,
		self::FIELD_BUDGETCOST=>null,
		self::FIELD_ACTUALCOST=>null,
		self::FIELD_EXPECTEDRESPONSE=>null,
		self::FIELD_NUMSENT=>null,
		self::FIELD_PRODUCT_ID=>null,
		self::FIELD_SPONSOR=>null,
		self::FIELD_TARGETAUDIENCE=>null,
		self::FIELD_TARGETSIZE=>null,
		self::FIELD_EXPECTEDRESPONSECOUNT=>null,
		self::FIELD_EXPECTEDSALESCOUNT=>null,
		self::FIELD_EXPECTEDROI=>null,
		self::FIELD_ACTUALRESPONSECOUNT=>null,
		self::FIELD_ACTUALSALESCOUNT=>null,
		self::FIELD_ACTUALROI=>null,
		self::FIELD_CAMPAIGNID=>0,
		self::FIELD_CLOSINGDATE=>null);
	private $campaignNo;
	private $campaignName;
	private $campaignType;
	private $campaignsTatUs;
	private $expectedRevenue;
	private $budgetCost;
	private $actualCost;
	private $expectedResponse;
	private $nUmSent;
	private $productId;
	private $sponsor;
	private $targetAudience;
	private $targetsIze;
	private $expectedResponseCount;
	private $expectedSalesCount;
	private $expectedRoi;
	private $actualResponseCount;
	private $actualSalesCount;
	private $actualRoi;
	private $campaignId;
	private $closingDate;

	/**
	 * set value for campaign_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @param mixed $campaignNo
	 * @return VTigerCampaign
	 */
	public function &setCampaignNo($campaignNo) {
		$this->notifyChanged(self::FIELD_CAMPAIGN_NO,$this->campaignNo,$campaignNo);
		$this->campaignNo=$campaignNo;
		return $this;
	}

	/**
	 * get value for campaign_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @return mixed
	 */
	public function getCampaignNo() {
		return $this->campaignNo;
	}

	/**
	 * set value for campaignname 
	 *
	 * type:VARCHAR,size:255,default:null,index,nullable
	 *
	 * @param mixed $campaignName
	 * @return VTigerCampaign
	 */
	public function &setCampaignName($campaignName) {
		$this->notifyChanged(self::FIELD_CAMPAIGNNAME,$this->campaignName,$campaignName);
		$this->campaignName=$campaignName;
		return $this;
	}

	/**
	 * get value for campaignname 
	 *
	 * type:VARCHAR,size:255,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getCampaignName() {
		return $this->campaignName;
	}

	/**
	 * set value for campaigntype 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $campaignType
	 * @return VTigerCampaign
	 */
	public function &setCampaignType($campaignType) {
		$this->notifyChanged(self::FIELD_CAMPAIGNTYPE,$this->campaignType,$campaignType);
		$this->campaignType=$campaignType;
		return $this;
	}

	/**
	 * get value for campaigntype 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getCampaignType() {
		return $this->campaignType;
	}

	/**
	 * set value for campaignstatus 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @param mixed $campaignsTatUs
	 * @return VTigerCampaign
	 */
	public function &setCampaignsTatUs($campaignsTatUs) {
		$this->notifyChanged(self::FIELD_CAMPAIGNSTATUS,$this->campaignsTatUs,$campaignsTatUs);
		$this->campaignsTatUs=$campaignsTatUs;
		return $this;
	}

	/**
	 * get value for campaignstatus 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getCampaignsTatUs() {
		return $this->campaignsTatUs;
	}

	/**
	 * set value for expectedrevenue 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @param mixed $expectedRevenue
	 * @return VTigerCampaign
	 */
	public function &setExpectedRevenue($expectedRevenue) {
		$this->notifyChanged(self::FIELD_EXPECTEDREVENUE,$this->expectedRevenue,$expectedRevenue);
		$this->expectedRevenue=$expectedRevenue;
		return $this;
	}

	/**
	 * get value for expectedrevenue 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getExpectedRevenue() {
		return $this->expectedRevenue;
	}

	/**
	 * set value for budgetcost 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @param mixed $budgetCost
	 * @return VTigerCampaign
	 */
	public function &setBudgetCost($budgetCost) {
		$this->notifyChanged(self::FIELD_BUDGETCOST,$this->budgetCost,$budgetCost);
		$this->budgetCost=$budgetCost;
		return $this;
	}

	/**
	 * get value for budgetcost 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getBudgetCost() {
		return $this->budgetCost;
	}

	/**
	 * set value for actualcost 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @param mixed $actualCost
	 * @return VTigerCampaign
	 */
	public function &setActualCost($actualCost) {
		$this->notifyChanged(self::FIELD_ACTUALCOST,$this->actualCost,$actualCost);
		$this->actualCost=$actualCost;
		return $this;
	}

	/**
	 * get value for actualcost 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getActualCost() {
		return $this->actualCost;
	}

	/**
	 * set value for expectedresponse 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $expectedResponse
	 * @return VTigerCampaign
	 */
	public function &setExpectedResponse($expectedResponse) {
		$this->notifyChanged(self::FIELD_EXPECTEDRESPONSE,$this->expectedResponse,$expectedResponse);
		$this->expectedResponse=$expectedResponse;
		return $this;
	}

	/**
	 * get value for expectedresponse 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getExpectedResponse() {
		return $this->expectedResponse;
	}

	/**
	 * set value for numsent 
	 *
	 * type:DECIMAL,size:11,default:null,nullable
	 *
	 * @param mixed $nUmSent
	 * @return VTigerCampaign
	 */
	public function &setNUmSent($nUmSent) {
		$this->notifyChanged(self::FIELD_NUMSENT,$this->nUmSent,$nUmSent);
		$this->nUmSent=$nUmSent;
		return $this;
	}

	/**
	 * get value for numsent 
	 *
	 * type:DECIMAL,size:11,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getNUmSent() {
		return $this->nUmSent;
	}

	/**
	 * set value for product_id 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $productId
	 * @return VTigerCampaign
	 */
	public function &setProductId($productId) {
		$this->notifyChanged(self::FIELD_PRODUCT_ID,$this->productId,$productId);
		$this->productId=$productId;
		return $this;
	}

	/**
	 * get value for product_id 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getProductId() {
		return $this->productId;
	}

	/**
	 * set value for sponsor 
	 *
	 * type:VARCHAR,size:255,default:null,nullable
	 *
	 * @param mixed $sponsor
	 * @return VTigerCampaign
	 */
	public function &setSponsor($sponsor) {
		$this->notifyChanged(self::FIELD_SPONSOR,$this->sponsor,$sponsor);
		$this->sponsor=$sponsor;
		return $this;
	}

	/**
	 * get value for sponsor 
	 *
	 * type:VARCHAR,size:255,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSponsor() {
		return $this->sponsor;
	}

	/**
	 * set value for targetaudience 
	 *
	 * type:VARCHAR,size:255,default:null,nullable
	 *
	 * @param mixed $targetAudience
	 * @return VTigerCampaign
	 */
	public function &setTargetAudience($targetAudience) {
		$this->notifyChanged(self::FIELD_TARGETAUDIENCE,$this->targetAudience,$targetAudience);
		$this->targetAudience=$targetAudience;
		return $this;
	}

	/**
	 * get value for targetaudience 
	 *
	 * type:VARCHAR,size:255,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTargetAudience() {
		return $this->targetAudience;
	}

	/**
	 * set value for targetsize 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $targetsIze
	 * @return VTigerCampaign
	 */
	public function &setTargetsIze($targetsIze) {
		$this->notifyChanged(self::FIELD_TARGETSIZE,$this->targetsIze,$targetsIze);
		$this->targetsIze=$targetsIze;
		return $this;
	}

	/**
	 * get value for targetsize 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTargetsIze() {
		return $this->targetsIze;
	}

	/**
	 * set value for expectedresponsecount 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $expectedResponseCount
	 * @return VTigerCampaign
	 */
	public function &setExpectedResponseCount($expectedResponseCount) {
		$this->notifyChanged(self::FIELD_EXPECTEDRESPONSECOUNT,$this->expectedResponseCount,$expectedResponseCount);
		$this->expectedResponseCount=$expectedResponseCount;
		return $this;
	}

	/**
	 * get value for expectedresponsecount 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getExpectedResponseCount() {
		return $this->expectedResponseCount;
	}

	/**
	 * set value for expectedsalescount 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $expectedSalesCount
	 * @return VTigerCampaign
	 */
	public function &setExpectedSalesCount($expectedSalesCount) {
		$this->notifyChanged(self::FIELD_EXPECTEDSALESCOUNT,$this->expectedSalesCount,$expectedSalesCount);
		$this->expectedSalesCount=$expectedSalesCount;
		return $this;
	}

	/**
	 * get value for expectedsalescount 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getExpectedSalesCount() {
		return $this->expectedSalesCount;
	}

	/**
	 * set value for expectedroi 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @param mixed $expectedRoi
	 * @return VTigerCampaign
	 */
	public function &setExpectedRoi($expectedRoi) {
		$this->notifyChanged(self::FIELD_EXPECTEDROI,$this->expectedRoi,$expectedRoi);
		$this->expectedRoi=$expectedRoi;
		return $this;
	}

	/**
	 * get value for expectedroi 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getExpectedRoi() {
		return $this->expectedRoi;
	}

	/**
	 * set value for actualresponsecount 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $actualResponseCount
	 * @return VTigerCampaign
	 */
	public function &setActualResponseCount($actualResponseCount) {
		$this->notifyChanged(self::FIELD_ACTUALRESPONSECOUNT,$this->actualResponseCount,$actualResponseCount);
		$this->actualResponseCount=$actualResponseCount;
		return $this;
	}

	/**
	 * get value for actualresponsecount 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getActualResponseCount() {
		return $this->actualResponseCount;
	}

	/**
	 * set value for actualsalescount 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $actualSalesCount
	 * @return VTigerCampaign
	 */
	public function &setActualSalesCount($actualSalesCount) {
		$this->notifyChanged(self::FIELD_ACTUALSALESCOUNT,$this->actualSalesCount,$actualSalesCount);
		$this->actualSalesCount=$actualSalesCount;
		return $this;
	}

	/**
	 * get value for actualsalescount 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getActualSalesCount() {
		return $this->actualSalesCount;
	}

	/**
	 * set value for actualroi 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @param mixed $actualRoi
	 * @return VTigerCampaign
	 */
	public function &setActualRoi($actualRoi) {
		$this->notifyChanged(self::FIELD_ACTUALROI,$this->actualRoi,$actualRoi);
		$this->actualRoi=$actualRoi;
		return $this;
	}

	/**
	 * get value for actualroi 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getActualRoi() {
		return $this->actualRoi;
	}

	/**
	 * set value for campaignid 
	 *
	 * type:INT,size:10,default:null,primary,index
	 *
	 * @param mixed $campaignId
	 * @return VTigerCampaign
	 */
	public function &setCampaignId($campaignId) {
		$this->notifyChanged(self::FIELD_CAMPAIGNID,$this->campaignId,$campaignId);
		$this->campaignId=$campaignId;
		return $this;
	}

	/**
	 * get value for campaignid 
	 *
	 * type:INT,size:10,default:null,primary,index
	 *
	 * @return mixed
	 */
	public function getCampaignId() {
		return $this->campaignId;
	}

	/**
	 * set value for closingdate 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $closingDate
	 * @return VTigerCampaign
	 */
	public function &setClosingDate($closingDate) {
		$this->notifyChanged(self::FIELD_CLOSINGDATE,$this->closingDate,$closingDate);
		$this->closingDate=$closingDate;
		return $this;
	}

	/**
	 * get value for closingdate 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getClosingDate() {
		return $this->closingDate;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_CAMPAIGN_NO=>$this->getCampaignNo(),
			self::FIELD_CAMPAIGNNAME=>$this->getCampaignName(),
			self::FIELD_CAMPAIGNTYPE=>$this->getCampaignType(),
			self::FIELD_CAMPAIGNSTATUS=>$this->getCampaignsTatUs(),
			self::FIELD_EXPECTEDREVENUE=>$this->getExpectedRevenue(),
			self::FIELD_BUDGETCOST=>$this->getBudgetCost(),
			self::FIELD_ACTUALCOST=>$this->getActualCost(),
			self::FIELD_EXPECTEDRESPONSE=>$this->getExpectedResponse(),
			self::FIELD_NUMSENT=>$this->getNUmSent(),
			self::FIELD_PRODUCT_ID=>$this->getProductId(),
			self::FIELD_SPONSOR=>$this->getSponsor(),
			self::FIELD_TARGETAUDIENCE=>$this->getTargetAudience(),
			self::FIELD_TARGETSIZE=>$this->getTargetsIze(),
			self::FIELD_EXPECTEDRESPONSECOUNT=>$this->getExpectedResponseCount(),
			self::FIELD_EXPECTEDSALESCOUNT=>$this->getExpectedSalesCount(),
			self::FIELD_EXPECTEDROI=>$this->getExpectedRoi(),
			self::FIELD_ACTUALRESPONSECOUNT=>$this->getActualResponseCount(),
			self::FIELD_ACTUALSALESCOUNT=>$this->getActualSalesCount(),
			self::FIELD_ACTUALROI=>$this->getActualRoi(),
			self::FIELD_CAMPAIGNID=>$this->getCampaignId(),
			self::FIELD_CLOSINGDATE=>$this->getClosingDate());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_CAMPAIGNID=>$this->getCampaignId());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerCampaign instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerCampaign $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerCampaign[]
	 */
	public static function findByExample(PDO $db,VTigerCampaign $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerCampaign instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerCampaign[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_campaign`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerCampaign instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerCampaign[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerCampaign instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerCampaign[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerCampaign();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerCampaign instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerCampaign[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_campaign`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setCampaignNo($result['campaign_no']);
		$this->setCampaignName($result['campaignname']);
		$this->setCampaignType($result['campaigntype']);
		$this->setCampaignsTatUs($result['campaignstatus']);
		$this->setExpectedRevenue($result['expectedrevenue']);
		$this->setBudgetCost($result['budgetcost']);
		$this->setActualCost($result['actualcost']);
		$this->setExpectedResponse($result['expectedresponse']);
		$this->setNUmSent($result['numsent']);
		$this->setProductId($result['product_id']);
		$this->setSponsor($result['sponsor']);
		$this->setTargetAudience($result['targetaudience']);
		$this->setTargetsIze($result['targetsize']);
		$this->setExpectedResponseCount($result['expectedresponsecount']);
		$this->setExpectedSalesCount($result['expectedsalescount']);
		$this->setExpectedRoi($result['expectedroi']);
		$this->setActualResponseCount($result['actualresponsecount']);
		$this->setActualSalesCount($result['actualsalescount']);
		$this->setActualRoi($result['actualroi']);
		$this->setCampaignId($result['campaignid']);
		$this->setClosingDate($result['closingdate']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerCampaign
	 */
	public static function findById(PDO $db,$campaignId) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$campaignId);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerCampaign();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getCampaignNo());
		$stmt->bindValue(2,$this->getCampaignName());
		$stmt->bindValue(3,$this->getCampaignType());
		$stmt->bindValue(4,$this->getCampaignsTatUs());
		$stmt->bindValue(5,$this->getExpectedRevenue());
		$stmt->bindValue(6,$this->getBudgetCost());
		$stmt->bindValue(7,$this->getActualCost());
		$stmt->bindValue(8,$this->getExpectedResponse());
		$stmt->bindValue(9,$this->getNUmSent());
		$stmt->bindValue(10,$this->getProductId());
		$stmt->bindValue(11,$this->getSponsor());
		$stmt->bindValue(12,$this->getTargetAudience());
		$stmt->bindValue(13,$this->getTargetsIze());
		$stmt->bindValue(14,$this->getExpectedResponseCount());
		$stmt->bindValue(15,$this->getExpectedSalesCount());
		$stmt->bindValue(16,$this->getExpectedRoi());
		$stmt->bindValue(17,$this->getActualResponseCount());
		$stmt->bindValue(18,$this->getActualSalesCount());
		$stmt->bindValue(19,$this->getActualRoi());
		$stmt->bindValue(20,$this->getCampaignId());
		$stmt->bindValue(21,$this->getClosingDate());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_INSERT);
		$this->bindValues($stmt);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(22,$this->getCampaignId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getCampaignId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Fetch VTigerCampaignsCf's which this VTigerCampaign references.
	 * `vtiger_campaign`.`campaignid` -> `vtiger_campaignscf`.`campaignid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerCampaignsCf[]
	 */
	public function fetchVTigerCampaignsCfCollection(PDO $db, $sort=null) {
		$filter=array(VTigerCampaignsCf::FIELD_CAMPAIGNID=>$this->getCampaignId());
		return VTigerCampaignsCf::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerCampaign';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerCampaign');
	}

	/**
	 * get single VTigerCampaign instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerCampaign
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerCampaign();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerCampaign from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerCampaign[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerCampaign') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>