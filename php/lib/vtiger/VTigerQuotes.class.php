<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerQuotes extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerQuotes';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_quotes';
	const SQL_INSERT='INSERT INTO `vtiger_quotes` (`quoteid`,`subject`,`potentialid`,`quotestage`,`validtill`,`contactid`,`quote_no`,`subtotal`,`carrier`,`shipping`,`inventorymanager`,`type`,`adjustment`,`total`,`taxtype`,`discount_percent`,`discount_amount`,`s_h_amount`,`accountid`,`terms_conditions`,`currency_id`,`conversion_rate`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_quotes` (`quoteid`,`subject`,`potentialid`,`quotestage`,`validtill`,`contactid`,`quote_no`,`subtotal`,`carrier`,`shipping`,`inventorymanager`,`type`,`adjustment`,`total`,`taxtype`,`discount_percent`,`discount_amount`,`s_h_amount`,`accountid`,`terms_conditions`,`currency_id`,`conversion_rate`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_quotes` SET `quoteid`=?,`subject`=?,`potentialid`=?,`quotestage`=?,`validtill`=?,`contactid`=?,`quote_no`=?,`subtotal`=?,`carrier`=?,`shipping`=?,`inventorymanager`=?,`type`=?,`adjustment`=?,`total`=?,`taxtype`=?,`discount_percent`=?,`discount_amount`=?,`s_h_amount`=?,`accountid`=?,`terms_conditions`=?,`currency_id`=?,`conversion_rate`=? WHERE `quoteid`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_quotes` WHERE `quoteid`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_quotes` WHERE `quoteid`=?';
	const FIELD_QUOTEID=604440598;
	const FIELD_SUBJECT=-1927823189;
	const FIELD_POTENTIALID=-1437478472;
	const FIELD_QUOTESTAGE=-1898208733;
	const FIELD_VALIDTILL=1419971696;
	const FIELD_CONTACTID=2118070522;
	const FIELD_QUOTE_NO=1557780165;
	const FIELD_SUBTOTAL=376572261;
	const FIELD_CARRIER=494422647;
	const FIELD_SHIPPING=1920655887;
	const FIELD_INVENTORYMANAGER=-344913358;
	const FIELD_TYPE=1646390299;
	const FIELD_ADJUSTMENT=-1222091378;
	const FIELD_TOTAL=-501802365;
	const FIELD_TAXTYPE=-1592267548;
	const FIELD_DISCOUNT_PERCENT=694534824;
	const FIELD_DISCOUNT_AMOUNT=-1923737195;
	const FIELD_S_H_AMOUNT=-2074609028;
	const FIELD_ACCOUNTID=702171079;
	const FIELD_TERMS_CONDITIONS=-615453743;
	const FIELD_CURRENCY_ID=196399112;
	const FIELD_CONVERSION_RATE=-1929774360;
	private static $PRIMARY_KEYS=array(self::FIELD_QUOTEID);
	private static $AUTOINCREMENT_FIELDS=array();
	private static $FIELD_NAMES=array(
		self::FIELD_QUOTEID=>'quoteid',
		self::FIELD_SUBJECT=>'subject',
		self::FIELD_POTENTIALID=>'potentialid',
		self::FIELD_QUOTESTAGE=>'quotestage',
		self::FIELD_VALIDTILL=>'validtill',
		self::FIELD_CONTACTID=>'contactid',
		self::FIELD_QUOTE_NO=>'quote_no',
		self::FIELD_SUBTOTAL=>'subtotal',
		self::FIELD_CARRIER=>'carrier',
		self::FIELD_SHIPPING=>'shipping',
		self::FIELD_INVENTORYMANAGER=>'inventorymanager',
		self::FIELD_TYPE=>'type',
		self::FIELD_ADJUSTMENT=>'adjustment',
		self::FIELD_TOTAL=>'total',
		self::FIELD_TAXTYPE=>'taxtype',
		self::FIELD_DISCOUNT_PERCENT=>'discount_percent',
		self::FIELD_DISCOUNT_AMOUNT=>'discount_amount',
		self::FIELD_S_H_AMOUNT=>'s_h_amount',
		self::FIELD_ACCOUNTID=>'accountid',
		self::FIELD_TERMS_CONDITIONS=>'terms_conditions',
		self::FIELD_CURRENCY_ID=>'currency_id',
		self::FIELD_CONVERSION_RATE=>'conversion_rate');
	private static $PROPERTY_NAMES=array(
		self::FIELD_QUOTEID=>'quoteId',
		self::FIELD_SUBJECT=>'subject',
		self::FIELD_POTENTIALID=>'potentialId',
		self::FIELD_QUOTESTAGE=>'quotesTagE',
		self::FIELD_VALIDTILL=>'validTill',
		self::FIELD_CONTACTID=>'contactId',
		self::FIELD_QUOTE_NO=>'quoteNo',
		self::FIELD_SUBTOTAL=>'subtotal',
		self::FIELD_CARRIER=>'carrier',
		self::FIELD_SHIPPING=>'shipping',
		self::FIELD_INVENTORYMANAGER=>'inventoryManager',
		self::FIELD_TYPE=>'type',
		self::FIELD_ADJUSTMENT=>'adjustment',
		self::FIELD_TOTAL=>'total',
		self::FIELD_TAXTYPE=>'taxType',
		self::FIELD_DISCOUNT_PERCENT=>'discountPercent',
		self::FIELD_DISCOUNT_AMOUNT=>'discountAmount',
		self::FIELD_S_H_AMOUNT=>'sHAmount',
		self::FIELD_ACCOUNTID=>'accountId',
		self::FIELD_TERMS_CONDITIONS=>'termsConditions',
		self::FIELD_CURRENCY_ID=>'currencyId',
		self::FIELD_CONVERSION_RATE=>'conversionRate');
	private static $PROPERTY_TYPES=array(
		self::FIELD_QUOTEID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_SUBJECT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_POTENTIALID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_QUOTESTAGE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_VALIDTILL=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CONTACTID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_QUOTE_NO=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SUBTOTAL=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_CARRIER=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SHIPPING=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_INVENTORYMANAGER=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_TYPE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ADJUSTMENT=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_TOTAL=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_TAXTYPE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DISCOUNT_PERCENT=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_DISCOUNT_AMOUNT=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_S_H_AMOUNT=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_ACCOUNTID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_TERMS_CONDITIONS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CURRENCY_ID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_CONVERSION_RATE=>Db2PhpEntity::PHP_TYPE_FLOAT);
	private static $FIELD_TYPES=array(
		self::FIELD_QUOTEID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_SUBJECT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_POTENTIALID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_QUOTESTAGE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_VALIDTILL=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_CONTACTID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_QUOTE_NO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_SUBTOTAL=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,25,3,true),
		self::FIELD_CARRIER=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_SHIPPING=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_INVENTORYMANAGER=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_TYPE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_ADJUSTMENT=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,25,3,true),
		self::FIELD_TOTAL=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,25,3,true),
		self::FIELD_TAXTYPE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,25,0,true),
		self::FIELD_DISCOUNT_PERCENT=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,25,3,true),
		self::FIELD_DISCOUNT_AMOUNT=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,25,3,true),
		self::FIELD_S_H_AMOUNT=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,25,3,true),
		self::FIELD_ACCOUNTID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_TERMS_CONDITIONS=>array(Db2PhpEntity::JDBC_TYPE_LONGVARCHAR,65535,0,true),
		self::FIELD_CURRENCY_ID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_CONVERSION_RATE=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,10,3,false));
	private static $DEFAULT_VALUES=array(
		self::FIELD_QUOTEID=>0,
		self::FIELD_SUBJECT=>null,
		self::FIELD_POTENTIALID=>null,
		self::FIELD_QUOTESTAGE=>null,
		self::FIELD_VALIDTILL=>null,
		self::FIELD_CONTACTID=>null,
		self::FIELD_QUOTE_NO=>null,
		self::FIELD_SUBTOTAL=>null,
		self::FIELD_CARRIER=>null,
		self::FIELD_SHIPPING=>null,
		self::FIELD_INVENTORYMANAGER=>null,
		self::FIELD_TYPE=>null,
		self::FIELD_ADJUSTMENT=>null,
		self::FIELD_TOTAL=>null,
		self::FIELD_TAXTYPE=>null,
		self::FIELD_DISCOUNT_PERCENT=>null,
		self::FIELD_DISCOUNT_AMOUNT=>null,
		self::FIELD_S_H_AMOUNT=>null,
		self::FIELD_ACCOUNTID=>null,
		self::FIELD_TERMS_CONDITIONS=>null,
		self::FIELD_CURRENCY_ID=>1,
		self::FIELD_CONVERSION_RATE=>1.000);
	private $quoteId;
	private $subject;
	private $potentialId;
	private $quotesTagE;
	private $validTill;
	private $contactId;
	private $quoteNo;
	private $subtotal;
	private $carrier;
	private $shipping;
	private $inventoryManager;
	private $type;
	private $adjustment;
	private $total;
	private $taxType;
	private $discountPercent;
	private $discountAmount;
	private $sHAmount;
	private $accountId;
	private $termsConditions;
	private $currencyId;
	private $conversionRate;

	/**
	 * set value for quoteid 
	 *
	 * type:INT,size:10,default:0,primary,unique
	 *
	 * @param mixed $quoteId
	 * @return VTigerQuotes
	 */
	public function &setQuoteId($quoteId) {
		$this->notifyChanged(self::FIELD_QUOTEID,$this->quoteId,$quoteId);
		$this->quoteId=$quoteId;
		return $this;
	}

	/**
	 * get value for quoteid 
	 *
	 * type:INT,size:10,default:0,primary,unique
	 *
	 * @return mixed
	 */
	public function getQuoteId() {
		return $this->quoteId;
	}

	/**
	 * set value for subject 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $subject
	 * @return VTigerQuotes
	 */
	public function &setSubject($subject) {
		$this->notifyChanged(self::FIELD_SUBJECT,$this->subject,$subject);
		$this->subject=$subject;
		return $this;
	}

	/**
	 * get value for subject 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSubject() {
		return $this->subject;
	}

	/**
	 * set value for potentialid 
	 *
	 * type:INT,size:10,default:null,index,nullable
	 *
	 * @param mixed $potentialId
	 * @return VTigerQuotes
	 */
	public function &setPotentialId($potentialId) {
		$this->notifyChanged(self::FIELD_POTENTIALID,$this->potentialId,$potentialId);
		$this->potentialId=$potentialId;
		return $this;
	}

	/**
	 * get value for potentialid 
	 *
	 * type:INT,size:10,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getPotentialId() {
		return $this->potentialId;
	}

	/**
	 * set value for quotestage 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @param mixed $quotesTagE
	 * @return VTigerQuotes
	 */
	public function &setQuotesTagE($quotesTagE) {
		$this->notifyChanged(self::FIELD_QUOTESTAGE,$this->quotesTagE,$quotesTagE);
		$this->quotesTagE=$quotesTagE;
		return $this;
	}

	/**
	 * get value for quotestage 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getQuotesTagE() {
		return $this->quotesTagE;
	}

	/**
	 * set value for validtill 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $validTill
	 * @return VTigerQuotes
	 */
	public function &setValidTill($validTill) {
		$this->notifyChanged(self::FIELD_VALIDTILL,$this->validTill,$validTill);
		$this->validTill=$validTill;
		return $this;
	}

	/**
	 * get value for validtill 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getValidTill() {
		return $this->validTill;
	}

	/**
	 * set value for contactid 
	 *
	 * type:INT,size:10,default:null,index,nullable
	 *
	 * @param mixed $contactId
	 * @return VTigerQuotes
	 */
	public function &setContactId($contactId) {
		$this->notifyChanged(self::FIELD_CONTACTID,$this->contactId,$contactId);
		$this->contactId=$contactId;
		return $this;
	}

	/**
	 * get value for contactid 
	 *
	 * type:INT,size:10,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getContactId() {
		return $this->contactId;
	}

	/**
	 * set value for quote_no 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $quoteNo
	 * @return VTigerQuotes
	 */
	public function &setQuoteNo($quoteNo) {
		$this->notifyChanged(self::FIELD_QUOTE_NO,$this->quoteNo,$quoteNo);
		$this->quoteNo=$quoteNo;
		return $this;
	}

	/**
	 * get value for quote_no 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getQuoteNo() {
		return $this->quoteNo;
	}

	/**
	 * set value for subtotal 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @param mixed $subtotal
	 * @return VTigerQuotes
	 */
	public function &setSubtotal($subtotal) {
		$this->notifyChanged(self::FIELD_SUBTOTAL,$this->subtotal,$subtotal);
		$this->subtotal=$subtotal;
		return $this;
	}

	/**
	 * get value for subtotal 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSubtotal() {
		return $this->subtotal;
	}

	/**
	 * set value for carrier 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $carrier
	 * @return VTigerQuotes
	 */
	public function &setCarrier($carrier) {
		$this->notifyChanged(self::FIELD_CARRIER,$this->carrier,$carrier);
		$this->carrier=$carrier;
		return $this;
	}

	/**
	 * get value for carrier 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getCarrier() {
		return $this->carrier;
	}

	/**
	 * set value for shipping 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $shipping
	 * @return VTigerQuotes
	 */
	public function &setShipping($shipping) {
		$this->notifyChanged(self::FIELD_SHIPPING,$this->shipping,$shipping);
		$this->shipping=$shipping;
		return $this;
	}

	/**
	 * get value for shipping 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getShipping() {
		return $this->shipping;
	}

	/**
	 * set value for inventorymanager 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $inventoryManager
	 * @return VTigerQuotes
	 */
	public function &setInventoryManager($inventoryManager) {
		$this->notifyChanged(self::FIELD_INVENTORYMANAGER,$this->inventoryManager,$inventoryManager);
		$this->inventoryManager=$inventoryManager;
		return $this;
	}

	/**
	 * get value for inventorymanager 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getInventoryManager() {
		return $this->inventoryManager;
	}

	/**
	 * set value for type 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $type
	 * @return VTigerQuotes
	 */
	public function &setType($type) {
		$this->notifyChanged(self::FIELD_TYPE,$this->type,$type);
		$this->type=$type;
		return $this;
	}

	/**
	 * get value for type 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getType() {
		return $this->type;
	}

	/**
	 * set value for adjustment 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @param mixed $adjustment
	 * @return VTigerQuotes
	 */
	public function &setAdjustment($adjustment) {
		$this->notifyChanged(self::FIELD_ADJUSTMENT,$this->adjustment,$adjustment);
		$this->adjustment=$adjustment;
		return $this;
	}

	/**
	 * get value for adjustment 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getAdjustment() {
		return $this->adjustment;
	}

	/**
	 * set value for total 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @param mixed $total
	 * @return VTigerQuotes
	 */
	public function &setTotal($total) {
		$this->notifyChanged(self::FIELD_TOTAL,$this->total,$total);
		$this->total=$total;
		return $this;
	}

	/**
	 * get value for total 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTotal() {
		return $this->total;
	}

	/**
	 * set value for taxtype 
	 *
	 * type:VARCHAR,size:25,default:null,nullable
	 *
	 * @param mixed $taxType
	 * @return VTigerQuotes
	 */
	public function &setTaxType($taxType) {
		$this->notifyChanged(self::FIELD_TAXTYPE,$this->taxType,$taxType);
		$this->taxType=$taxType;
		return $this;
	}

	/**
	 * get value for taxtype 
	 *
	 * type:VARCHAR,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTaxType() {
		return $this->taxType;
	}

	/**
	 * set value for discount_percent 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @param mixed $discountPercent
	 * @return VTigerQuotes
	 */
	public function &setDiscountPercent($discountPercent) {
		$this->notifyChanged(self::FIELD_DISCOUNT_PERCENT,$this->discountPercent,$discountPercent);
		$this->discountPercent=$discountPercent;
		return $this;
	}

	/**
	 * get value for discount_percent 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDiscountPercent() {
		return $this->discountPercent;
	}

	/**
	 * set value for discount_amount 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @param mixed $discountAmount
	 * @return VTigerQuotes
	 */
	public function &setDiscountAmount($discountAmount) {
		$this->notifyChanged(self::FIELD_DISCOUNT_AMOUNT,$this->discountAmount,$discountAmount);
		$this->discountAmount=$discountAmount;
		return $this;
	}

	/**
	 * get value for discount_amount 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDiscountAmount() {
		return $this->discountAmount;
	}

	/**
	 * set value for s_h_amount 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @param mixed $sHAmount
	 * @return VTigerQuotes
	 */
	public function &setSHAmount($sHAmount) {
		$this->notifyChanged(self::FIELD_S_H_AMOUNT,$this->sHAmount,$sHAmount);
		$this->sHAmount=$sHAmount;
		return $this;
	}

	/**
	 * get value for s_h_amount 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSHAmount() {
		return $this->sHAmount;
	}

	/**
	 * set value for accountid 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $accountId
	 * @return VTigerQuotes
	 */
	public function &setAccountId($accountId) {
		$this->notifyChanged(self::FIELD_ACCOUNTID,$this->accountId,$accountId);
		$this->accountId=$accountId;
		return $this;
	}

	/**
	 * get value for accountid 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getAccountId() {
		return $this->accountId;
	}

	/**
	 * set value for terms_conditions 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @param mixed $termsConditions
	 * @return VTigerQuotes
	 */
	public function &setTermsConditions($termsConditions) {
		$this->notifyChanged(self::FIELD_TERMS_CONDITIONS,$this->termsConditions,$termsConditions);
		$this->termsConditions=$termsConditions;
		return $this;
	}

	/**
	 * get value for terms_conditions 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTermsConditions() {
		return $this->termsConditions;
	}

	/**
	 * set value for currency_id 
	 *
	 * type:INT,size:10,default:1
	 *
	 * @param mixed $currencyId
	 * @return VTigerQuotes
	 */
	public function &setCurrencyId($currencyId) {
		$this->notifyChanged(self::FIELD_CURRENCY_ID,$this->currencyId,$currencyId);
		$this->currencyId=$currencyId;
		return $this;
	}

	/**
	 * get value for currency_id 
	 *
	 * type:INT,size:10,default:1
	 *
	 * @return mixed
	 */
	public function getCurrencyId() {
		return $this->currencyId;
	}

	/**
	 * set value for conversion_rate 
	 *
	 * type:DECIMAL,size:10,default:1.000
	 *
	 * @param mixed $conversionRate
	 * @return VTigerQuotes
	 */
	public function &setConversionRate($conversionRate) {
		$this->notifyChanged(self::FIELD_CONVERSION_RATE,$this->conversionRate,$conversionRate);
		$this->conversionRate=$conversionRate;
		return $this;
	}

	/**
	 * get value for conversion_rate 
	 *
	 * type:DECIMAL,size:10,default:1.000
	 *
	 * @return mixed
	 */
	public function getConversionRate() {
		return $this->conversionRate;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_QUOTEID=>$this->getQuoteId(),
			self::FIELD_SUBJECT=>$this->getSubject(),
			self::FIELD_POTENTIALID=>$this->getPotentialId(),
			self::FIELD_QUOTESTAGE=>$this->getQuotesTagE(),
			self::FIELD_VALIDTILL=>$this->getValidTill(),
			self::FIELD_CONTACTID=>$this->getContactId(),
			self::FIELD_QUOTE_NO=>$this->getQuoteNo(),
			self::FIELD_SUBTOTAL=>$this->getSubtotal(),
			self::FIELD_CARRIER=>$this->getCarrier(),
			self::FIELD_SHIPPING=>$this->getShipping(),
			self::FIELD_INVENTORYMANAGER=>$this->getInventoryManager(),
			self::FIELD_TYPE=>$this->getType(),
			self::FIELD_ADJUSTMENT=>$this->getAdjustment(),
			self::FIELD_TOTAL=>$this->getTotal(),
			self::FIELD_TAXTYPE=>$this->getTaxType(),
			self::FIELD_DISCOUNT_PERCENT=>$this->getDiscountPercent(),
			self::FIELD_DISCOUNT_AMOUNT=>$this->getDiscountAmount(),
			self::FIELD_S_H_AMOUNT=>$this->getSHAmount(),
			self::FIELD_ACCOUNTID=>$this->getAccountId(),
			self::FIELD_TERMS_CONDITIONS=>$this->getTermsConditions(),
			self::FIELD_CURRENCY_ID=>$this->getCurrencyId(),
			self::FIELD_CONVERSION_RATE=>$this->getConversionRate());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_QUOTEID=>$this->getQuoteId());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerQuotes instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerQuotes $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerQuotes[]
	 */
	public static function findByExample(PDO $db,VTigerQuotes $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerQuotes instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerQuotes[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_quotes`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerQuotes instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerQuotes[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerQuotes instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerQuotes[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerQuotes();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerQuotes instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerQuotes[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_quotes`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setQuoteId($result['quoteid']);
		$this->setSubject($result['subject']);
		$this->setPotentialId($result['potentialid']);
		$this->setQuotesTagE($result['quotestage']);
		$this->setValidTill($result['validtill']);
		$this->setContactId($result['contactid']);
		$this->setQuoteNo($result['quote_no']);
		$this->setSubtotal($result['subtotal']);
		$this->setCarrier($result['carrier']);
		$this->setShipping($result['shipping']);
		$this->setInventoryManager($result['inventorymanager']);
		$this->setType($result['type']);
		$this->setAdjustment($result['adjustment']);
		$this->setTotal($result['total']);
		$this->setTaxType($result['taxtype']);
		$this->setDiscountPercent($result['discount_percent']);
		$this->setDiscountAmount($result['discount_amount']);
		$this->setSHAmount($result['s_h_amount']);
		$this->setAccountId($result['accountid']);
		$this->setTermsConditions($result['terms_conditions']);
		$this->setCurrencyId($result['currency_id']);
		$this->setConversionRate($result['conversion_rate']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerQuotes
	 */
	public static function findById(PDO $db,$quoteId) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$quoteId);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerQuotes();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getQuoteId());
		$stmt->bindValue(2,$this->getSubject());
		$stmt->bindValue(3,$this->getPotentialId());
		$stmt->bindValue(4,$this->getQuotesTagE());
		$stmt->bindValue(5,$this->getValidTill());
		$stmt->bindValue(6,$this->getContactId());
		$stmt->bindValue(7,$this->getQuoteNo());
		$stmt->bindValue(8,$this->getSubtotal());
		$stmt->bindValue(9,$this->getCarrier());
		$stmt->bindValue(10,$this->getShipping());
		$stmt->bindValue(11,$this->getInventoryManager());
		$stmt->bindValue(12,$this->getType());
		$stmt->bindValue(13,$this->getAdjustment());
		$stmt->bindValue(14,$this->getTotal());
		$stmt->bindValue(15,$this->getTaxType());
		$stmt->bindValue(16,$this->getDiscountPercent());
		$stmt->bindValue(17,$this->getDiscountAmount());
		$stmt->bindValue(18,$this->getSHAmount());
		$stmt->bindValue(19,$this->getAccountId());
		$stmt->bindValue(20,$this->getTermsConditions());
		$stmt->bindValue(21,$this->getCurrencyId());
		$stmt->bindValue(22,$this->getConversionRate());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_INSERT);
		$this->bindValues($stmt);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(23,$this->getQuoteId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getQuoteId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Fetch VTigerQuotesBilLads's which this VTigerQuotes references.
	 * `vtiger_quotes`.`quoteid` -> `vtiger_quotesbillads`.`quotebilladdressid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerQuotesBilLads[]
	 */
	public function fetchVTigerQuotesBilLadsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerQuotesBilLads::FIELD_QUOTEBILLADDRESSID=>$this->getQuoteId());
		return VTigerQuotesBilLads::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerQuotesCf's which this VTigerQuotes references.
	 * `vtiger_quotes`.`quoteid` -> `vtiger_quotescf`.`quoteid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerQuotesCf[]
	 */
	public function fetchVTigerQuotesCfCollection(PDO $db, $sort=null) {
		$filter=array(VTigerQuotesCf::FIELD_QUOTEID=>$this->getQuoteId());
		return VTigerQuotesCf::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerQuotesShipAds's which this VTigerQuotes references.
	 * `vtiger_quotes`.`quoteid` -> `vtiger_quotesshipads`.`quoteshipaddressid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerQuotesShipAds[]
	 */
	public function fetchVTigerQuotesShipAdsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerQuotesShipAds::FIELD_QUOTESHIPADDRESSID=>$this->getQuoteId());
		return VTigerQuotesShipAds::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerQuotesTagEHistory's which this VTigerQuotes references.
	 * `vtiger_quotes`.`quoteid` -> `vtiger_quotestagehistory`.`quoteid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerQuotesTagEHistory[]
	 */
	public function fetchVTigerQuotesTagEHistoryCollection(PDO $db, $sort=null) {
		$filter=array(VTigerQuotesTagEHistory::FIELD_QUOTEID=>$this->getQuoteId());
		return VTigerQuotesTagEHistory::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerPotential which references this VTigerQuotes. Will return null in case reference is invalid.
	 * `vtiger_quotes`.`potentialid` -> `vtiger_potential`.`potentialid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerPotential
	 */
	public function fetchVTigerPotential(PDO $db, $sort=null) {
		$filter=array(VTigerPotential::FIELD_POTENTIALID=>$this->getPotentialId());
		$result=VTigerPotential::findByFilter($db, $filter, true, $sort);
		return empty($result) ? null : $result[0];
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerQuotes';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerQuotes');
	}

	/**
	 * get single VTigerQuotes instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerQuotes
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerQuotes();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerQuotes from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerQuotes[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerQuotes') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>