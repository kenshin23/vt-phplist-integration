<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerMailManagerMailRecord extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerMailManagerMailRecord';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_mailmanager_mailrecord';
	const SQL_INSERT='INSERT INTO `vtiger_mailmanager_mailrecord` (`userid`,`mfrom`,`mto`,`mcc`,`mbcc`,`mdate`,`msubject`,`mbody`,`mcharset`,`misbodyhtml`,`mplainmessage`,`mhtmlmessage`,`muniqueid`,`mbodyparsed`,`muid`,`lastsavedtime`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_mailmanager_mailrecord` (`userid`,`mfrom`,`mto`,`mcc`,`mbcc`,`mdate`,`msubject`,`mbody`,`mcharset`,`misbodyhtml`,`mplainmessage`,`mhtmlmessage`,`muniqueid`,`mbodyparsed`,`muid`,`lastsavedtime`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_mailmanager_mailrecord` SET `userid`=?,`mfrom`=?,`mto`=?,`mcc`=?,`mbcc`=?,`mdate`=?,`msubject`=?,`mbody`=?,`mcharset`=?,`misbodyhtml`=?,`mplainmessage`=?,`mhtmlmessage`=?,`muniqueid`=?,`mbodyparsed`=?,`muid`=?,`lastsavedtime`=? WHERE `userid`=? AND `muid`=? AND `lastsavedtime`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_mailmanager_mailrecord` WHERE `userid`=? AND `muid`=? AND `lastsavedtime`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_mailmanager_mailrecord` WHERE `userid`=? AND `muid`=? AND `lastsavedtime`=?';
	const FIELD_USERID=-2004898707;
	const FIELD_MFROM=2144320112;
	const FIELD_MTO=-829052223;
	const FIELD_MCC=-829052762;
	const FIELD_MBCC=69167292;
	const FIELD_MDATE=2144244340;
	const FIELD_MSUBJECT=1118401702;
	const FIELD_MBODY=2144197736;
	const FIELD_MCHARSET=-569605946;
	const FIELD_MISBODYHTML=-632104515;
	const FIELD_MPLAINMESSAGE=-711922749;
	const FIELD_MHTMLMESSAGE=-1320426378;
	const FIELD_MUNIQUEID=2086123634;
	const FIELD_MBODYPARSED=-819189127;
	const FIELD_MUID=69185738;
	const FIELD_LASTSAVEDTIME=115069911;
	private static $PRIMARY_KEYS=array(self::FIELD_USERID,self::FIELD_MUID,self::FIELD_LASTSAVEDTIME);
	private static $AUTOINCREMENT_FIELDS=array();
	private static $FIELD_NAMES=array(
		self::FIELD_USERID=>'userid',
		self::FIELD_MFROM=>'mfrom',
		self::FIELD_MTO=>'mto',
		self::FIELD_MCC=>'mcc',
		self::FIELD_MBCC=>'mbcc',
		self::FIELD_MDATE=>'mdate',
		self::FIELD_MSUBJECT=>'msubject',
		self::FIELD_MBODY=>'mbody',
		self::FIELD_MCHARSET=>'mcharset',
		self::FIELD_MISBODYHTML=>'misbodyhtml',
		self::FIELD_MPLAINMESSAGE=>'mplainmessage',
		self::FIELD_MHTMLMESSAGE=>'mhtmlmessage',
		self::FIELD_MUNIQUEID=>'muniqueid',
		self::FIELD_MBODYPARSED=>'mbodyparsed',
		self::FIELD_MUID=>'muid',
		self::FIELD_LASTSAVEDTIME=>'lastsavedtime');
	private static $PROPERTY_NAMES=array(
		self::FIELD_USERID=>'userId',
		self::FIELD_MFROM=>'mFrom',
		self::FIELD_MTO=>'mTo',
		self::FIELD_MCC=>'mcC',
		self::FIELD_MBCC=>'mbCc',
		self::FIELD_MDATE=>'mDate',
		self::FIELD_MSUBJECT=>'mSubject',
		self::FIELD_MBODY=>'mBody',
		self::FIELD_MCHARSET=>'mCharsEt',
		self::FIELD_MISBODYHTML=>'miSBodyHtml',
		self::FIELD_MPLAINMESSAGE=>'mPlainMessage',
		self::FIELD_MHTMLMESSAGE=>'mHtmlMessage',
		self::FIELD_MUNIQUEID=>'mUniqueId',
		self::FIELD_MBODYPARSED=>'mBodyParsed',
		self::FIELD_MUID=>'muId',
		self::FIELD_LASTSAVEDTIME=>'lastSavedTime');
	private static $PROPERTY_TYPES=array(
		self::FIELD_USERID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_MFROM=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MTO=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MCC=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MBCC=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MDATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MSUBJECT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MBODY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MCHARSET=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MISBODYHTML=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_MPLAINMESSAGE=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_MHTMLMESSAGE=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_MUNIQUEID=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MBODYPARSED=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_MUID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_LASTSAVEDTIME=>Db2PhpEntity::PHP_TYPE_INT);
	private static $FIELD_TYPES=array(
		self::FIELD_USERID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_MFROM=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,255,0,true),
		self::FIELD_MTO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,255,0,true),
		self::FIELD_MCC=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,500,0,true),
		self::FIELD_MBCC=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,500,0,true),
		self::FIELD_MDATE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,20,0,true),
		self::FIELD_MSUBJECT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,500,0,true),
		self::FIELD_MBODY=>array(Db2PhpEntity::JDBC_TYPE_LONGVARCHAR,65535,0,true),
		self::FIELD_MCHARSET=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,10,0,true),
		self::FIELD_MISBODYHTML=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_MPLAINMESSAGE=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_MHTMLMESSAGE=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_MUNIQUEID=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,500,0,true),
		self::FIELD_MBODYPARSED=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_MUID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_LASTSAVEDTIME=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true));
	private static $DEFAULT_VALUES=array(
		self::FIELD_USERID=>null,
		self::FIELD_MFROM=>null,
		self::FIELD_MTO=>null,
		self::FIELD_MCC=>null,
		self::FIELD_MBCC=>null,
		self::FIELD_MDATE=>null,
		self::FIELD_MSUBJECT=>null,
		self::FIELD_MBODY=>null,
		self::FIELD_MCHARSET=>null,
		self::FIELD_MISBODYHTML=>null,
		self::FIELD_MPLAINMESSAGE=>null,
		self::FIELD_MHTMLMESSAGE=>null,
		self::FIELD_MUNIQUEID=>null,
		self::FIELD_MBODYPARSED=>null,
		self::FIELD_MUID=>null,
		self::FIELD_LASTSAVEDTIME=>null);
	private $userId;
	private $mFrom;
	private $mTo;
	private $mcC;
	private $mbCc;
	private $mDate;
	private $mSubject;
	private $mBody;
	private $mCharsEt;
	private $miSBodyHtml;
	private $mPlainMessage;
	private $mHtmlMessage;
	private $mUniqueId;
	private $mBodyParsed;
	private $muId;
	private $lastSavedTime;

	/**
	 * set value for userid 
	 *
	 * type:INT,size:10,default:null,index,nullable
	 *
	 * @param mixed $userId
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setUserId($userId) {
		$this->notifyChanged(self::FIELD_USERID,$this->userId,$userId);
		$this->userId=$userId;
		return $this;
	}

	/**
	 * get value for userid 
	 *
	 * type:INT,size:10,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getUserId() {
		return $this->userId;
	}

	/**
	 * set value for mfrom 
	 *
	 * type:VARCHAR,size:255,default:null,nullable
	 *
	 * @param mixed $mFrom
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setMFrom($mFrom) {
		$this->notifyChanged(self::FIELD_MFROM,$this->mFrom,$mFrom);
		$this->mFrom=$mFrom;
		return $this;
	}

	/**
	 * get value for mfrom 
	 *
	 * type:VARCHAR,size:255,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMFrom() {
		return $this->mFrom;
	}

	/**
	 * set value for mto 
	 *
	 * type:VARCHAR,size:255,default:null,nullable
	 *
	 * @param mixed $mTo
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setMTo($mTo) {
		$this->notifyChanged(self::FIELD_MTO,$this->mTo,$mTo);
		$this->mTo=$mTo;
		return $this;
	}

	/**
	 * get value for mto 
	 *
	 * type:VARCHAR,size:255,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMTo() {
		return $this->mTo;
	}

	/**
	 * set value for mcc 
	 *
	 * type:VARCHAR,size:500,default:null,nullable
	 *
	 * @param mixed $mcC
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setMcC($mcC) {
		$this->notifyChanged(self::FIELD_MCC,$this->mcC,$mcC);
		$this->mcC=$mcC;
		return $this;
	}

	/**
	 * get value for mcc 
	 *
	 * type:VARCHAR,size:500,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMcC() {
		return $this->mcC;
	}

	/**
	 * set value for mbcc 
	 *
	 * type:VARCHAR,size:500,default:null,nullable
	 *
	 * @param mixed $mbCc
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setMbCc($mbCc) {
		$this->notifyChanged(self::FIELD_MBCC,$this->mbCc,$mbCc);
		$this->mbCc=$mbCc;
		return $this;
	}

	/**
	 * get value for mbcc 
	 *
	 * type:VARCHAR,size:500,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMbCc() {
		return $this->mbCc;
	}

	/**
	 * set value for mdate 
	 *
	 * type:VARCHAR,size:20,default:null,nullable
	 *
	 * @param mixed $mDate
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setMDate($mDate) {
		$this->notifyChanged(self::FIELD_MDATE,$this->mDate,$mDate);
		$this->mDate=$mDate;
		return $this;
	}

	/**
	 * get value for mdate 
	 *
	 * type:VARCHAR,size:20,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMDate() {
		return $this->mDate;
	}

	/**
	 * set value for msubject 
	 *
	 * type:VARCHAR,size:500,default:null,nullable
	 *
	 * @param mixed $mSubject
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setMSubject($mSubject) {
		$this->notifyChanged(self::FIELD_MSUBJECT,$this->mSubject,$mSubject);
		$this->mSubject=$mSubject;
		return $this;
	}

	/**
	 * get value for msubject 
	 *
	 * type:VARCHAR,size:500,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMSubject() {
		return $this->mSubject;
	}

	/**
	 * set value for mbody 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @param mixed $mBody
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setMBody($mBody) {
		$this->notifyChanged(self::FIELD_MBODY,$this->mBody,$mBody);
		$this->mBody=$mBody;
		return $this;
	}

	/**
	 * get value for mbody 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMBody() {
		return $this->mBody;
	}

	/**
	 * set value for mcharset 
	 *
	 * type:VARCHAR,size:10,default:null,nullable
	 *
	 * @param mixed $mCharsEt
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setMCharsEt($mCharsEt) {
		$this->notifyChanged(self::FIELD_MCHARSET,$this->mCharsEt,$mCharsEt);
		$this->mCharsEt=$mCharsEt;
		return $this;
	}

	/**
	 * get value for mcharset 
	 *
	 * type:VARCHAR,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMCharsEt() {
		return $this->mCharsEt;
	}

	/**
	 * set value for misbodyhtml 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $miSBodyHtml
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setMiSBodyHtml($miSBodyHtml) {
		$this->notifyChanged(self::FIELD_MISBODYHTML,$this->miSBodyHtml,$miSBodyHtml);
		$this->miSBodyHtml=$miSBodyHtml;
		return $this;
	}

	/**
	 * get value for misbodyhtml 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMiSBodyHtml() {
		return $this->miSBodyHtml;
	}

	/**
	 * set value for mplainmessage 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $mPlainMessage
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setMPlainMessage($mPlainMessage) {
		$this->notifyChanged(self::FIELD_MPLAINMESSAGE,$this->mPlainMessage,$mPlainMessage);
		$this->mPlainMessage=$mPlainMessage;
		return $this;
	}

	/**
	 * get value for mplainmessage 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMPlainMessage() {
		return $this->mPlainMessage;
	}

	/**
	 * set value for mhtmlmessage 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $mHtmlMessage
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setMHtmlMessage($mHtmlMessage) {
		$this->notifyChanged(self::FIELD_MHTMLMESSAGE,$this->mHtmlMessage,$mHtmlMessage);
		$this->mHtmlMessage=$mHtmlMessage;
		return $this;
	}

	/**
	 * get value for mhtmlmessage 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMHtmlMessage() {
		return $this->mHtmlMessage;
	}

	/**
	 * set value for muniqueid 
	 *
	 * type:VARCHAR,size:500,default:null,nullable
	 *
	 * @param mixed $mUniqueId
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setMUniqueId($mUniqueId) {
		$this->notifyChanged(self::FIELD_MUNIQUEID,$this->mUniqueId,$mUniqueId);
		$this->mUniqueId=$mUniqueId;
		return $this;
	}

	/**
	 * get value for muniqueid 
	 *
	 * type:VARCHAR,size:500,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMUniqueId() {
		return $this->mUniqueId;
	}

	/**
	 * set value for mbodyparsed 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $mBodyParsed
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setMBodyParsed($mBodyParsed) {
		$this->notifyChanged(self::FIELD_MBODYPARSED,$this->mBodyParsed,$mBodyParsed);
		$this->mBodyParsed=$mBodyParsed;
		return $this;
	}

	/**
	 * get value for mbodyparsed 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMBodyParsed() {
		return $this->mBodyParsed;
	}

	/**
	 * set value for muid 
	 *
	 * type:INT,size:10,default:null,index,nullable
	 *
	 * @param mixed $muId
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setMuId($muId) {
		$this->notifyChanged(self::FIELD_MUID,$this->muId,$muId);
		$this->muId=$muId;
		return $this;
	}

	/**
	 * get value for muid 
	 *
	 * type:INT,size:10,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getMuId() {
		return $this->muId;
	}

	/**
	 * set value for lastsavedtime 
	 *
	 * type:INT,size:10,default:null,index,nullable
	 *
	 * @param mixed $lastSavedTime
	 * @return VTigerMailManagerMailRecord
	 */
	public function &setLastSavedTime($lastSavedTime) {
		$this->notifyChanged(self::FIELD_LASTSAVEDTIME,$this->lastSavedTime,$lastSavedTime);
		$this->lastSavedTime=$lastSavedTime;
		return $this;
	}

	/**
	 * get value for lastsavedtime 
	 *
	 * type:INT,size:10,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getLastSavedTime() {
		return $this->lastSavedTime;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_USERID=>$this->getUserId(),
			self::FIELD_MFROM=>$this->getMFrom(),
			self::FIELD_MTO=>$this->getMTo(),
			self::FIELD_MCC=>$this->getMcC(),
			self::FIELD_MBCC=>$this->getMbCc(),
			self::FIELD_MDATE=>$this->getMDate(),
			self::FIELD_MSUBJECT=>$this->getMSubject(),
			self::FIELD_MBODY=>$this->getMBody(),
			self::FIELD_MCHARSET=>$this->getMCharsEt(),
			self::FIELD_MISBODYHTML=>$this->getMiSBodyHtml(),
			self::FIELD_MPLAINMESSAGE=>$this->getMPlainMessage(),
			self::FIELD_MHTMLMESSAGE=>$this->getMHtmlMessage(),
			self::FIELD_MUNIQUEID=>$this->getMUniqueId(),
			self::FIELD_MBODYPARSED=>$this->getMBodyParsed(),
			self::FIELD_MUID=>$this->getMuId(),
			self::FIELD_LASTSAVEDTIME=>$this->getLastSavedTime());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_USERID=>$this->getUserId(),
			self::FIELD_MUID=>$this->getMuId(),
			self::FIELD_LASTSAVEDTIME=>$this->getLastSavedTime());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerMailManagerMailRecord instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerMailManagerMailRecord $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerMailManagerMailRecord[]
	 */
	public static function findByExample(PDO $db,VTigerMailManagerMailRecord $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerMailManagerMailRecord instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerMailManagerMailRecord[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_mailmanager_mailrecord`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerMailManagerMailRecord instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerMailManagerMailRecord[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerMailManagerMailRecord instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerMailManagerMailRecord[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerMailManagerMailRecord();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerMailManagerMailRecord instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerMailManagerMailRecord[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_mailmanager_mailrecord`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setUserId($result['userid']);
		$this->setMFrom($result['mfrom']);
		$this->setMTo($result['mto']);
		$this->setMcC($result['mcc']);
		$this->setMbCc($result['mbcc']);
		$this->setMDate($result['mdate']);
		$this->setMSubject($result['msubject']);
		$this->setMBody($result['mbody']);
		$this->setMCharsEt($result['mcharset']);
		$this->setMiSBodyHtml($result['misbodyhtml']);
		$this->setMPlainMessage($result['mplainmessage']);
		$this->setMHtmlMessage($result['mhtmlmessage']);
		$this->setMUniqueId($result['muniqueid']);
		$this->setMBodyParsed($result['mbodyparsed']);
		$this->setMuId($result['muid']);
		$this->setLastSavedTime($result['lastsavedtime']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerMailManagerMailRecord
	 */
	public static function findById(PDO $db,$userId,$muId,$lastSavedTime) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$userId);
		$stmt->bindValue(2,$muId);
		$stmt->bindValue(3,$lastSavedTime);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerMailManagerMailRecord();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getUserId());
		$stmt->bindValue(2,$this->getMFrom());
		$stmt->bindValue(3,$this->getMTo());
		$stmt->bindValue(4,$this->getMcC());
		$stmt->bindValue(5,$this->getMbCc());
		$stmt->bindValue(6,$this->getMDate());
		$stmt->bindValue(7,$this->getMSubject());
		$stmt->bindValue(8,$this->getMBody());
		$stmt->bindValue(9,$this->getMCharsEt());
		$stmt->bindValue(10,$this->getMiSBodyHtml());
		$stmt->bindValue(11,$this->getMPlainMessage());
		$stmt->bindValue(12,$this->getMHtmlMessage());
		$stmt->bindValue(13,$this->getMUniqueId());
		$stmt->bindValue(14,$this->getMBodyParsed());
		$stmt->bindValue(15,$this->getMuId());
		$stmt->bindValue(16,$this->getLastSavedTime());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_INSERT);
		$this->bindValues($stmt);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(17,$this->getUserId());
		$stmt->bindValue(18,$this->getMuId());
		$stmt->bindValue(19,$this->getLastSavedTime());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getUserId());
		$stmt->bindValue(2,$this->getMuId());
		$stmt->bindValue(3,$this->getLastSavedTime());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerMailManagerMailRecord';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerMailManagerMailRecord');
	}

	/**
	 * get single VTigerMailManagerMailRecord instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerMailManagerMailRecord
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerMailManagerMailRecord();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerMailManagerMailRecord from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerMailManagerMailRecord[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerMailManagerMailRecord') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>