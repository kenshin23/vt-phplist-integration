<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerAccount extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerAccount';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_account';
	const SQL_INSERT='INSERT INTO `vtiger_account` (`accountid`,`account_no`,`accountname`,`parentid`,`account_type`,`industry`,`annualrevenue`,`rating`,`ownership`,`siccode`,`tickersymbol`,`phone`,`otherphone`,`email1`,`email2`,`website`,`fax`,`employees`,`emailoptout`,`notify_owner`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_account` (`accountid`,`account_no`,`accountname`,`parentid`,`account_type`,`industry`,`annualrevenue`,`rating`,`ownership`,`siccode`,`tickersymbol`,`phone`,`otherphone`,`email1`,`email2`,`website`,`fax`,`employees`,`emailoptout`,`notify_owner`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_account` SET `accountid`=?,`account_no`=?,`accountname`=?,`parentid`=?,`account_type`=?,`industry`=?,`annualrevenue`=?,`rating`=?,`ownership`=?,`siccode`=?,`tickersymbol`=?,`phone`=?,`otherphone`=?,`email1`=?,`email2`=?,`website`=?,`fax`=?,`employees`=?,`emailoptout`=?,`notify_owner`=? WHERE `accountid`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_account` WHERE `accountid`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_account` WHERE `accountid`=?';
	const FIELD_ACCOUNTID=-1419760431;
	const FIELD_ACCOUNT_NO=-1062909590;
	const FIELD_ACCOUNTNAME=1409975489;
	const FIELD_PARENTID=911206748;
	const FIELD_ACCOUNT_TYPE=746292387;
	const FIELD_INDUSTRY=-136800267;
	const FIELD_ANNUALREVENUE=311175590;
	const FIELD_RATING=-455696012;
	const FIELD_OWNERSHIP=425830456;
	const FIELD_SICCODE=-141015229;
	const FIELD_TICKERSYMBOL=1076978617;
	const FIELD_PHONE=1784772279;
	const FIELD_OTHERPHONE=-426453835;
	const FIELD_EMAIL1=-817358868;
	const FIELD_EMAIL2=-817358867;
	const FIELD_WEBSITE=-1000936540;
	const FIELD_FAX=900170406;
	const FIELD_EMPLOYEES=-1249878962;
	const FIELD_EMAILOPTOUT=-1072487200;
	const FIELD_NOTIFY_OWNER=1463747796;
	private static $PRIMARY_KEYS=array(self::FIELD_ACCOUNTID);
	private static $AUTOINCREMENT_FIELDS=array();
	private static $FIELD_NAMES=array(
		self::FIELD_ACCOUNTID=>'accountid',
		self::FIELD_ACCOUNT_NO=>'account_no',
		self::FIELD_ACCOUNTNAME=>'accountname',
		self::FIELD_PARENTID=>'parentid',
		self::FIELD_ACCOUNT_TYPE=>'account_type',
		self::FIELD_INDUSTRY=>'industry',
		self::FIELD_ANNUALREVENUE=>'annualrevenue',
		self::FIELD_RATING=>'rating',
		self::FIELD_OWNERSHIP=>'ownership',
		self::FIELD_SICCODE=>'siccode',
		self::FIELD_TICKERSYMBOL=>'tickersymbol',
		self::FIELD_PHONE=>'phone',
		self::FIELD_OTHERPHONE=>'otherphone',
		self::FIELD_EMAIL1=>'email1',
		self::FIELD_EMAIL2=>'email2',
		self::FIELD_WEBSITE=>'website',
		self::FIELD_FAX=>'fax',
		self::FIELD_EMPLOYEES=>'employees',
		self::FIELD_EMAILOPTOUT=>'emailoptout',
		self::FIELD_NOTIFY_OWNER=>'notify_owner');
	private static $PROPERTY_NAMES=array(
		self::FIELD_ACCOUNTID=>'accountId',
		self::FIELD_ACCOUNT_NO=>'accountNo',
		self::FIELD_ACCOUNTNAME=>'accountName',
		self::FIELD_PARENTID=>'parentId',
		self::FIELD_ACCOUNT_TYPE=>'accountType',
		self::FIELD_INDUSTRY=>'industry',
		self::FIELD_ANNUALREVENUE=>'annualRevenue',
		self::FIELD_RATING=>'rating',
		self::FIELD_OWNERSHIP=>'ownership',
		self::FIELD_SICCODE=>'sicCode',
		self::FIELD_TICKERSYMBOL=>'tickersYMbOl',
		self::FIELD_PHONE=>'phone',
		self::FIELD_OTHERPHONE=>'otherPhone',
		self::FIELD_EMAIL1=>'email1',
		self::FIELD_EMAIL2=>'email2',
		self::FIELD_WEBSITE=>'website',
		self::FIELD_FAX=>'fax',
		self::FIELD_EMPLOYEES=>'employees',
		self::FIELD_EMAILOPTOUT=>'emailOpTout',
		self::FIELD_NOTIFY_OWNER=>'notifyOwner');
	private static $PROPERTY_TYPES=array(
		self::FIELD_ACCOUNTID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_ACCOUNT_NO=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ACCOUNTNAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PARENTID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_ACCOUNT_TYPE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_INDUSTRY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ANNUALREVENUE=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_RATING=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_OWNERSHIP=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SICCODE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TICKERSYMBOL=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PHONE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_OTHERPHONE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_EMAIL1=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_EMAIL2=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_WEBSITE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_FAX=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_EMPLOYEES=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_EMAILOPTOUT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_NOTIFY_OWNER=>Db2PhpEntity::PHP_TYPE_STRING);
	private static $FIELD_TYPES=array(
		self::FIELD_ACCOUNTID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_ACCOUNT_NO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,false),
		self::FIELD_ACCOUNTNAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,false),
		self::FIELD_PARENTID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_ACCOUNT_TYPE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_INDUSTRY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_ANNUALREVENUE=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_RATING=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_OWNERSHIP=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_SICCODE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_TICKERSYMBOL=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,true),
		self::FIELD_PHONE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,true),
		self::FIELD_OTHERPHONE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,true),
		self::FIELD_EMAIL1=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_EMAIL2=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_WEBSITE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_FAX=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,true),
		self::FIELD_EMPLOYEES=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_EMAILOPTOUT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,3,0,true),
		self::FIELD_NOTIFY_OWNER=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,3,0,true));
	private static $DEFAULT_VALUES=array(
		self::FIELD_ACCOUNTID=>0,
		self::FIELD_ACCOUNT_NO=>'',
		self::FIELD_ACCOUNTNAME=>'',
		self::FIELD_PARENTID=>0,
		self::FIELD_ACCOUNT_TYPE=>null,
		self::FIELD_INDUSTRY=>null,
		self::FIELD_ANNUALREVENUE=>0,
		self::FIELD_RATING=>null,
		self::FIELD_OWNERSHIP=>null,
		self::FIELD_SICCODE=>null,
		self::FIELD_TICKERSYMBOL=>null,
		self::FIELD_PHONE=>null,
		self::FIELD_OTHERPHONE=>null,
		self::FIELD_EMAIL1=>null,
		self::FIELD_EMAIL2=>null,
		self::FIELD_WEBSITE=>null,
		self::FIELD_FAX=>null,
		self::FIELD_EMPLOYEES=>0,
		self::FIELD_EMAILOPTOUT=>'0',
		self::FIELD_NOTIFY_OWNER=>'0');
	private $accountId;
	private $accountNo;
	private $accountName;
	private $parentId;
	private $accountType;
	private $industry;
	private $annualRevenue;
	private $rating;
	private $ownership;
	private $sicCode;
	private $tickersYMbOl;
	private $phone;
	private $otherPhone;
	private $email1;
	private $email2;
	private $website;
	private $fax;
	private $employees;
	private $emailOpTout;
	private $notifyOwner;

	/**
	 * set value for accountid 
	 *
	 * type:INT,size:10,default:0,primary,unique
	 *
	 * @param mixed $accountId
	 * @return VTigerAccount
	 */
	public function &setAccountId($accountId) {
		$this->notifyChanged(self::FIELD_ACCOUNTID,$this->accountId,$accountId);
		$this->accountId=$accountId;
		return $this;
	}

	/**
	 * get value for accountid 
	 *
	 * type:INT,size:10,default:0,primary,unique
	 *
	 * @return mixed
	 */
	public function getAccountId() {
		return $this->accountId;
	}

	/**
	 * set value for account_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @param mixed $accountNo
	 * @return VTigerAccount
	 */
	public function &setAccountNo($accountNo) {
		$this->notifyChanged(self::FIELD_ACCOUNT_NO,$this->accountNo,$accountNo);
		$this->accountNo=$accountNo;
		return $this;
	}

	/**
	 * get value for account_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @return mixed
	 */
	public function getAccountNo() {
		return $this->accountNo;
	}

	/**
	 * set value for accountname 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @param mixed $accountName
	 * @return VTigerAccount
	 */
	public function &setAccountName($accountName) {
		$this->notifyChanged(self::FIELD_ACCOUNTNAME,$this->accountName,$accountName);
		$this->accountName=$accountName;
		return $this;
	}

	/**
	 * get value for accountname 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @return mixed
	 */
	public function getAccountName() {
		return $this->accountName;
	}

	/**
	 * set value for parentid 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @param mixed $parentId
	 * @return VTigerAccount
	 */
	public function &setParentId($parentId) {
		$this->notifyChanged(self::FIELD_PARENTID,$this->parentId,$parentId);
		$this->parentId=$parentId;
		return $this;
	}

	/**
	 * get value for parentid 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getParentId() {
		return $this->parentId;
	}

	/**
	 * set value for account_type 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @param mixed $accountType
	 * @return VTigerAccount
	 */
	public function &setAccountType($accountType) {
		$this->notifyChanged(self::FIELD_ACCOUNT_TYPE,$this->accountType,$accountType);
		$this->accountType=$accountType;
		return $this;
	}

	/**
	 * get value for account_type 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getAccountType() {
		return $this->accountType;
	}

	/**
	 * set value for industry 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $industry
	 * @return VTigerAccount
	 */
	public function &setIndustry($industry) {
		$this->notifyChanged(self::FIELD_INDUSTRY,$this->industry,$industry);
		$this->industry=$industry;
		return $this;
	}

	/**
	 * get value for industry 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getIndustry() {
		return $this->industry;
	}

	/**
	 * set value for annualrevenue 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @param mixed $annualRevenue
	 * @return VTigerAccount
	 */
	public function &setAnnualRevenue($annualRevenue) {
		$this->notifyChanged(self::FIELD_ANNUALREVENUE,$this->annualRevenue,$annualRevenue);
		$this->annualRevenue=$annualRevenue;
		return $this;
	}

	/**
	 * get value for annualrevenue 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getAnnualRevenue() {
		return $this->annualRevenue;
	}

	/**
	 * set value for rating 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $rating
	 * @return VTigerAccount
	 */
	public function &setRating($rating) {
		$this->notifyChanged(self::FIELD_RATING,$this->rating,$rating);
		$this->rating=$rating;
		return $this;
	}

	/**
	 * get value for rating 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getRating() {
		return $this->rating;
	}

	/**
	 * set value for ownership 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $ownership
	 * @return VTigerAccount
	 */
	public function &setOwnership($ownership) {
		$this->notifyChanged(self::FIELD_OWNERSHIP,$this->ownership,$ownership);
		$this->ownership=$ownership;
		return $this;
	}

	/**
	 * get value for ownership 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getOwnership() {
		return $this->ownership;
	}

	/**
	 * set value for siccode 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $sicCode
	 * @return VTigerAccount
	 */
	public function &setSicCode($sicCode) {
		$this->notifyChanged(self::FIELD_SICCODE,$this->sicCode,$sicCode);
		$this->sicCode=$sicCode;
		return $this;
	}

	/**
	 * get value for siccode 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSicCode() {
		return $this->sicCode;
	}

	/**
	 * set value for tickersymbol 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @param mixed $tickersYMbOl
	 * @return VTigerAccount
	 */
	public function &setTickersYMbOl($tickersYMbOl) {
		$this->notifyChanged(self::FIELD_TICKERSYMBOL,$this->tickersYMbOl,$tickersYMbOl);
		$this->tickersYMbOl=$tickersYMbOl;
		return $this;
	}

	/**
	 * get value for tickersymbol 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTickersYMbOl() {
		return $this->tickersYMbOl;
	}

	/**
	 * set value for phone 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @param mixed $phone
	 * @return VTigerAccount
	 */
	public function &setPhone($phone) {
		$this->notifyChanged(self::FIELD_PHONE,$this->phone,$phone);
		$this->phone=$phone;
		return $this;
	}

	/**
	 * get value for phone 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPhone() {
		return $this->phone;
	}

	/**
	 * set value for otherphone 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @param mixed $otherPhone
	 * @return VTigerAccount
	 */
	public function &setOtherPhone($otherPhone) {
		$this->notifyChanged(self::FIELD_OTHERPHONE,$this->otherPhone,$otherPhone);
		$this->otherPhone=$otherPhone;
		return $this;
	}

	/**
	 * get value for otherphone 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getOtherPhone() {
		return $this->otherPhone;
	}

	/**
	 * set value for email1 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $email1
	 * @return VTigerAccount
	 */
	public function &setEmail1($email1) {
		$this->notifyChanged(self::FIELD_EMAIL1,$this->email1,$email1);
		$this->email1=$email1;
		return $this;
	}

	/**
	 * get value for email1 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getEmail1() {
		return $this->email1;
	}

	/**
	 * set value for email2 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $email2
	 * @return VTigerAccount
	 */
	public function &setEmail2($email2) {
		$this->notifyChanged(self::FIELD_EMAIL2,$this->email2,$email2);
		$this->email2=$email2;
		return $this;
	}

	/**
	 * get value for email2 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getEmail2() {
		return $this->email2;
	}

	/**
	 * set value for website 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $website
	 * @return VTigerAccount
	 */
	public function &setWebsite($website) {
		$this->notifyChanged(self::FIELD_WEBSITE,$this->website,$website);
		$this->website=$website;
		return $this;
	}

	/**
	 * get value for website 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getWebsite() {
		return $this->website;
	}

	/**
	 * set value for fax 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @param mixed $fax
	 * @return VTigerAccount
	 */
	public function &setFax($fax) {
		$this->notifyChanged(self::FIELD_FAX,$this->fax,$fax);
		$this->fax=$fax;
		return $this;
	}

	/**
	 * get value for fax 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getFax() {
		return $this->fax;
	}

	/**
	 * set value for employees 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @param mixed $employees
	 * @return VTigerAccount
	 */
	public function &setEmployees($employees) {
		$this->notifyChanged(self::FIELD_EMPLOYEES,$this->employees,$employees);
		$this->employees=$employees;
		return $this;
	}

	/**
	 * get value for employees 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getEmployees() {
		return $this->employees;
	}

	/**
	 * set value for emailoptout 
	 *
	 * type:VARCHAR,size:3,default:0,nullable
	 *
	 * @param mixed $emailOpTout
	 * @return VTigerAccount
	 */
	public function &setEmailOpTout($emailOpTout) {
		$this->notifyChanged(self::FIELD_EMAILOPTOUT,$this->emailOpTout,$emailOpTout);
		$this->emailOpTout=$emailOpTout;
		return $this;
	}

	/**
	 * get value for emailoptout 
	 *
	 * type:VARCHAR,size:3,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getEmailOpTout() {
		return $this->emailOpTout;
	}

	/**
	 * set value for notify_owner 
	 *
	 * type:VARCHAR,size:3,default:0,nullable
	 *
	 * @param mixed $notifyOwner
	 * @return VTigerAccount
	 */
	public function &setNotifyOwner($notifyOwner) {
		$this->notifyChanged(self::FIELD_NOTIFY_OWNER,$this->notifyOwner,$notifyOwner);
		$this->notifyOwner=$notifyOwner;
		return $this;
	}

	/**
	 * get value for notify_owner 
	 *
	 * type:VARCHAR,size:3,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getNotifyOwner() {
		return $this->notifyOwner;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_ACCOUNTID=>$this->getAccountId(),
			self::FIELD_ACCOUNT_NO=>$this->getAccountNo(),
			self::FIELD_ACCOUNTNAME=>$this->getAccountName(),
			self::FIELD_PARENTID=>$this->getParentId(),
			self::FIELD_ACCOUNT_TYPE=>$this->getAccountType(),
			self::FIELD_INDUSTRY=>$this->getIndustry(),
			self::FIELD_ANNUALREVENUE=>$this->getAnnualRevenue(),
			self::FIELD_RATING=>$this->getRating(),
			self::FIELD_OWNERSHIP=>$this->getOwnership(),
			self::FIELD_SICCODE=>$this->getSicCode(),
			self::FIELD_TICKERSYMBOL=>$this->getTickersYMbOl(),
			self::FIELD_PHONE=>$this->getPhone(),
			self::FIELD_OTHERPHONE=>$this->getOtherPhone(),
			self::FIELD_EMAIL1=>$this->getEmail1(),
			self::FIELD_EMAIL2=>$this->getEmail2(),
			self::FIELD_WEBSITE=>$this->getWebsite(),
			self::FIELD_FAX=>$this->getFax(),
			self::FIELD_EMPLOYEES=>$this->getEmployees(),
			self::FIELD_EMAILOPTOUT=>$this->getEmailOpTout(),
			self::FIELD_NOTIFY_OWNER=>$this->getNotifyOwner());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_ACCOUNTID=>$this->getAccountId());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerAccount instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerAccount $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerAccount[]
	 */
	public static function findByExample(PDO $db,VTigerAccount $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerAccount instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerAccount[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_account`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerAccount instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerAccount[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerAccount instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerAccount[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerAccount();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerAccount instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerAccount[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_account`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setAccountId($result['accountid']);
		$this->setAccountNo($result['account_no']);
		$this->setAccountName($result['accountname']);
		$this->setParentId($result['parentid']);
		$this->setAccountType($result['account_type']);
		$this->setIndustry($result['industry']);
		$this->setAnnualRevenue($result['annualrevenue']);
		$this->setRating($result['rating']);
		$this->setOwnership($result['ownership']);
		$this->setSicCode($result['siccode']);
		$this->setTickersYMbOl($result['tickersymbol']);
		$this->setPhone($result['phone']);
		$this->setOtherPhone($result['otherphone']);
		$this->setEmail1($result['email1']);
		$this->setEmail2($result['email2']);
		$this->setWebsite($result['website']);
		$this->setFax($result['fax']);
		$this->setEmployees($result['employees']);
		$this->setEmailOpTout($result['emailoptout']);
		$this->setNotifyOwner($result['notify_owner']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerAccount
	 */
	public static function findById(PDO $db,$accountId) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$accountId);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerAccount();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getAccountId());
		$stmt->bindValue(2,$this->getAccountNo());
		$stmt->bindValue(3,$this->getAccountName());
		$stmt->bindValue(4,$this->getParentId());
		$stmt->bindValue(5,$this->getAccountType());
		$stmt->bindValue(6,$this->getIndustry());
		$stmt->bindValue(7,$this->getAnnualRevenue());
		$stmt->bindValue(8,$this->getRating());
		$stmt->bindValue(9,$this->getOwnership());
		$stmt->bindValue(10,$this->getSicCode());
		$stmt->bindValue(11,$this->getTickersYMbOl());
		$stmt->bindValue(12,$this->getPhone());
		$stmt->bindValue(13,$this->getOtherPhone());
		$stmt->bindValue(14,$this->getEmail1());
		$stmt->bindValue(15,$this->getEmail2());
		$stmt->bindValue(16,$this->getWebsite());
		$stmt->bindValue(17,$this->getFax());
		$stmt->bindValue(18,$this->getEmployees());
		$stmt->bindValue(19,$this->getEmailOpTout());
		$stmt->bindValue(20,$this->getNotifyOwner());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_INSERT);
		$this->bindValues($stmt);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(21,$this->getAccountId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getAccountId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Fetch VTigerAccountBilLads's which this VTigerAccount references.
	 * `vtiger_account`.`accountid` -> `vtiger_accountbillads`.`accountaddressid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerAccountBilLads[]
	 */
	public function fetchVTigerAccountBilLadsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerAccountBilLads::FIELD_ACCOUNTADDRESSID=>$this->getAccountId());
		return VTigerAccountBilLads::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerAccountsCf's which this VTigerAccount references.
	 * `vtiger_account`.`accountid` -> `vtiger_accountscf`.`accountid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerAccountsCf[]
	 */
	public function fetchVTigerAccountsCfCollection(PDO $db, $sort=null) {
		$filter=array(VTigerAccountsCf::FIELD_ACCOUNTID=>$this->getAccountId());
		return VTigerAccountsCf::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerAccountsHiPads's which this VTigerAccount references.
	 * `vtiger_account`.`accountid` -> `vtiger_accountshipads`.`accountaddressid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerAccountsHiPads[]
	 */
	public function fetchVTigerAccountsHiPadsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerAccountsHiPads::FIELD_ACCOUNTADDRESSID=>$this->getAccountId());
		return VTigerAccountsHiPads::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerCRmEntity which references this VTigerAccount. Will return null in case reference is invalid.
	 * `vtiger_account`.`accountid` -> `vtiger_crmentity`.`crmid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerCRmEntity
	 */
	public function fetchVTigerCRmEntity(PDO $db, $sort=null) {
		$filter=array(VTigerCRmEntity::FIELD_CRMID=>$this->getAccountId());
		$result=VTigerCRmEntity::findByFilter($db, $filter, true, $sort);
		return empty($result) ? null : $result[0];
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerAccount';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerAccount');
	}

	/**
	 * get single VTigerAccount instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerAccount
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerAccount();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerAccount from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerAccount[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerAccount') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>