<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerLeadDetails extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerLeadDetails';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_leaddetails';
	const SQL_INSERT='INSERT INTO `vtiger_leaddetails` (`leadid`,`lead_no`,`email`,`interest`,`firstname`,`salutation`,`lastname`,`company`,`annualrevenue`,`industry`,`campaign`,`rating`,`leadstatus`,`leadsource`,`converted`,`designation`,`licencekeystatus`,`space`,`comments`,`priority`,`demorequest`,`partnercontact`,`productversion`,`product`,`maildate`,`nextstepdate`,`fundingsituation`,`purpose`,`evaluationstatus`,`transferdate`,`revenuetype`,`noofemployees`,`secondaryemail`,`assignleadchk`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_leaddetails` (`leadid`,`lead_no`,`email`,`interest`,`firstname`,`salutation`,`lastname`,`company`,`annualrevenue`,`industry`,`campaign`,`rating`,`leadstatus`,`leadsource`,`converted`,`designation`,`licencekeystatus`,`space`,`comments`,`priority`,`demorequest`,`partnercontact`,`productversion`,`product`,`maildate`,`nextstepdate`,`fundingsituation`,`purpose`,`evaluationstatus`,`transferdate`,`revenuetype`,`noofemployees`,`secondaryemail`,`assignleadchk`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_leaddetails` SET `leadid`=?,`lead_no`=?,`email`=?,`interest`=?,`firstname`=?,`salutation`=?,`lastname`=?,`company`=?,`annualrevenue`=?,`industry`=?,`campaign`=?,`rating`=?,`leadstatus`=?,`leadsource`=?,`converted`=?,`designation`=?,`licencekeystatus`=?,`space`=?,`comments`=?,`priority`=?,`demorequest`=?,`partnercontact`=?,`productversion`=?,`product`=?,`maildate`=?,`nextstepdate`=?,`fundingsituation`=?,`purpose`=?,`evaluationstatus`=?,`transferdate`=?,`revenuetype`=?,`noofemployees`=?,`secondaryemail`=?,`assignleadchk`=? WHERE `leadid`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_leaddetails` WHERE `leadid`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_leaddetails` WHERE `leadid`=?';
	const FIELD_LEADID=1414831861;
	const FIELD_LEAD_NO=910105542;
	const FIELD_EMAIL=870697566;
	const FIELD_INTEREST=1453037864;
	const FIELD_FIRSTNAME=1725678333;
	const FIELD_SALUTATION=873115798;
	const FIELD_LASTNAME=-576011233;
	const FIELD_COMPANY=1810240191;
	const FIELD_ANNUALREVENUE=-169023969;
	const FIELD_INDUSTRY=1009791964;
	const FIELD_CAMPAIGN=742716174;
	const FIELD_RATING=1583483675;
	const FIELD_LEADSTATUS=-596515636;
	const FIELD_LEADSOURCE=-600539915;
	const FIELD_CONVERTED=1242158932;
	const FIELD_DESIGNATION=-103627463;
	const FIELD_LICENCEKEYSTATUS=1825605598;
	const FIELD_SPACE=883716040;
	const FIELD_COMMENTS=280219634;
	const FIELD_PRIORITY=-282825822;
	const FIELD_DEMOREQUEST=652870798;
	const FIELD_PARTNERCONTACT=1434964438;
	const FIELD_PRODUCTVERSION=-128667513;
	const FIELD_PRODUCT=550282033;
	const FIELD_MAILDATE=872821731;
	const FIELD_NEXTSTEPDATE=-731751573;
	const FIELD_FUNDINGSITUATION=-2093959265;
	const FIELD_PURPOSE=639292256;
	const FIELD_EVALUATIONSTATUS=-1869640148;
	const FIELD_TRANSFERDATE=1098546455;
	const FIELD_REVENUETYPE=-1173140840;
	const FIELD_NOOFEMPLOYEES=-1180983313;
	const FIELD_SECONDARYEMAIL=153132582;
	const FIELD_ASSIGNLEADCHK=-1673898819;
	private static $PRIMARY_KEYS=array(self::FIELD_LEADID);
	private static $AUTOINCREMENT_FIELDS=array();
	private static $FIELD_NAMES=array(
		self::FIELD_LEADID=>'leadid',
		self::FIELD_LEAD_NO=>'lead_no',
		self::FIELD_EMAIL=>'email',
		self::FIELD_INTEREST=>'interest',
		self::FIELD_FIRSTNAME=>'firstname',
		self::FIELD_SALUTATION=>'salutation',
		self::FIELD_LASTNAME=>'lastname',
		self::FIELD_COMPANY=>'company',
		self::FIELD_ANNUALREVENUE=>'annualrevenue',
		self::FIELD_INDUSTRY=>'industry',
		self::FIELD_CAMPAIGN=>'campaign',
		self::FIELD_RATING=>'rating',
		self::FIELD_LEADSTATUS=>'leadstatus',
		self::FIELD_LEADSOURCE=>'leadsource',
		self::FIELD_CONVERTED=>'converted',
		self::FIELD_DESIGNATION=>'designation',
		self::FIELD_LICENCEKEYSTATUS=>'licencekeystatus',
		self::FIELD_SPACE=>'space',
		self::FIELD_COMMENTS=>'comments',
		self::FIELD_PRIORITY=>'priority',
		self::FIELD_DEMOREQUEST=>'demorequest',
		self::FIELD_PARTNERCONTACT=>'partnercontact',
		self::FIELD_PRODUCTVERSION=>'productversion',
		self::FIELD_PRODUCT=>'product',
		self::FIELD_MAILDATE=>'maildate',
		self::FIELD_NEXTSTEPDATE=>'nextstepdate',
		self::FIELD_FUNDINGSITUATION=>'fundingsituation',
		self::FIELD_PURPOSE=>'purpose',
		self::FIELD_EVALUATIONSTATUS=>'evaluationstatus',
		self::FIELD_TRANSFERDATE=>'transferdate',
		self::FIELD_REVENUETYPE=>'revenuetype',
		self::FIELD_NOOFEMPLOYEES=>'noofemployees',
		self::FIELD_SECONDARYEMAIL=>'secondaryemail',
		self::FIELD_ASSIGNLEADCHK=>'assignleadchk');
	private static $PROPERTY_NAMES=array(
		self::FIELD_LEADID=>'leadId',
		self::FIELD_LEAD_NO=>'leadNo',
		self::FIELD_EMAIL=>'email',
		self::FIELD_INTEREST=>'interest',
		self::FIELD_FIRSTNAME=>'firstName',
		self::FIELD_SALUTATION=>'salutation',
		self::FIELD_LASTNAME=>'lastName',
		self::FIELD_COMPANY=>'company',
		self::FIELD_ANNUALREVENUE=>'annualRevenue',
		self::FIELD_INDUSTRY=>'industry',
		self::FIELD_CAMPAIGN=>'campaign',
		self::FIELD_RATING=>'rating',
		self::FIELD_LEADSTATUS=>'leadStatus',
		self::FIELD_LEADSOURCE=>'leadSource',
		self::FIELD_CONVERTED=>'converted',
		self::FIELD_DESIGNATION=>'designation',
		self::FIELD_LICENCEKEYSTATUS=>'licenceKeyStatus',
		self::FIELD_SPACE=>'space',
		self::FIELD_COMMENTS=>'comments',
		self::FIELD_PRIORITY=>'priority',
		self::FIELD_DEMOREQUEST=>'demoRequest',
		self::FIELD_PARTNERCONTACT=>'partnerContact',
		self::FIELD_PRODUCTVERSION=>'productVersion',
		self::FIELD_PRODUCT=>'product',
		self::FIELD_MAILDATE=>'mailDate',
		self::FIELD_NEXTSTEPDATE=>'nextStepDate',
		self::FIELD_FUNDINGSITUATION=>'fundingSituation',
		self::FIELD_PURPOSE=>'purpose',
		self::FIELD_EVALUATIONSTATUS=>'evaluationsTatUs',
		self::FIELD_TRANSFERDATE=>'transferDate',
		self::FIELD_REVENUETYPE=>'revenueType',
		self::FIELD_NOOFEMPLOYEES=>'noOfEmployees',
		self::FIELD_SECONDARYEMAIL=>'secondaryEmail',
		self::FIELD_ASSIGNLEADCHK=>'assignLeadChK');
	private static $PROPERTY_TYPES=array(
		self::FIELD_LEADID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_LEAD_NO=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_EMAIL=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_INTEREST=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_FIRSTNAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SALUTATION=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_LASTNAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_COMPANY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ANNUALREVENUE=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_INDUSTRY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CAMPAIGN=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_RATING=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_LEADSTATUS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_LEADSOURCE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CONVERTED=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_DESIGNATION=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_LICENCEKEYSTATUS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SPACE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_COMMENTS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PRIORITY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DEMOREQUEST=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PARTNERCONTACT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PRODUCTVERSION=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PRODUCT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MAILDATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_NEXTSTEPDATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_FUNDINGSITUATION=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PURPOSE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_EVALUATIONSTATUS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TRANSFERDATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_REVENUETYPE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_NOOFEMPLOYEES=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_SECONDARYEMAIL=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ASSIGNLEADCHK=>Db2PhpEntity::PHP_TYPE_INT);
	private static $FIELD_TYPES=array(
		self::FIELD_LEADID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_LEAD_NO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,false),
		self::FIELD_EMAIL=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_INTEREST=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_FIRSTNAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,40,0,true),
		self::FIELD_SALUTATION=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_LASTNAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,80,0,false),
		self::FIELD_COMPANY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,false),
		self::FIELD_ANNUALREVENUE=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_INDUSTRY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_CAMPAIGN=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,true),
		self::FIELD_RATING=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_LEADSTATUS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_LEADSOURCE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_CONVERTED=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_DESIGNATION=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_LICENCEKEYSTATUS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_SPACE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,250,0,true),
		self::FIELD_COMMENTS=>array(Db2PhpEntity::JDBC_TYPE_LONGVARCHAR,65535,0,true),
		self::FIELD_PRIORITY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_DEMOREQUEST=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_PARTNERCONTACT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_PRODUCTVERSION=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,20,0,true),
		self::FIELD_PRODUCT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_MAILDATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_NEXTSTEPDATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_FUNDINGSITUATION=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_PURPOSE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_EVALUATIONSTATUS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_TRANSFERDATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_REVENUETYPE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_NOOFEMPLOYEES=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_SECONDARYEMAIL=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_ASSIGNLEADCHK=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true));
	private static $DEFAULT_VALUES=array(
		self::FIELD_LEADID=>0,
		self::FIELD_LEAD_NO=>'',
		self::FIELD_EMAIL=>null,
		self::FIELD_INTEREST=>null,
		self::FIELD_FIRSTNAME=>null,
		self::FIELD_SALUTATION=>null,
		self::FIELD_LASTNAME=>'',
		self::FIELD_COMPANY=>'',
		self::FIELD_ANNUALREVENUE=>0,
		self::FIELD_INDUSTRY=>null,
		self::FIELD_CAMPAIGN=>null,
		self::FIELD_RATING=>null,
		self::FIELD_LEADSTATUS=>null,
		self::FIELD_LEADSOURCE=>null,
		self::FIELD_CONVERTED=>0,
		self::FIELD_DESIGNATION=>'SalesMan',
		self::FIELD_LICENCEKEYSTATUS=>null,
		self::FIELD_SPACE=>null,
		self::FIELD_COMMENTS=>null,
		self::FIELD_PRIORITY=>null,
		self::FIELD_DEMOREQUEST=>null,
		self::FIELD_PARTNERCONTACT=>null,
		self::FIELD_PRODUCTVERSION=>null,
		self::FIELD_PRODUCT=>null,
		self::FIELD_MAILDATE=>null,
		self::FIELD_NEXTSTEPDATE=>null,
		self::FIELD_FUNDINGSITUATION=>null,
		self::FIELD_PURPOSE=>null,
		self::FIELD_EVALUATIONSTATUS=>null,
		self::FIELD_TRANSFERDATE=>null,
		self::FIELD_REVENUETYPE=>null,
		self::FIELD_NOOFEMPLOYEES=>null,
		self::FIELD_SECONDARYEMAIL=>null,
		self::FIELD_ASSIGNLEADCHK=>0);
	private $leadId;
	private $leadNo;
	private $email;
	private $interest;
	private $firstName;
	private $salutation;
	private $lastName;
	private $company;
	private $annualRevenue;
	private $industry;
	private $campaign;
	private $rating;
	private $leadStatus;
	private $leadSource;
	private $converted;
	private $designation;
	private $licenceKeyStatus;
	private $space;
	private $comments;
	private $priority;
	private $demoRequest;
	private $partnerContact;
	private $productVersion;
	private $product;
	private $mailDate;
	private $nextStepDate;
	private $fundingSituation;
	private $purpose;
	private $evaluationsTatUs;
	private $transferDate;
	private $revenueType;
	private $noOfEmployees;
	private $secondaryEmail;
	private $assignLeadChK;

	/**
	 * set value for leadid 
	 *
	 * type:INT,size:10,default:null,primary,unique
	 *
	 * @param mixed $leadId
	 * @return VTigerLeadDetails
	 */
	public function &setLeadId($leadId) {
		$this->notifyChanged(self::FIELD_LEADID,$this->leadId,$leadId);
		$this->leadId=$leadId;
		return $this;
	}

	/**
	 * get value for leadid 
	 *
	 * type:INT,size:10,default:null,primary,unique
	 *
	 * @return mixed
	 */
	public function getLeadId() {
		return $this->leadId;
	}

	/**
	 * set value for lead_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @param mixed $leadNo
	 * @return VTigerLeadDetails
	 */
	public function &setLeadNo($leadNo) {
		$this->notifyChanged(self::FIELD_LEAD_NO,$this->leadNo,$leadNo);
		$this->leadNo=$leadNo;
		return $this;
	}

	/**
	 * get value for lead_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @return mixed
	 */
	public function getLeadNo() {
		return $this->leadNo;
	}

	/**
	 * set value for email 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $email
	 * @return VTigerLeadDetails
	 */
	public function &setEmail($email) {
		$this->notifyChanged(self::FIELD_EMAIL,$this->email,$email);
		$this->email=$email;
		return $this;
	}

	/**
	 * get value for email 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getEmail() {
		return $this->email;
	}

	/**
	 * set value for interest 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $interest
	 * @return VTigerLeadDetails
	 */
	public function &setInterest($interest) {
		$this->notifyChanged(self::FIELD_INTEREST,$this->interest,$interest);
		$this->interest=$interest;
		return $this;
	}

	/**
	 * get value for interest 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getInterest() {
		return $this->interest;
	}

	/**
	 * set value for firstname 
	 *
	 * type:VARCHAR,size:40,default:null,nullable
	 *
	 * @param mixed $firstName
	 * @return VTigerLeadDetails
	 */
	public function &setFirstName($firstName) {
		$this->notifyChanged(self::FIELD_FIRSTNAME,$this->firstName,$firstName);
		$this->firstName=$firstName;
		return $this;
	}

	/**
	 * get value for firstname 
	 *
	 * type:VARCHAR,size:40,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getFirstName() {
		return $this->firstName;
	}

	/**
	 * set value for salutation 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $salutation
	 * @return VTigerLeadDetails
	 */
	public function &setSalutation($salutation) {
		$this->notifyChanged(self::FIELD_SALUTATION,$this->salutation,$salutation);
		$this->salutation=$salutation;
		return $this;
	}

	/**
	 * get value for salutation 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSalutation() {
		return $this->salutation;
	}

	/**
	 * set value for lastname 
	 *
	 * type:VARCHAR,size:80,default:null
	 *
	 * @param mixed $lastName
	 * @return VTigerLeadDetails
	 */
	public function &setLastName($lastName) {
		$this->notifyChanged(self::FIELD_LASTNAME,$this->lastName,$lastName);
		$this->lastName=$lastName;
		return $this;
	}

	/**
	 * get value for lastname 
	 *
	 * type:VARCHAR,size:80,default:null
	 *
	 * @return mixed
	 */
	public function getLastName() {
		return $this->lastName;
	}

	/**
	 * set value for company 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @param mixed $company
	 * @return VTigerLeadDetails
	 */
	public function &setCompany($company) {
		$this->notifyChanged(self::FIELD_COMPANY,$this->company,$company);
		$this->company=$company;
		return $this;
	}

	/**
	 * get value for company 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @return mixed
	 */
	public function getCompany() {
		return $this->company;
	}

	/**
	 * set value for annualrevenue 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @param mixed $annualRevenue
	 * @return VTigerLeadDetails
	 */
	public function &setAnnualRevenue($annualRevenue) {
		$this->notifyChanged(self::FIELD_ANNUALREVENUE,$this->annualRevenue,$annualRevenue);
		$this->annualRevenue=$annualRevenue;
		return $this;
	}

	/**
	 * get value for annualrevenue 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getAnnualRevenue() {
		return $this->annualRevenue;
	}

	/**
	 * set value for industry 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $industry
	 * @return VTigerLeadDetails
	 */
	public function &setIndustry($industry) {
		$this->notifyChanged(self::FIELD_INDUSTRY,$this->industry,$industry);
		$this->industry=$industry;
		return $this;
	}

	/**
	 * get value for industry 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getIndustry() {
		return $this->industry;
	}

	/**
	 * set value for campaign 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @param mixed $campaign
	 * @return VTigerLeadDetails
	 */
	public function &setCampaign($campaign) {
		$this->notifyChanged(self::FIELD_CAMPAIGN,$this->campaign,$campaign);
		$this->campaign=$campaign;
		return $this;
	}

	/**
	 * get value for campaign 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getCampaign() {
		return $this->campaign;
	}

	/**
	 * set value for rating 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $rating
	 * @return VTigerLeadDetails
	 */
	public function &setRating($rating) {
		$this->notifyChanged(self::FIELD_RATING,$this->rating,$rating);
		$this->rating=$rating;
		return $this;
	}

	/**
	 * get value for rating 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getRating() {
		return $this->rating;
	}

	/**
	 * set value for leadstatus 
	 *
	 * type:VARCHAR,size:50,default:null,index,nullable
	 *
	 * @param mixed $leadStatus
	 * @return VTigerLeadDetails
	 */
	public function &setLeadStatus($leadStatus) {
		$this->notifyChanged(self::FIELD_LEADSTATUS,$this->leadStatus,$leadStatus);
		$this->leadStatus=$leadStatus;
		return $this;
	}

	/**
	 * get value for leadstatus 
	 *
	 * type:VARCHAR,size:50,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getLeadStatus() {
		return $this->leadStatus;
	}

	/**
	 * set value for leadsource 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $leadSource
	 * @return VTigerLeadDetails
	 */
	public function &setLeadSource($leadSource) {
		$this->notifyChanged(self::FIELD_LEADSOURCE,$this->leadSource,$leadSource);
		$this->leadSource=$leadSource;
		return $this;
	}

	/**
	 * get value for leadsource 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getLeadSource() {
		return $this->leadSource;
	}

	/**
	 * set value for converted 
	 *
	 * type:INT,size:10,default:0,index,nullable
	 *
	 * @param mixed $converted
	 * @return VTigerLeadDetails
	 */
	public function &setConverted($converted) {
		$this->notifyChanged(self::FIELD_CONVERTED,$this->converted,$converted);
		$this->converted=$converted;
		return $this;
	}

	/**
	 * get value for converted 
	 *
	 * type:INT,size:10,default:0,index,nullable
	 *
	 * @return mixed
	 */
	public function getConverted() {
		return $this->converted;
	}

	/**
	 * set value for designation 
	 *
	 * type:VARCHAR,size:50,default:SalesMan,nullable
	 *
	 * @param mixed $designation
	 * @return VTigerLeadDetails
	 */
	public function &setDesignation($designation) {
		$this->notifyChanged(self::FIELD_DESIGNATION,$this->designation,$designation);
		$this->designation=$designation;
		return $this;
	}

	/**
	 * get value for designation 
	 *
	 * type:VARCHAR,size:50,default:SalesMan,nullable
	 *
	 * @return mixed
	 */
	public function getDesignation() {
		return $this->designation;
	}

	/**
	 * set value for licencekeystatus 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $licenceKeyStatus
	 * @return VTigerLeadDetails
	 */
	public function &setLicenceKeyStatus($licenceKeyStatus) {
		$this->notifyChanged(self::FIELD_LICENCEKEYSTATUS,$this->licenceKeyStatus,$licenceKeyStatus);
		$this->licenceKeyStatus=$licenceKeyStatus;
		return $this;
	}

	/**
	 * get value for licencekeystatus 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getLicenceKeyStatus() {
		return $this->licenceKeyStatus;
	}

	/**
	 * set value for space 
	 *
	 * type:VARCHAR,size:250,default:null,nullable
	 *
	 * @param mixed $space
	 * @return VTigerLeadDetails
	 */
	public function &setSpace($space) {
		$this->notifyChanged(self::FIELD_SPACE,$this->space,$space);
		$this->space=$space;
		return $this;
	}

	/**
	 * get value for space 
	 *
	 * type:VARCHAR,size:250,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSpace() {
		return $this->space;
	}

	/**
	 * set value for comments 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @param mixed $comments
	 * @return VTigerLeadDetails
	 */
	public function &setComments($comments) {
		$this->notifyChanged(self::FIELD_COMMENTS,$this->comments,$comments);
		$this->comments=$comments;
		return $this;
	}

	/**
	 * get value for comments 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getComments() {
		return $this->comments;
	}

	/**
	 * set value for priority 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $priority
	 * @return VTigerLeadDetails
	 */
	public function &setPriority($priority) {
		$this->notifyChanged(self::FIELD_PRIORITY,$this->priority,$priority);
		$this->priority=$priority;
		return $this;
	}

	/**
	 * get value for priority 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPriority() {
		return $this->priority;
	}

	/**
	 * set value for demorequest 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $demoRequest
	 * @return VTigerLeadDetails
	 */
	public function &setDemoRequest($demoRequest) {
		$this->notifyChanged(self::FIELD_DEMOREQUEST,$this->demoRequest,$demoRequest);
		$this->demoRequest=$demoRequest;
		return $this;
	}

	/**
	 * get value for demorequest 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDemoRequest() {
		return $this->demoRequest;
	}

	/**
	 * set value for partnercontact 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $partnerContact
	 * @return VTigerLeadDetails
	 */
	public function &setPartnerContact($partnerContact) {
		$this->notifyChanged(self::FIELD_PARTNERCONTACT,$this->partnerContact,$partnerContact);
		$this->partnerContact=$partnerContact;
		return $this;
	}

	/**
	 * get value for partnercontact 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPartnerContact() {
		return $this->partnerContact;
	}

	/**
	 * set value for productversion 
	 *
	 * type:VARCHAR,size:20,default:null,nullable
	 *
	 * @param mixed $productVersion
	 * @return VTigerLeadDetails
	 */
	public function &setProductVersion($productVersion) {
		$this->notifyChanged(self::FIELD_PRODUCTVERSION,$this->productVersion,$productVersion);
		$this->productVersion=$productVersion;
		return $this;
	}

	/**
	 * get value for productversion 
	 *
	 * type:VARCHAR,size:20,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getProductVersion() {
		return $this->productVersion;
	}

	/**
	 * set value for product 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $product
	 * @return VTigerLeadDetails
	 */
	public function &setProduct($product) {
		$this->notifyChanged(self::FIELD_PRODUCT,$this->product,$product);
		$this->product=$product;
		return $this;
	}

	/**
	 * get value for product 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getProduct() {
		return $this->product;
	}

	/**
	 * set value for maildate 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $mailDate
	 * @return VTigerLeadDetails
	 */
	public function &setMailDate($mailDate) {
		$this->notifyChanged(self::FIELD_MAILDATE,$this->mailDate,$mailDate);
		$this->mailDate=$mailDate;
		return $this;
	}

	/**
	 * get value for maildate 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMailDate() {
		return $this->mailDate;
	}

	/**
	 * set value for nextstepdate 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $nextStepDate
	 * @return VTigerLeadDetails
	 */
	public function &setNextStepDate($nextStepDate) {
		$this->notifyChanged(self::FIELD_NEXTSTEPDATE,$this->nextStepDate,$nextStepDate);
		$this->nextStepDate=$nextStepDate;
		return $this;
	}

	/**
	 * get value for nextstepdate 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getNextStepDate() {
		return $this->nextStepDate;
	}

	/**
	 * set value for fundingsituation 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $fundingSituation
	 * @return VTigerLeadDetails
	 */
	public function &setFundingSituation($fundingSituation) {
		$this->notifyChanged(self::FIELD_FUNDINGSITUATION,$this->fundingSituation,$fundingSituation);
		$this->fundingSituation=$fundingSituation;
		return $this;
	}

	/**
	 * get value for fundingsituation 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getFundingSituation() {
		return $this->fundingSituation;
	}

	/**
	 * set value for purpose 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $purpose
	 * @return VTigerLeadDetails
	 */
	public function &setPurpose($purpose) {
		$this->notifyChanged(self::FIELD_PURPOSE,$this->purpose,$purpose);
		$this->purpose=$purpose;
		return $this;
	}

	/**
	 * get value for purpose 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPurpose() {
		return $this->purpose;
	}

	/**
	 * set value for evaluationstatus 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $evaluationsTatUs
	 * @return VTigerLeadDetails
	 */
	public function &setEvaluationsTatUs($evaluationsTatUs) {
		$this->notifyChanged(self::FIELD_EVALUATIONSTATUS,$this->evaluationsTatUs,$evaluationsTatUs);
		$this->evaluationsTatUs=$evaluationsTatUs;
		return $this;
	}

	/**
	 * get value for evaluationstatus 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getEvaluationsTatUs() {
		return $this->evaluationsTatUs;
	}

	/**
	 * set value for transferdate 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $transferDate
	 * @return VTigerLeadDetails
	 */
	public function &setTransferDate($transferDate) {
		$this->notifyChanged(self::FIELD_TRANSFERDATE,$this->transferDate,$transferDate);
		$this->transferDate=$transferDate;
		return $this;
	}

	/**
	 * get value for transferdate 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTransferDate() {
		return $this->transferDate;
	}

	/**
	 * set value for revenuetype 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $revenueType
	 * @return VTigerLeadDetails
	 */
	public function &setRevenueType($revenueType) {
		$this->notifyChanged(self::FIELD_REVENUETYPE,$this->revenueType,$revenueType);
		$this->revenueType=$revenueType;
		return $this;
	}

	/**
	 * get value for revenuetype 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getRevenueType() {
		return $this->revenueType;
	}

	/**
	 * set value for noofemployees 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $noOfEmployees
	 * @return VTigerLeadDetails
	 */
	public function &setNoOfEmployees($noOfEmployees) {
		$this->notifyChanged(self::FIELD_NOOFEMPLOYEES,$this->noOfEmployees,$noOfEmployees);
		$this->noOfEmployees=$noOfEmployees;
		return $this;
	}

	/**
	 * get value for noofemployees 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getNoOfEmployees() {
		return $this->noOfEmployees;
	}

	/**
	 * set value for secondaryemail 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $secondaryEmail
	 * @return VTigerLeadDetails
	 */
	public function &setSecondaryEmail($secondaryEmail) {
		$this->notifyChanged(self::FIELD_SECONDARYEMAIL,$this->secondaryEmail,$secondaryEmail);
		$this->secondaryEmail=$secondaryEmail;
		return $this;
	}

	/**
	 * get value for secondaryemail 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSecondaryEmail() {
		return $this->secondaryEmail;
	}

	/**
	 * set value for assignleadchk 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @param mixed $assignLeadChK
	 * @return VTigerLeadDetails
	 */
	public function &setAssignLeadChK($assignLeadChK) {
		$this->notifyChanged(self::FIELD_ASSIGNLEADCHK,$this->assignLeadChK,$assignLeadChK);
		$this->assignLeadChK=$assignLeadChK;
		return $this;
	}

	/**
	 * get value for assignleadchk 
	 *
	 * type:INT,size:10,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getAssignLeadChK() {
		return $this->assignLeadChK;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_LEADID=>$this->getLeadId(),
			self::FIELD_LEAD_NO=>$this->getLeadNo(),
			self::FIELD_EMAIL=>$this->getEmail(),
			self::FIELD_INTEREST=>$this->getInterest(),
			self::FIELD_FIRSTNAME=>$this->getFirstName(),
			self::FIELD_SALUTATION=>$this->getSalutation(),
			self::FIELD_LASTNAME=>$this->getLastName(),
			self::FIELD_COMPANY=>$this->getCompany(),
			self::FIELD_ANNUALREVENUE=>$this->getAnnualRevenue(),
			self::FIELD_INDUSTRY=>$this->getIndustry(),
			self::FIELD_CAMPAIGN=>$this->getCampaign(),
			self::FIELD_RATING=>$this->getRating(),
			self::FIELD_LEADSTATUS=>$this->getLeadStatus(),
			self::FIELD_LEADSOURCE=>$this->getLeadSource(),
			self::FIELD_CONVERTED=>$this->getConverted(),
			self::FIELD_DESIGNATION=>$this->getDesignation(),
			self::FIELD_LICENCEKEYSTATUS=>$this->getLicenceKeyStatus(),
			self::FIELD_SPACE=>$this->getSpace(),
			self::FIELD_COMMENTS=>$this->getComments(),
			self::FIELD_PRIORITY=>$this->getPriority(),
			self::FIELD_DEMOREQUEST=>$this->getDemoRequest(),
			self::FIELD_PARTNERCONTACT=>$this->getPartnerContact(),
			self::FIELD_PRODUCTVERSION=>$this->getProductVersion(),
			self::FIELD_PRODUCT=>$this->getProduct(),
			self::FIELD_MAILDATE=>$this->getMailDate(),
			self::FIELD_NEXTSTEPDATE=>$this->getNextStepDate(),
			self::FIELD_FUNDINGSITUATION=>$this->getFundingSituation(),
			self::FIELD_PURPOSE=>$this->getPurpose(),
			self::FIELD_EVALUATIONSTATUS=>$this->getEvaluationsTatUs(),
			self::FIELD_TRANSFERDATE=>$this->getTransferDate(),
			self::FIELD_REVENUETYPE=>$this->getRevenueType(),
			self::FIELD_NOOFEMPLOYEES=>$this->getNoOfEmployees(),
			self::FIELD_SECONDARYEMAIL=>$this->getSecondaryEmail(),
			self::FIELD_ASSIGNLEADCHK=>$this->getAssignLeadChK());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_LEADID=>$this->getLeadId());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerLeadDetails instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerLeadDetails $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerLeadDetails[]
	 */
	public static function findByExample(PDO $db,VTigerLeadDetails $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerLeadDetails instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerLeadDetails[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_leaddetails`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerLeadDetails instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerLeadDetails[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerLeadDetails instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerLeadDetails[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerLeadDetails();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerLeadDetails instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerLeadDetails[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_leaddetails`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setLeadId($result['leadid']);
		$this->setLeadNo($result['lead_no']);
		$this->setEmail($result['email']);
		$this->setInterest($result['interest']);
		$this->setFirstName($result['firstname']);
		$this->setSalutation($result['salutation']);
		$this->setLastName($result['lastname']);
		$this->setCompany($result['company']);
		$this->setAnnualRevenue($result['annualrevenue']);
		$this->setIndustry($result['industry']);
		$this->setCampaign($result['campaign']);
		$this->setRating($result['rating']);
		$this->setLeadStatus($result['leadstatus']);
		$this->setLeadSource($result['leadsource']);
		$this->setConverted($result['converted']);
		$this->setDesignation($result['designation']);
		$this->setLicenceKeyStatus($result['licencekeystatus']);
		$this->setSpace($result['space']);
		$this->setComments($result['comments']);
		$this->setPriority($result['priority']);
		$this->setDemoRequest($result['demorequest']);
		$this->setPartnerContact($result['partnercontact']);
		$this->setProductVersion($result['productversion']);
		$this->setProduct($result['product']);
		$this->setMailDate($result['maildate']);
		$this->setNextStepDate($result['nextstepdate']);
		$this->setFundingSituation($result['fundingsituation']);
		$this->setPurpose($result['purpose']);
		$this->setEvaluationsTatUs($result['evaluationstatus']);
		$this->setTransferDate($result['transferdate']);
		$this->setRevenueType($result['revenuetype']);
		$this->setNoOfEmployees($result['noofemployees']);
		$this->setSecondaryEmail($result['secondaryemail']);
		$this->setAssignLeadChK($result['assignleadchk']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerLeadDetails
	 */
	public static function findById(PDO $db,$leadId) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$leadId);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerLeadDetails();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getLeadId());
		$stmt->bindValue(2,$this->getLeadNo());
		$stmt->bindValue(3,$this->getEmail());
		$stmt->bindValue(4,$this->getInterest());
		$stmt->bindValue(5,$this->getFirstName());
		$stmt->bindValue(6,$this->getSalutation());
		$stmt->bindValue(7,$this->getLastName());
		$stmt->bindValue(8,$this->getCompany());
		$stmt->bindValue(9,$this->getAnnualRevenue());
		$stmt->bindValue(10,$this->getIndustry());
		$stmt->bindValue(11,$this->getCampaign());
		$stmt->bindValue(12,$this->getRating());
		$stmt->bindValue(13,$this->getLeadStatus());
		$stmt->bindValue(14,$this->getLeadSource());
		$stmt->bindValue(15,$this->getConverted());
		$stmt->bindValue(16,$this->getDesignation());
		$stmt->bindValue(17,$this->getLicenceKeyStatus());
		$stmt->bindValue(18,$this->getSpace());
		$stmt->bindValue(19,$this->getComments());
		$stmt->bindValue(20,$this->getPriority());
		$stmt->bindValue(21,$this->getDemoRequest());
		$stmt->bindValue(22,$this->getPartnerContact());
		$stmt->bindValue(23,$this->getProductVersion());
		$stmt->bindValue(24,$this->getProduct());
		$stmt->bindValue(25,$this->getMailDate());
		$stmt->bindValue(26,$this->getNextStepDate());
		$stmt->bindValue(27,$this->getFundingSituation());
		$stmt->bindValue(28,$this->getPurpose());
		$stmt->bindValue(29,$this->getEvaluationsTatUs());
		$stmt->bindValue(30,$this->getTransferDate());
		$stmt->bindValue(31,$this->getRevenueType());
		$stmt->bindValue(32,$this->getNoOfEmployees());
		$stmt->bindValue(33,$this->getSecondaryEmail());
		$stmt->bindValue(34,$this->getAssignLeadChK());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_INSERT);
		$this->bindValues($stmt);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(35,$this->getLeadId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getLeadId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Fetch VTigerCampaignLeadRel's which this VTigerLeadDetails references.
	 * `vtiger_leaddetails`.`leadid` -> `vtiger_campaignleadrel`.`leadid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerCampaignLeadRel[]
	 */
	public function fetchVTigerCampaignLeadRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerCampaignLeadRel::FIELD_LEADID=>$this->getLeadId());
		return VTigerCampaignLeadRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerLeadAcctRel's which this VTigerLeadDetails references.
	 * `vtiger_leaddetails`.`leadid` -> `vtiger_leadacctrel`.`leadid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerLeadAcctRel[]
	 */
	public function fetchVTigerLeadAcctRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerLeadAcctRel::FIELD_LEADID=>$this->getLeadId());
		return VTigerLeadAcctRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerLeadAddress's which this VTigerLeadDetails references.
	 * `vtiger_leaddetails`.`leadid` -> `vtiger_leadaddress`.`leadaddressid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerLeadAddress[]
	 */
	public function fetchVTigerLeadAddressCollection(PDO $db, $sort=null) {
		$filter=array(VTigerLeadAddress::FIELD_LEADADDRESSID=>$this->getLeadId());
		return VTigerLeadAddress::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerLeadContRel's which this VTigerLeadDetails references.
	 * `vtiger_leaddetails`.`leadid` -> `vtiger_leadcontrel`.`leadid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerLeadContRel[]
	 */
	public function fetchVTigerLeadContRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerLeadContRel::FIELD_LEADID=>$this->getLeadId());
		return VTigerLeadContRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerLeadsCf's which this VTigerLeadDetails references.
	 * `vtiger_leaddetails`.`leadid` -> `vtiger_leadscf`.`leadid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerLeadsCf[]
	 */
	public function fetchVTigerLeadsCfCollection(PDO $db, $sort=null) {
		$filter=array(VTigerLeadsCf::FIELD_LEADID=>$this->getLeadId());
		return VTigerLeadsCf::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerLeadsUbDetails's which this VTigerLeadDetails references.
	 * `vtiger_leaddetails`.`leadid` -> `vtiger_leadsubdetails`.`leadsubscriptionid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerLeadsUbDetails[]
	 */
	public function fetchVTigerLeadsUbDetailsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerLeadsUbDetails::FIELD_LEADSUBSCRIPTIONID=>$this->getLeadId());
		return VTigerLeadsUbDetails::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerCRmEntity which references this VTigerLeadDetails. Will return null in case reference is invalid.
	 * `vtiger_leaddetails`.`leadid` -> `vtiger_crmentity`.`crmid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerCRmEntity
	 */
	public function fetchVTigerCRmEntity(PDO $db, $sort=null) {
		$filter=array(VTigerCRmEntity::FIELD_CRMID=>$this->getLeadId());
		$result=VTigerCRmEntity::findByFilter($db, $filter, true, $sort);
		return empty($result) ? null : $result[0];
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerLeadDetails';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerLeadDetails');
	}

	/**
	 * get single VTigerLeadDetails instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerLeadDetails
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerLeadDetails();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerLeadDetails from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerLeadDetails[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerLeadDetails') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>