<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerUsers extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerUsers';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_users';
	const SQL_INSERT='INSERT INTO `vtiger_users` (`id`,`user_name`,`user_password`,`user_hash`,`cal_color`,`first_name`,`last_name`,`reports_to_id`,`is_admin`,`currency_id`,`description`,`date_entered`,`date_modified`,`modified_user_id`,`title`,`department`,`phone_home`,`phone_mobile`,`phone_work`,`phone_other`,`phone_fax`,`email1`,`email2`,`secondaryemail`,`status`,`signature`,`address_street`,`address_city`,`address_state`,`address_country`,`address_postalcode`,`user_preferences`,`tz`,`holidays`,`namedays`,`workdays`,`weekstart`,`date_format`,`hour_format`,`start_hour`,`end_hour`,`activity_view`,`lead_view`,`imagename`,`deleted`,`confirm_password`,`internal_mailer`,`reminder_interval`,`reminder_next_time`,`crypt_type`,`accesskey`,`theme`,`language`,`time_zone`,`currency_grouping_pattern`,`currency_decimal_separator`,`currency_grouping_separator`,`currency_symbol_placement`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_users` (`user_name`,`user_password`,`user_hash`,`cal_color`,`first_name`,`last_name`,`reports_to_id`,`is_admin`,`currency_id`,`description`,`date_entered`,`date_modified`,`modified_user_id`,`title`,`department`,`phone_home`,`phone_mobile`,`phone_work`,`phone_other`,`phone_fax`,`email1`,`email2`,`secondaryemail`,`status`,`signature`,`address_street`,`address_city`,`address_state`,`address_country`,`address_postalcode`,`user_preferences`,`tz`,`holidays`,`namedays`,`workdays`,`weekstart`,`date_format`,`hour_format`,`start_hour`,`end_hour`,`activity_view`,`lead_view`,`imagename`,`deleted`,`confirm_password`,`internal_mailer`,`reminder_interval`,`reminder_next_time`,`crypt_type`,`accesskey`,`theme`,`language`,`time_zone`,`currency_grouping_pattern`,`currency_decimal_separator`,`currency_grouping_separator`,`currency_symbol_placement`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_users` SET `id`=?,`user_name`=?,`user_password`=?,`user_hash`=?,`cal_color`=?,`first_name`=?,`last_name`=?,`reports_to_id`=?,`is_admin`=?,`currency_id`=?,`description`=?,`date_entered`=?,`date_modified`=?,`modified_user_id`=?,`title`=?,`department`=?,`phone_home`=?,`phone_mobile`=?,`phone_work`=?,`phone_other`=?,`phone_fax`=?,`email1`=?,`email2`=?,`secondaryemail`=?,`status`=?,`signature`=?,`address_street`=?,`address_city`=?,`address_state`=?,`address_country`=?,`address_postalcode`=?,`user_preferences`=?,`tz`=?,`holidays`=?,`namedays`=?,`workdays`=?,`weekstart`=?,`date_format`=?,`hour_format`=?,`start_hour`=?,`end_hour`=?,`activity_view`=?,`lead_view`=?,`imagename`=?,`deleted`=?,`confirm_password`=?,`internal_mailer`=?,`reminder_interval`=?,`reminder_next_time`=?,`crypt_type`=?,`accesskey`=?,`theme`=?,`language`=?,`time_zone`=?,`currency_grouping_pattern`=?,`currency_decimal_separator`=?,`currency_grouping_separator`=?,`currency_symbol_placement`=? WHERE `id`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_users` WHERE `id`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_users` WHERE `id`=?';
	const FIELD_ID=744009783;
	const FIELD_USER_NAME=-1860906013;
	const FIELD_USER_PASSWORD=1810802675;
	const FIELD_USER_HASH=-1861084570;
	const FIELD_CAL_COLOR=680027414;
	const FIELD_FIRST_NAME=350836182;
	const FIELD_LAST_NAME=-187124744;
	const FIELD_REPORTS_TO_ID=-195540413;
	const FIELD_IS_ADMIN=-240432618;
	const FIELD_CURRENCY_ID=-726771603;
	const FIELD_DESCRIPTION=1257021536;
	const FIELD_DATE_ENTERED=1328297474;
	const FIELD_DATE_MODIFIED=-282092642;
	const FIELD_MODIFIED_USER_ID=1018347701;
	const FIELD_TITLE=-1520346692;
	const FIELD_DEPARTMENT=1360005742;
	const FIELD_PHONE_HOME=-1312461780;
	const FIELD_PHONE_MOBILE=1587439791;
	const FIELD_PHONE_WORK=-1312014754;
	const FIELD_PHONE_OTHER=-2025000605;
	const FIELD_PHONE_FAX=1066038832;
	const FIELD_EMAIL1=-312419023;
	const FIELD_EMAIL2=-312419022;
	const FIELD_SECONDARYEMAIL=-1503691836;
	const FIELD_STATUS=94864654;
	const FIELD_SIGNATURE=-1126662628;
	const FIELD_ADDRESS_STREET=224980938;
	const FIELD_ADDRESS_CITY=-1796899086;
	const FIELD_ADDRESS_STATE=145788906;
	const FIELD_ADDRESS_COUNTRY=1224192175;
	const FIELD_ADDRESS_POSTALCODE=76460415;
	const FIELD_USER_PREFERENCES=1419432608;
	const FIELD_TZ=744010146;
	const FIELD_HOLIDAYS=-858734281;
	const FIELD_NAMEDAYS=1492978558;
	const FIELD_WORKDAYS=-312761084;
	const FIELD_WEEKSTART=7856722;
	const FIELD_DATE_FORMAT=-343293428;
	const FIELD_HOUR_FORMAT=1976857366;
	const FIELD_START_HOUR=-1061675331;
	const FIELD_END_HOUR=1377129700;
	const FIELD_ACTIVITY_VIEW=-492821191;
	const FIELD_LEAD_VIEW=-1058835700;
	const FIELD_IMAGENAME=1217323978;
	const FIELD_DELETED=2093424253;
	const FIELD_CONFIRM_PASSWORD=1223991126;
	const FIELD_INTERNAL_MAILER=978739914;
	const FIELD_REMINDER_INTERVAL=561772374;
	const FIELD_REMINDER_NEXT_TIME=949198888;
	const FIELD_CRYPT_TYPE=-1494382969;
	const FIELD_ACCESSKEY=-20306977;
	const FIELD_THEME=-1520390867;
	const FIELD_LANGUAGE=-1961660044;
	const FIELD_TIME_ZONE=2131568450;
	const FIELD_CURRENCY_GROUPING_PATTERN=1057919014;
	const FIELD_CURRENCY_DECIMAL_SEPARATOR=-1306319387;
	const FIELD_CURRENCY_GROUPING_SEPARATOR=514308603;
	const FIELD_CURRENCY_SYMBOL_PLACEMENT=-1676969776;
	private static $PRIMARY_KEYS=array(self::FIELD_ID);
	private static $AUTOINCREMENT_FIELDS=array(self::FIELD_ID);
	private static $FIELD_NAMES=array(
		self::FIELD_ID=>'id',
		self::FIELD_USER_NAME=>'user_name',
		self::FIELD_USER_PASSWORD=>'user_password',
		self::FIELD_USER_HASH=>'user_hash',
		self::FIELD_CAL_COLOR=>'cal_color',
		self::FIELD_FIRST_NAME=>'first_name',
		self::FIELD_LAST_NAME=>'last_name',
		self::FIELD_REPORTS_TO_ID=>'reports_to_id',
		self::FIELD_IS_ADMIN=>'is_admin',
		self::FIELD_CURRENCY_ID=>'currency_id',
		self::FIELD_DESCRIPTION=>'description',
		self::FIELD_DATE_ENTERED=>'date_entered',
		self::FIELD_DATE_MODIFIED=>'date_modified',
		self::FIELD_MODIFIED_USER_ID=>'modified_user_id',
		self::FIELD_TITLE=>'title',
		self::FIELD_DEPARTMENT=>'department',
		self::FIELD_PHONE_HOME=>'phone_home',
		self::FIELD_PHONE_MOBILE=>'phone_mobile',
		self::FIELD_PHONE_WORK=>'phone_work',
		self::FIELD_PHONE_OTHER=>'phone_other',
		self::FIELD_PHONE_FAX=>'phone_fax',
		self::FIELD_EMAIL1=>'email1',
		self::FIELD_EMAIL2=>'email2',
		self::FIELD_SECONDARYEMAIL=>'secondaryemail',
		self::FIELD_STATUS=>'status',
		self::FIELD_SIGNATURE=>'signature',
		self::FIELD_ADDRESS_STREET=>'address_street',
		self::FIELD_ADDRESS_CITY=>'address_city',
		self::FIELD_ADDRESS_STATE=>'address_state',
		self::FIELD_ADDRESS_COUNTRY=>'address_country',
		self::FIELD_ADDRESS_POSTALCODE=>'address_postalcode',
		self::FIELD_USER_PREFERENCES=>'user_preferences',
		self::FIELD_TZ=>'tz',
		self::FIELD_HOLIDAYS=>'holidays',
		self::FIELD_NAMEDAYS=>'namedays',
		self::FIELD_WORKDAYS=>'workdays',
		self::FIELD_WEEKSTART=>'weekstart',
		self::FIELD_DATE_FORMAT=>'date_format',
		self::FIELD_HOUR_FORMAT=>'hour_format',
		self::FIELD_START_HOUR=>'start_hour',
		self::FIELD_END_HOUR=>'end_hour',
		self::FIELD_ACTIVITY_VIEW=>'activity_view',
		self::FIELD_LEAD_VIEW=>'lead_view',
		self::FIELD_IMAGENAME=>'imagename',
		self::FIELD_DELETED=>'deleted',
		self::FIELD_CONFIRM_PASSWORD=>'confirm_password',
		self::FIELD_INTERNAL_MAILER=>'internal_mailer',
		self::FIELD_REMINDER_INTERVAL=>'reminder_interval',
		self::FIELD_REMINDER_NEXT_TIME=>'reminder_next_time',
		self::FIELD_CRYPT_TYPE=>'crypt_type',
		self::FIELD_ACCESSKEY=>'accesskey',
		self::FIELD_THEME=>'theme',
		self::FIELD_LANGUAGE=>'language',
		self::FIELD_TIME_ZONE=>'time_zone',
		self::FIELD_CURRENCY_GROUPING_PATTERN=>'currency_grouping_pattern',
		self::FIELD_CURRENCY_DECIMAL_SEPARATOR=>'currency_decimal_separator',
		self::FIELD_CURRENCY_GROUPING_SEPARATOR=>'currency_grouping_separator',
		self::FIELD_CURRENCY_SYMBOL_PLACEMENT=>'currency_symbol_placement');
	private static $PROPERTY_NAMES=array(
		self::FIELD_ID=>'id',
		self::FIELD_USER_NAME=>'userName',
		self::FIELD_USER_PASSWORD=>'userPassword',
		self::FIELD_USER_HASH=>'userHash',
		self::FIELD_CAL_COLOR=>'calColor',
		self::FIELD_FIRST_NAME=>'firstName',
		self::FIELD_LAST_NAME=>'lastName',
		self::FIELD_REPORTS_TO_ID=>'reportsToId',
		self::FIELD_IS_ADMIN=>'isAdmin',
		self::FIELD_CURRENCY_ID=>'currencyId',
		self::FIELD_DESCRIPTION=>'description',
		self::FIELD_DATE_ENTERED=>'dateEntered',
		self::FIELD_DATE_MODIFIED=>'dateModified',
		self::FIELD_MODIFIED_USER_ID=>'modifiedUserId',
		self::FIELD_TITLE=>'title',
		self::FIELD_DEPARTMENT=>'department',
		self::FIELD_PHONE_HOME=>'phoneHome',
		self::FIELD_PHONE_MOBILE=>'phoneMobile',
		self::FIELD_PHONE_WORK=>'phoneWork',
		self::FIELD_PHONE_OTHER=>'phoneOther',
		self::FIELD_PHONE_FAX=>'phoneFax',
		self::FIELD_EMAIL1=>'email1',
		self::FIELD_EMAIL2=>'email2',
		self::FIELD_SECONDARYEMAIL=>'secondaryEmail',
		self::FIELD_STATUS=>'status',
		self::FIELD_SIGNATURE=>'signature',
		self::FIELD_ADDRESS_STREET=>'addressStreet',
		self::FIELD_ADDRESS_CITY=>'addressCity',
		self::FIELD_ADDRESS_STATE=>'addressState',
		self::FIELD_ADDRESS_COUNTRY=>'addressCountry',
		self::FIELD_ADDRESS_POSTALCODE=>'addressPostalCode',
		self::FIELD_USER_PREFERENCES=>'userPreferences',
		self::FIELD_TZ=>'tz',
		self::FIELD_HOLIDAYS=>'holidays',
		self::FIELD_NAMEDAYS=>'namedAys',
		self::FIELD_WORKDAYS=>'workdays',
		self::FIELD_WEEKSTART=>'weeksTart',
		self::FIELD_DATE_FORMAT=>'dateFormat',
		self::FIELD_HOUR_FORMAT=>'hourFormat',
		self::FIELD_START_HOUR=>'startHour',
		self::FIELD_END_HOUR=>'endHour',
		self::FIELD_ACTIVITY_VIEW=>'activityView',
		self::FIELD_LEAD_VIEW=>'leadView',
		self::FIELD_IMAGENAME=>'imageName',
		self::FIELD_DELETED=>'deleted',
		self::FIELD_CONFIRM_PASSWORD=>'confirmPassword',
		self::FIELD_INTERNAL_MAILER=>'internalMailer',
		self::FIELD_REMINDER_INTERVAL=>'reminderInterval',
		self::FIELD_REMINDER_NEXT_TIME=>'reminderNextTime',
		self::FIELD_CRYPT_TYPE=>'cryptType',
		self::FIELD_ACCESSKEY=>'accessKey',
		self::FIELD_THEME=>'theme',
		self::FIELD_LANGUAGE=>'language',
		self::FIELD_TIME_ZONE=>'timeZone',
		self::FIELD_CURRENCY_GROUPING_PATTERN=>'currencyGroupingPattern',
		self::FIELD_CURRENCY_DECIMAL_SEPARATOR=>'currencyDecimalSeparator',
		self::FIELD_CURRENCY_GROUPING_SEPARATOR=>'currencyGroupingSeparator',
		self::FIELD_CURRENCY_SYMBOL_PLACEMENT=>'currencySymbolPlacement');
	private static $PROPERTY_TYPES=array(
		self::FIELD_ID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_USER_NAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_USER_PASSWORD=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_USER_HASH=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CAL_COLOR=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_FIRST_NAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_LAST_NAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_REPORTS_TO_ID=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_IS_ADMIN=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CURRENCY_ID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_DESCRIPTION=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DATE_ENTERED=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DATE_MODIFIED=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MODIFIED_USER_ID=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TITLE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DEPARTMENT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PHONE_HOME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PHONE_MOBILE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PHONE_WORK=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PHONE_OTHER=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PHONE_FAX=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_EMAIL1=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_EMAIL2=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SECONDARYEMAIL=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_STATUS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SIGNATURE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ADDRESS_STREET=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ADDRESS_CITY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ADDRESS_STATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ADDRESS_COUNTRY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ADDRESS_POSTALCODE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_USER_PREFERENCES=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TZ=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_HOLIDAYS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_NAMEDAYS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_WORKDAYS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_WEEKSTART=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_DATE_FORMAT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_HOUR_FORMAT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_START_HOUR=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_END_HOUR=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ACTIVITY_VIEW=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_LEAD_VIEW=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_IMAGENAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DELETED=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_CONFIRM_PASSWORD=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_INTERNAL_MAILER=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_REMINDER_INTERVAL=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_REMINDER_NEXT_TIME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CRYPT_TYPE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ACCESSKEY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_THEME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_LANGUAGE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TIME_ZONE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CURRENCY_GROUPING_PATTERN=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CURRENCY_DECIMAL_SEPARATOR=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CURRENCY_GROUPING_SEPARATOR=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CURRENCY_SYMBOL_PLACEMENT=>Db2PhpEntity::PHP_TYPE_STRING);
	private static $FIELD_TYPES=array(
		self::FIELD_ID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_USER_NAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,255,0,true),
		self::FIELD_USER_PASSWORD=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_USER_HASH=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,32,0,true),
		self::FIELD_CAL_COLOR=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,25,0,true),
		self::FIELD_FIRST_NAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,true),
		self::FIELD_LAST_NAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,true),
		self::FIELD_REPORTS_TO_ID=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,36,0,true),
		self::FIELD_IS_ADMIN=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,3,0,true),
		self::FIELD_CURRENCY_ID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_DESCRIPTION=>array(Db2PhpEntity::JDBC_TYPE_LONGVARCHAR,65535,0,true),
		self::FIELD_DATE_ENTERED=>array(Db2PhpEntity::JDBC_TYPE_TIMESTAMP,19,0,false),
		self::FIELD_DATE_MODIFIED=>array(Db2PhpEntity::JDBC_TYPE_TIMESTAMP,19,0,false),
		self::FIELD_MODIFIED_USER_ID=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,36,0,true),
		self::FIELD_TITLE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_DEPARTMENT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_PHONE_HOME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_PHONE_MOBILE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_PHONE_WORK=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_PHONE_OTHER=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_PHONE_FAX=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_EMAIL1=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_EMAIL2=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_SECONDARYEMAIL=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_STATUS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,25,0,true),
		self::FIELD_SIGNATURE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,1000,0,true),
		self::FIELD_ADDRESS_STREET=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,150,0,true),
		self::FIELD_ADDRESS_CITY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_ADDRESS_STATE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_ADDRESS_COUNTRY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,25,0,true),
		self::FIELD_ADDRESS_POSTALCODE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,9,0,true),
		self::FIELD_USER_PREFERENCES=>array(Db2PhpEntity::JDBC_TYPE_LONGVARCHAR,65535,0,true),
		self::FIELD_TZ=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,true),
		self::FIELD_HOLIDAYS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,60,0,true),
		self::FIELD_NAMEDAYS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,60,0,true),
		self::FIELD_WORKDAYS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,true),
		self::FIELD_WEEKSTART=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_DATE_FORMAT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_HOUR_FORMAT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,true),
		self::FIELD_START_HOUR=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,true),
		self::FIELD_END_HOUR=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,true),
		self::FIELD_ACTIVITY_VIEW=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_LEAD_VIEW=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_IMAGENAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,250,0,true),
		self::FIELD_DELETED=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_CONFIRM_PASSWORD=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,300,0,true),
		self::FIELD_INTERNAL_MAILER=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,3,0,false),
		self::FIELD_REMINDER_INTERVAL=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_REMINDER_NEXT_TIME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_CRYPT_TYPE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,20,0,false),
		self::FIELD_ACCESSKEY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,36,0,true),
		self::FIELD_THEME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_LANGUAGE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,36,0,true),
		self::FIELD_TIME_ZONE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_CURRENCY_GROUPING_PATTERN=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_CURRENCY_DECIMAL_SEPARATOR=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,2,0,true),
		self::FIELD_CURRENCY_GROUPING_SEPARATOR=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,2,0,true),
		self::FIELD_CURRENCY_SYMBOL_PLACEMENT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,20,0,true));
	private static $DEFAULT_VALUES=array(
		self::FIELD_ID=>null,
		self::FIELD_USER_NAME=>null,
		self::FIELD_USER_PASSWORD=>null,
		self::FIELD_USER_HASH=>null,
		self::FIELD_CAL_COLOR=>'#E6FAD8',
		self::FIELD_FIRST_NAME=>null,
		self::FIELD_LAST_NAME=>null,
		self::FIELD_REPORTS_TO_ID=>null,
		self::FIELD_IS_ADMIN=>'0',
		self::FIELD_CURRENCY_ID=>1,
		self::FIELD_DESCRIPTION=>null,
		self::FIELD_DATE_ENTERED=>'CURRENT_TIMESTAMP',
		self::FIELD_DATE_MODIFIED=>'0000-00-00 00:00:00',
		self::FIELD_MODIFIED_USER_ID=>null,
		self::FIELD_TITLE=>null,
		self::FIELD_DEPARTMENT=>null,
		self::FIELD_PHONE_HOME=>null,
		self::FIELD_PHONE_MOBILE=>null,
		self::FIELD_PHONE_WORK=>null,
		self::FIELD_PHONE_OTHER=>null,
		self::FIELD_PHONE_FAX=>null,
		self::FIELD_EMAIL1=>null,
		self::FIELD_EMAIL2=>null,
		self::FIELD_SECONDARYEMAIL=>null,
		self::FIELD_STATUS=>null,
		self::FIELD_SIGNATURE=>null,
		self::FIELD_ADDRESS_STREET=>null,
		self::FIELD_ADDRESS_CITY=>null,
		self::FIELD_ADDRESS_STATE=>null,
		self::FIELD_ADDRESS_COUNTRY=>null,
		self::FIELD_ADDRESS_POSTALCODE=>null,
		self::FIELD_USER_PREFERENCES=>null,
		self::FIELD_TZ=>null,
		self::FIELD_HOLIDAYS=>null,
		self::FIELD_NAMEDAYS=>null,
		self::FIELD_WORKDAYS=>null,
		self::FIELD_WEEKSTART=>null,
		self::FIELD_DATE_FORMAT=>null,
		self::FIELD_HOUR_FORMAT=>'am/pm',
		self::FIELD_START_HOUR=>'10:00',
		self::FIELD_END_HOUR=>'23:00',
		self::FIELD_ACTIVITY_VIEW=>'Today',
		self::FIELD_LEAD_VIEW=>'Today',
		self::FIELD_IMAGENAME=>null,
		self::FIELD_DELETED=>0,
		self::FIELD_CONFIRM_PASSWORD=>null,
		self::FIELD_INTERNAL_MAILER=>'1',
		self::FIELD_REMINDER_INTERVAL=>null,
		self::FIELD_REMINDER_NEXT_TIME=>null,
		self::FIELD_CRYPT_TYPE=>'MD5',
		self::FIELD_ACCESSKEY=>null,
		self::FIELD_THEME=>null,
		self::FIELD_LANGUAGE=>null,
		self::FIELD_TIME_ZONE=>null,
		self::FIELD_CURRENCY_GROUPING_PATTERN=>null,
		self::FIELD_CURRENCY_DECIMAL_SEPARATOR=>null,
		self::FIELD_CURRENCY_GROUPING_SEPARATOR=>null,
		self::FIELD_CURRENCY_SYMBOL_PLACEMENT=>null);
	private $id;
	private $userName;
	private $userPassword;
	private $userHash;
	private $calColor;
	private $firstName;
	private $lastName;
	private $reportsToId;
	private $isAdmin;
	private $currencyId;
	private $description;
	private $dateEntered;
	private $dateModified;
	private $modifiedUserId;
	private $title;
	private $department;
	private $phoneHome;
	private $phoneMobile;
	private $phoneWork;
	private $phoneOther;
	private $phoneFax;
	private $email1;
	private $email2;
	private $secondaryEmail;
	private $status;
	private $signature;
	private $addressStreet;
	private $addressCity;
	private $addressState;
	private $addressCountry;
	private $addressPostalCode;
	private $userPreferences;
	private $tz;
	private $holidays;
	private $namedAys;
	private $workdays;
	private $weeksTart;
	private $dateFormat;
	private $hourFormat;
	private $startHour;
	private $endHour;
	private $activityView;
	private $leadView;
	private $imageName;
	private $deleted;
	private $confirmPassword;
	private $internalMailer;
	private $reminderInterval;
	private $reminderNextTime;
	private $cryptType;
	private $accessKey;
	private $theme;
	private $language;
	private $timeZone;
	private $currencyGroupingPattern;
	private $currencyDecimalSeparator;
	private $currencyGroupingSeparator;
	private $currencySymbolPlacement;

	/**
	 * set value for id 
	 *
	 * type:INT,size:10,default:null,primary,unique,autoincrement
	 *
	 * @param mixed $id
	 * @return VTigerUsers
	 */
	public function &setId($id) {
		$this->notifyChanged(self::FIELD_ID,$this->id,$id);
		$this->id=$id;
		return $this;
	}

	/**
	 * get value for id 
	 *
	 * type:INT,size:10,default:null,primary,unique,autoincrement
	 *
	 * @return mixed
	 */
	public function getId() {
		return $this->id;
	}

	/**
	 * set value for user_name 
	 *
	 * type:VARCHAR,size:255,default:null,index,nullable
	 *
	 * @param mixed $userName
	 * @return VTigerUsers
	 */
	public function &setUserName($userName) {
		$this->notifyChanged(self::FIELD_USER_NAME,$this->userName,$userName);
		$this->userName=$userName;
		return $this;
	}

	/**
	 * get value for user_name 
	 *
	 * type:VARCHAR,size:255,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getUserName() {
		return $this->userName;
	}

	/**
	 * set value for user_password 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @param mixed $userPassword
	 * @return VTigerUsers
	 */
	public function &setUserPassword($userPassword) {
		$this->notifyChanged(self::FIELD_USER_PASSWORD,$this->userPassword,$userPassword);
		$this->userPassword=$userPassword;
		return $this;
	}

	/**
	 * get value for user_password 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getUserPassword() {
		return $this->userPassword;
	}

	/**
	 * set value for user_hash 
	 *
	 * type:VARCHAR,size:32,default:null,nullable
	 *
	 * @param mixed $userHash
	 * @return VTigerUsers
	 */
	public function &setUserHash($userHash) {
		$this->notifyChanged(self::FIELD_USER_HASH,$this->userHash,$userHash);
		$this->userHash=$userHash;
		return $this;
	}

	/**
	 * get value for user_hash 
	 *
	 * type:VARCHAR,size:32,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getUserHash() {
		return $this->userHash;
	}

	/**
	 * set value for cal_color 
	 *
	 * type:VARCHAR,size:25,default:#E6FAD8,nullable
	 *
	 * @param mixed $calColor
	 * @return VTigerUsers
	 */
	public function &setCalColor($calColor) {
		$this->notifyChanged(self::FIELD_CAL_COLOR,$this->calColor,$calColor);
		$this->calColor=$calColor;
		return $this;
	}

	/**
	 * get value for cal_color 
	 *
	 * type:VARCHAR,size:25,default:#E6FAD8,nullable
	 *
	 * @return mixed
	 */
	public function getCalColor() {
		return $this->calColor;
	}

	/**
	 * set value for first_name 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @param mixed $firstName
	 * @return VTigerUsers
	 */
	public function &setFirstName($firstName) {
		$this->notifyChanged(self::FIELD_FIRST_NAME,$this->firstName,$firstName);
		$this->firstName=$firstName;
		return $this;
	}

	/**
	 * get value for first_name 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getFirstName() {
		return $this->firstName;
	}

	/**
	 * set value for last_name 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @param mixed $lastName
	 * @return VTigerUsers
	 */
	public function &setLastName($lastName) {
		$this->notifyChanged(self::FIELD_LAST_NAME,$this->lastName,$lastName);
		$this->lastName=$lastName;
		return $this;
	}

	/**
	 * get value for last_name 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getLastName() {
		return $this->lastName;
	}

	/**
	 * set value for reports_to_id 
	 *
	 * type:VARCHAR,size:36,default:null,nullable
	 *
	 * @param mixed $reportsToId
	 * @return VTigerUsers
	 */
	public function &setReportsToId($reportsToId) {
		$this->notifyChanged(self::FIELD_REPORTS_TO_ID,$this->reportsToId,$reportsToId);
		$this->reportsToId=$reportsToId;
		return $this;
	}

	/**
	 * get value for reports_to_id 
	 *
	 * type:VARCHAR,size:36,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getReportsToId() {
		return $this->reportsToId;
	}

	/**
	 * set value for is_admin 
	 *
	 * type:VARCHAR,size:3,default:0,nullable
	 *
	 * @param mixed $isAdmin
	 * @return VTigerUsers
	 */
	public function &setIsAdmin($isAdmin) {
		$this->notifyChanged(self::FIELD_IS_ADMIN,$this->isAdmin,$isAdmin);
		$this->isAdmin=$isAdmin;
		return $this;
	}

	/**
	 * get value for is_admin 
	 *
	 * type:VARCHAR,size:3,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getIsAdmin() {
		return $this->isAdmin;
	}

	/**
	 * set value for currency_id 
	 *
	 * type:INT,size:10,default:1
	 *
	 * @param mixed $currencyId
	 * @return VTigerUsers
	 */
	public function &setCurrencyId($currencyId) {
		$this->notifyChanged(self::FIELD_CURRENCY_ID,$this->currencyId,$currencyId);
		$this->currencyId=$currencyId;
		return $this;
	}

	/**
	 * get value for currency_id 
	 *
	 * type:INT,size:10,default:1
	 *
	 * @return mixed
	 */
	public function getCurrencyId() {
		return $this->currencyId;
	}

	/**
	 * set value for description 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @param mixed $description
	 * @return VTigerUsers
	 */
	public function &setDescription($description) {
		$this->notifyChanged(self::FIELD_DESCRIPTION,$this->description,$description);
		$this->description=$description;
		return $this;
	}

	/**
	 * get value for description 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDescription() {
		return $this->description;
	}

	/**
	 * set value for date_entered 
	 *
	 * type:TIMESTAMP,size:19,default:CURRENT_TIMESTAMP
	 *
	 * @param mixed $dateEntered
	 * @return VTigerUsers
	 */
	public function &setDateEntered($dateEntered) {
		$this->notifyChanged(self::FIELD_DATE_ENTERED,$this->dateEntered,$dateEntered);
		$this->dateEntered=$dateEntered;
		return $this;
	}

	/**
	 * get value for date_entered 
	 *
	 * type:TIMESTAMP,size:19,default:CURRENT_TIMESTAMP
	 *
	 * @return mixed
	 */
	public function getDateEntered() {
		return $this->dateEntered;
	}

	/**
	 * set value for date_modified 
	 *
	 * type:TIMESTAMP,size:19,default:0000-00-00 00:00:00
	 *
	 * @param mixed $dateModified
	 * @return VTigerUsers
	 */
	public function &setDateModified($dateModified) {
		$this->notifyChanged(self::FIELD_DATE_MODIFIED,$this->dateModified,$dateModified);
		$this->dateModified=$dateModified;
		return $this;
	}

	/**
	 * get value for date_modified 
	 *
	 * type:TIMESTAMP,size:19,default:0000-00-00 00:00:00
	 *
	 * @return mixed
	 */
	public function getDateModified() {
		return $this->dateModified;
	}

	/**
	 * set value for modified_user_id 
	 *
	 * type:VARCHAR,size:36,default:null,nullable
	 *
	 * @param mixed $modifiedUserId
	 * @return VTigerUsers
	 */
	public function &setModifiedUserId($modifiedUserId) {
		$this->notifyChanged(self::FIELD_MODIFIED_USER_ID,$this->modifiedUserId,$modifiedUserId);
		$this->modifiedUserId=$modifiedUserId;
		return $this;
	}

	/**
	 * get value for modified_user_id 
	 *
	 * type:VARCHAR,size:36,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getModifiedUserId() {
		return $this->modifiedUserId;
	}

	/**
	 * set value for title 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $title
	 * @return VTigerUsers
	 */
	public function &setTitle($title) {
		$this->notifyChanged(self::FIELD_TITLE,$this->title,$title);
		$this->title=$title;
		return $this;
	}

	/**
	 * get value for title 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTitle() {
		return $this->title;
	}

	/**
	 * set value for department 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $department
	 * @return VTigerUsers
	 */
	public function &setDepartment($department) {
		$this->notifyChanged(self::FIELD_DEPARTMENT,$this->department,$department);
		$this->department=$department;
		return $this;
	}

	/**
	 * get value for department 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDepartment() {
		return $this->department;
	}

	/**
	 * set value for phone_home 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $phoneHome
	 * @return VTigerUsers
	 */
	public function &setPhoneHome($phoneHome) {
		$this->notifyChanged(self::FIELD_PHONE_HOME,$this->phoneHome,$phoneHome);
		$this->phoneHome=$phoneHome;
		return $this;
	}

	/**
	 * get value for phone_home 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPhoneHome() {
		return $this->phoneHome;
	}

	/**
	 * set value for phone_mobile 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $phoneMobile
	 * @return VTigerUsers
	 */
	public function &setPhoneMobile($phoneMobile) {
		$this->notifyChanged(self::FIELD_PHONE_MOBILE,$this->phoneMobile,$phoneMobile);
		$this->phoneMobile=$phoneMobile;
		return $this;
	}

	/**
	 * get value for phone_mobile 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPhoneMobile() {
		return $this->phoneMobile;
	}

	/**
	 * set value for phone_work 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $phoneWork
	 * @return VTigerUsers
	 */
	public function &setPhoneWork($phoneWork) {
		$this->notifyChanged(self::FIELD_PHONE_WORK,$this->phoneWork,$phoneWork);
		$this->phoneWork=$phoneWork;
		return $this;
	}

	/**
	 * get value for phone_work 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPhoneWork() {
		return $this->phoneWork;
	}

	/**
	 * set value for phone_other 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $phoneOther
	 * @return VTigerUsers
	 */
	public function &setPhoneOther($phoneOther) {
		$this->notifyChanged(self::FIELD_PHONE_OTHER,$this->phoneOther,$phoneOther);
		$this->phoneOther=$phoneOther;
		return $this;
	}

	/**
	 * get value for phone_other 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPhoneOther() {
		return $this->phoneOther;
	}

	/**
	 * set value for phone_fax 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $phoneFax
	 * @return VTigerUsers
	 */
	public function &setPhoneFax($phoneFax) {
		$this->notifyChanged(self::FIELD_PHONE_FAX,$this->phoneFax,$phoneFax);
		$this->phoneFax=$phoneFax;
		return $this;
	}

	/**
	 * get value for phone_fax 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPhoneFax() {
		return $this->phoneFax;
	}

	/**
	 * set value for email1 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $email1
	 * @return VTigerUsers
	 */
	public function &setEmail1($email1) {
		$this->notifyChanged(self::FIELD_EMAIL1,$this->email1,$email1);
		$this->email1=$email1;
		return $this;
	}

	/**
	 * get value for email1 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getEmail1() {
		return $this->email1;
	}

	/**
	 * set value for email2 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $email2
	 * @return VTigerUsers
	 */
	public function &setEmail2($email2) {
		$this->notifyChanged(self::FIELD_EMAIL2,$this->email2,$email2);
		$this->email2=$email2;
		return $this;
	}

	/**
	 * get value for email2 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getEmail2() {
		return $this->email2;
	}

	/**
	 * set value for secondaryemail 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $secondaryEmail
	 * @return VTigerUsers
	 */
	public function &setSecondaryEmail($secondaryEmail) {
		$this->notifyChanged(self::FIELD_SECONDARYEMAIL,$this->secondaryEmail,$secondaryEmail);
		$this->secondaryEmail=$secondaryEmail;
		return $this;
	}

	/**
	 * get value for secondaryemail 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSecondaryEmail() {
		return $this->secondaryEmail;
	}

	/**
	 * set value for status 
	 *
	 * type:VARCHAR,size:25,default:null,nullable
	 *
	 * @param mixed $status
	 * @return VTigerUsers
	 */
	public function &setStatus($status) {
		$this->notifyChanged(self::FIELD_STATUS,$this->status,$status);
		$this->status=$status;
		return $this;
	}

	/**
	 * get value for status 
	 *
	 * type:VARCHAR,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getStatus() {
		return $this->status;
	}

	/**
	 * set value for signature 
	 *
	 * type:VARCHAR,size:1000,default:null,nullable
	 *
	 * @param mixed $signature
	 * @return VTigerUsers
	 */
	public function &setSignature($signature) {
		$this->notifyChanged(self::FIELD_SIGNATURE,$this->signature,$signature);
		$this->signature=$signature;
		return $this;
	}

	/**
	 * get value for signature 
	 *
	 * type:VARCHAR,size:1000,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSignature() {
		return $this->signature;
	}

	/**
	 * set value for address_street 
	 *
	 * type:VARCHAR,size:150,default:null,nullable
	 *
	 * @param mixed $addressStreet
	 * @return VTigerUsers
	 */
	public function &setAddressStreet($addressStreet) {
		$this->notifyChanged(self::FIELD_ADDRESS_STREET,$this->addressStreet,$addressStreet);
		$this->addressStreet=$addressStreet;
		return $this;
	}

	/**
	 * get value for address_street 
	 *
	 * type:VARCHAR,size:150,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getAddressStreet() {
		return $this->addressStreet;
	}

	/**
	 * set value for address_city 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $addressCity
	 * @return VTigerUsers
	 */
	public function &setAddressCity($addressCity) {
		$this->notifyChanged(self::FIELD_ADDRESS_CITY,$this->addressCity,$addressCity);
		$this->addressCity=$addressCity;
		return $this;
	}

	/**
	 * get value for address_city 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getAddressCity() {
		return $this->addressCity;
	}

	/**
	 * set value for address_state 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $addressState
	 * @return VTigerUsers
	 */
	public function &setAddressState($addressState) {
		$this->notifyChanged(self::FIELD_ADDRESS_STATE,$this->addressState,$addressState);
		$this->addressState=$addressState;
		return $this;
	}

	/**
	 * get value for address_state 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getAddressState() {
		return $this->addressState;
	}

	/**
	 * set value for address_country 
	 *
	 * type:VARCHAR,size:25,default:null,nullable
	 *
	 * @param mixed $addressCountry
	 * @return VTigerUsers
	 */
	public function &setAddressCountry($addressCountry) {
		$this->notifyChanged(self::FIELD_ADDRESS_COUNTRY,$this->addressCountry,$addressCountry);
		$this->addressCountry=$addressCountry;
		return $this;
	}

	/**
	 * get value for address_country 
	 *
	 * type:VARCHAR,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getAddressCountry() {
		return $this->addressCountry;
	}

	/**
	 * set value for address_postalcode 
	 *
	 * type:VARCHAR,size:9,default:null,nullable
	 *
	 * @param mixed $addressPostalCode
	 * @return VTigerUsers
	 */
	public function &setAddressPostalCode($addressPostalCode) {
		$this->notifyChanged(self::FIELD_ADDRESS_POSTALCODE,$this->addressPostalCode,$addressPostalCode);
		$this->addressPostalCode=$addressPostalCode;
		return $this;
	}

	/**
	 * get value for address_postalcode 
	 *
	 * type:VARCHAR,size:9,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getAddressPostalCode() {
		return $this->addressPostalCode;
	}

	/**
	 * set value for user_preferences 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @param mixed $userPreferences
	 * @return VTigerUsers
	 */
	public function &setUserPreferences($userPreferences) {
		$this->notifyChanged(self::FIELD_USER_PREFERENCES,$this->userPreferences,$userPreferences);
		$this->userPreferences=$userPreferences;
		return $this;
	}

	/**
	 * get value for user_preferences 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getUserPreferences() {
		return $this->userPreferences;
	}

	/**
	 * set value for tz 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @param mixed $tz
	 * @return VTigerUsers
	 */
	public function &setTz($tz) {
		$this->notifyChanged(self::FIELD_TZ,$this->tz,$tz);
		$this->tz=$tz;
		return $this;
	}

	/**
	 * get value for tz 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTz() {
		return $this->tz;
	}

	/**
	 * set value for holidays 
	 *
	 * type:VARCHAR,size:60,default:null,nullable
	 *
	 * @param mixed $holidays
	 * @return VTigerUsers
	 */
	public function &setHolidays($holidays) {
		$this->notifyChanged(self::FIELD_HOLIDAYS,$this->holidays,$holidays);
		$this->holidays=$holidays;
		return $this;
	}

	/**
	 * get value for holidays 
	 *
	 * type:VARCHAR,size:60,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getHolidays() {
		return $this->holidays;
	}

	/**
	 * set value for namedays 
	 *
	 * type:VARCHAR,size:60,default:null,nullable
	 *
	 * @param mixed $namedAys
	 * @return VTigerUsers
	 */
	public function &setNamedAys($namedAys) {
		$this->notifyChanged(self::FIELD_NAMEDAYS,$this->namedAys,$namedAys);
		$this->namedAys=$namedAys;
		return $this;
	}

	/**
	 * get value for namedays 
	 *
	 * type:VARCHAR,size:60,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getNamedAys() {
		return $this->namedAys;
	}

	/**
	 * set value for workdays 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @param mixed $workdays
	 * @return VTigerUsers
	 */
	public function &setWorkdays($workdays) {
		$this->notifyChanged(self::FIELD_WORKDAYS,$this->workdays,$workdays);
		$this->workdays=$workdays;
		return $this;
	}

	/**
	 * get value for workdays 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getWorkdays() {
		return $this->workdays;
	}

	/**
	 * set value for weekstart 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $weeksTart
	 * @return VTigerUsers
	 */
	public function &setWeeksTart($weeksTart) {
		$this->notifyChanged(self::FIELD_WEEKSTART,$this->weeksTart,$weeksTart);
		$this->weeksTart=$weeksTart;
		return $this;
	}

	/**
	 * get value for weekstart 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getWeeksTart() {
		return $this->weeksTart;
	}

	/**
	 * set value for date_format 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $dateFormat
	 * @return VTigerUsers
	 */
	public function &setDateFormat($dateFormat) {
		$this->notifyChanged(self::FIELD_DATE_FORMAT,$this->dateFormat,$dateFormat);
		$this->dateFormat=$dateFormat;
		return $this;
	}

	/**
	 * get value for date_format 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDateFormat() {
		return $this->dateFormat;
	}

	/**
	 * set value for hour_format 
	 *
	 * type:VARCHAR,size:30,default:am/pm,nullable
	 *
	 * @param mixed $hourFormat
	 * @return VTigerUsers
	 */
	public function &setHourFormat($hourFormat) {
		$this->notifyChanged(self::FIELD_HOUR_FORMAT,$this->hourFormat,$hourFormat);
		$this->hourFormat=$hourFormat;
		return $this;
	}

	/**
	 * get value for hour_format 
	 *
	 * type:VARCHAR,size:30,default:am/pm,nullable
	 *
	 * @return mixed
	 */
	public function getHourFormat() {
		return $this->hourFormat;
	}

	/**
	 * set value for start_hour 
	 *
	 * type:VARCHAR,size:30,default:10:00,nullable
	 *
	 * @param mixed $startHour
	 * @return VTigerUsers
	 */
	public function &setStartHour($startHour) {
		$this->notifyChanged(self::FIELD_START_HOUR,$this->startHour,$startHour);
		$this->startHour=$startHour;
		return $this;
	}

	/**
	 * get value for start_hour 
	 *
	 * type:VARCHAR,size:30,default:10:00,nullable
	 *
	 * @return mixed
	 */
	public function getStartHour() {
		return $this->startHour;
	}

	/**
	 * set value for end_hour 
	 *
	 * type:VARCHAR,size:30,default:23:00,nullable
	 *
	 * @param mixed $endHour
	 * @return VTigerUsers
	 */
	public function &setEndHour($endHour) {
		$this->notifyChanged(self::FIELD_END_HOUR,$this->endHour,$endHour);
		$this->endHour=$endHour;
		return $this;
	}

	/**
	 * get value for end_hour 
	 *
	 * type:VARCHAR,size:30,default:23:00,nullable
	 *
	 * @return mixed
	 */
	public function getEndHour() {
		return $this->endHour;
	}

	/**
	 * set value for activity_view 
	 *
	 * type:VARCHAR,size:200,default:Today,nullable
	 *
	 * @param mixed $activityView
	 * @return VTigerUsers
	 */
	public function &setActivityView($activityView) {
		$this->notifyChanged(self::FIELD_ACTIVITY_VIEW,$this->activityView,$activityView);
		$this->activityView=$activityView;
		return $this;
	}

	/**
	 * get value for activity_view 
	 *
	 * type:VARCHAR,size:200,default:Today,nullable
	 *
	 * @return mixed
	 */
	public function getActivityView() {
		return $this->activityView;
	}

	/**
	 * set value for lead_view 
	 *
	 * type:VARCHAR,size:200,default:Today,nullable
	 *
	 * @param mixed $leadView
	 * @return VTigerUsers
	 */
	public function &setLeadView($leadView) {
		$this->notifyChanged(self::FIELD_LEAD_VIEW,$this->leadView,$leadView);
		$this->leadView=$leadView;
		return $this;
	}

	/**
	 * get value for lead_view 
	 *
	 * type:VARCHAR,size:200,default:Today,nullable
	 *
	 * @return mixed
	 */
	public function getLeadView() {
		return $this->leadView;
	}

	/**
	 * set value for imagename 
	 *
	 * type:VARCHAR,size:250,default:null,nullable
	 *
	 * @param mixed $imageName
	 * @return VTigerUsers
	 */
	public function &setImageName($imageName) {
		$this->notifyChanged(self::FIELD_IMAGENAME,$this->imageName,$imageName);
		$this->imageName=$imageName;
		return $this;
	}

	/**
	 * get value for imagename 
	 *
	 * type:VARCHAR,size:250,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getImageName() {
		return $this->imageName;
	}

	/**
	 * set value for deleted 
	 *
	 * type:INT,size:10,default:0
	 *
	 * @param mixed $deleted
	 * @return VTigerUsers
	 */
	public function &setDeleted($deleted) {
		$this->notifyChanged(self::FIELD_DELETED,$this->deleted,$deleted);
		$this->deleted=$deleted;
		return $this;
	}

	/**
	 * get value for deleted 
	 *
	 * type:INT,size:10,default:0
	 *
	 * @return mixed
	 */
	public function getDeleted() {
		return $this->deleted;
	}

	/**
	 * set value for confirm_password 
	 *
	 * type:VARCHAR,size:300,default:null,nullable
	 *
	 * @param mixed $confirmPassword
	 * @return VTigerUsers
	 */
	public function &setConfirmPassword($confirmPassword) {
		$this->notifyChanged(self::FIELD_CONFIRM_PASSWORD,$this->confirmPassword,$confirmPassword);
		$this->confirmPassword=$confirmPassword;
		return $this;
	}

	/**
	 * get value for confirm_password 
	 *
	 * type:VARCHAR,size:300,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getConfirmPassword() {
		return $this->confirmPassword;
	}

	/**
	 * set value for internal_mailer 
	 *
	 * type:VARCHAR,size:3,default:1
	 *
	 * @param mixed $internalMailer
	 * @return VTigerUsers
	 */
	public function &setInternalMailer($internalMailer) {
		$this->notifyChanged(self::FIELD_INTERNAL_MAILER,$this->internalMailer,$internalMailer);
		$this->internalMailer=$internalMailer;
		return $this;
	}

	/**
	 * get value for internal_mailer 
	 *
	 * type:VARCHAR,size:3,default:1
	 *
	 * @return mixed
	 */
	public function getInternalMailer() {
		return $this->internalMailer;
	}

	/**
	 * set value for reminder_interval 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $reminderInterval
	 * @return VTigerUsers
	 */
	public function &setReminderInterval($reminderInterval) {
		$this->notifyChanged(self::FIELD_REMINDER_INTERVAL,$this->reminderInterval,$reminderInterval);
		$this->reminderInterval=$reminderInterval;
		return $this;
	}

	/**
	 * get value for reminder_interval 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getReminderInterval() {
		return $this->reminderInterval;
	}

	/**
	 * set value for reminder_next_time 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $reminderNextTime
	 * @return VTigerUsers
	 */
	public function &setReminderNextTime($reminderNextTime) {
		$this->notifyChanged(self::FIELD_REMINDER_NEXT_TIME,$this->reminderNextTime,$reminderNextTime);
		$this->reminderNextTime=$reminderNextTime;
		return $this;
	}

	/**
	 * get value for reminder_next_time 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getReminderNextTime() {
		return $this->reminderNextTime;
	}

	/**
	 * set value for crypt_type 
	 *
	 * type:VARCHAR,size:20,default:MD5
	 *
	 * @param mixed $cryptType
	 * @return VTigerUsers
	 */
	public function &setCryptType($cryptType) {
		$this->notifyChanged(self::FIELD_CRYPT_TYPE,$this->cryptType,$cryptType);
		$this->cryptType=$cryptType;
		return $this;
	}

	/**
	 * get value for crypt_type 
	 *
	 * type:VARCHAR,size:20,default:MD5
	 *
	 * @return mixed
	 */
	public function getCryptType() {
		return $this->cryptType;
	}

	/**
	 * set value for accesskey 
	 *
	 * type:VARCHAR,size:36,default:null,nullable
	 *
	 * @param mixed $accessKey
	 * @return VTigerUsers
	 */
	public function &setAccessKey($accessKey) {
		$this->notifyChanged(self::FIELD_ACCESSKEY,$this->accessKey,$accessKey);
		$this->accessKey=$accessKey;
		return $this;
	}

	/**
	 * get value for accesskey 
	 *
	 * type:VARCHAR,size:36,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getAccessKey() {
		return $this->accessKey;
	}

	/**
	 * set value for theme 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $theme
	 * @return VTigerUsers
	 */
	public function &setTheme($theme) {
		$this->notifyChanged(self::FIELD_THEME,$this->theme,$theme);
		$this->theme=$theme;
		return $this;
	}

	/**
	 * get value for theme 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTheme() {
		return $this->theme;
	}

	/**
	 * set value for language 
	 *
	 * type:VARCHAR,size:36,default:null,nullable
	 *
	 * @param mixed $language
	 * @return VTigerUsers
	 */
	public function &setLanguage($language) {
		$this->notifyChanged(self::FIELD_LANGUAGE,$this->language,$language);
		$this->language=$language;
		return $this;
	}

	/**
	 * get value for language 
	 *
	 * type:VARCHAR,size:36,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getLanguage() {
		return $this->language;
	}

	/**
	 * set value for time_zone 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $timeZone
	 * @return VTigerUsers
	 */
	public function &setTimeZone($timeZone) {
		$this->notifyChanged(self::FIELD_TIME_ZONE,$this->timeZone,$timeZone);
		$this->timeZone=$timeZone;
		return $this;
	}

	/**
	 * get value for time_zone 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTimeZone() {
		return $this->timeZone;
	}

	/**
	 * set value for currency_grouping_pattern 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $currencyGroupingPattern
	 * @return VTigerUsers
	 */
	public function &setCurrencyGroupingPattern($currencyGroupingPattern) {
		$this->notifyChanged(self::FIELD_CURRENCY_GROUPING_PATTERN,$this->currencyGroupingPattern,$currencyGroupingPattern);
		$this->currencyGroupingPattern=$currencyGroupingPattern;
		return $this;
	}

	/**
	 * get value for currency_grouping_pattern 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getCurrencyGroupingPattern() {
		return $this->currencyGroupingPattern;
	}

	/**
	 * set value for currency_decimal_separator 
	 *
	 * type:VARCHAR,size:2,default:null,nullable
	 *
	 * @param mixed $currencyDecimalSeparator
	 * @return VTigerUsers
	 */
	public function &setCurrencyDecimalSeparator($currencyDecimalSeparator) {
		$this->notifyChanged(self::FIELD_CURRENCY_DECIMAL_SEPARATOR,$this->currencyDecimalSeparator,$currencyDecimalSeparator);
		$this->currencyDecimalSeparator=$currencyDecimalSeparator;
		return $this;
	}

	/**
	 * get value for currency_decimal_separator 
	 *
	 * type:VARCHAR,size:2,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getCurrencyDecimalSeparator() {
		return $this->currencyDecimalSeparator;
	}

	/**
	 * set value for currency_grouping_separator 
	 *
	 * type:VARCHAR,size:2,default:null,nullable
	 *
	 * @param mixed $currencyGroupingSeparator
	 * @return VTigerUsers
	 */
	public function &setCurrencyGroupingSeparator($currencyGroupingSeparator) {
		$this->notifyChanged(self::FIELD_CURRENCY_GROUPING_SEPARATOR,$this->currencyGroupingSeparator,$currencyGroupingSeparator);
		$this->currencyGroupingSeparator=$currencyGroupingSeparator;
		return $this;
	}

	/**
	 * get value for currency_grouping_separator 
	 *
	 * type:VARCHAR,size:2,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getCurrencyGroupingSeparator() {
		return $this->currencyGroupingSeparator;
	}

	/**
	 * set value for currency_symbol_placement 
	 *
	 * type:VARCHAR,size:20,default:null,nullable
	 *
	 * @param mixed $currencySymbolPlacement
	 * @return VTigerUsers
	 */
	public function &setCurrencySymbolPlacement($currencySymbolPlacement) {
		$this->notifyChanged(self::FIELD_CURRENCY_SYMBOL_PLACEMENT,$this->currencySymbolPlacement,$currencySymbolPlacement);
		$this->currencySymbolPlacement=$currencySymbolPlacement;
		return $this;
	}

	/**
	 * get value for currency_symbol_placement 
	 *
	 * type:VARCHAR,size:20,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getCurrencySymbolPlacement() {
		return $this->currencySymbolPlacement;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_ID=>$this->getId(),
			self::FIELD_USER_NAME=>$this->getUserName(),
			self::FIELD_USER_PASSWORD=>$this->getUserPassword(),
			self::FIELD_USER_HASH=>$this->getUserHash(),
			self::FIELD_CAL_COLOR=>$this->getCalColor(),
			self::FIELD_FIRST_NAME=>$this->getFirstName(),
			self::FIELD_LAST_NAME=>$this->getLastName(),
			self::FIELD_REPORTS_TO_ID=>$this->getReportsToId(),
			self::FIELD_IS_ADMIN=>$this->getIsAdmin(),
			self::FIELD_CURRENCY_ID=>$this->getCurrencyId(),
			self::FIELD_DESCRIPTION=>$this->getDescription(),
			self::FIELD_DATE_ENTERED=>$this->getDateEntered(),
			self::FIELD_DATE_MODIFIED=>$this->getDateModified(),
			self::FIELD_MODIFIED_USER_ID=>$this->getModifiedUserId(),
			self::FIELD_TITLE=>$this->getTitle(),
			self::FIELD_DEPARTMENT=>$this->getDepartment(),
			self::FIELD_PHONE_HOME=>$this->getPhoneHome(),
			self::FIELD_PHONE_MOBILE=>$this->getPhoneMobile(),
			self::FIELD_PHONE_WORK=>$this->getPhoneWork(),
			self::FIELD_PHONE_OTHER=>$this->getPhoneOther(),
			self::FIELD_PHONE_FAX=>$this->getPhoneFax(),
			self::FIELD_EMAIL1=>$this->getEmail1(),
			self::FIELD_EMAIL2=>$this->getEmail2(),
			self::FIELD_SECONDARYEMAIL=>$this->getSecondaryEmail(),
			self::FIELD_STATUS=>$this->getStatus(),
			self::FIELD_SIGNATURE=>$this->getSignature(),
			self::FIELD_ADDRESS_STREET=>$this->getAddressStreet(),
			self::FIELD_ADDRESS_CITY=>$this->getAddressCity(),
			self::FIELD_ADDRESS_STATE=>$this->getAddressState(),
			self::FIELD_ADDRESS_COUNTRY=>$this->getAddressCountry(),
			self::FIELD_ADDRESS_POSTALCODE=>$this->getAddressPostalCode(),
			self::FIELD_USER_PREFERENCES=>$this->getUserPreferences(),
			self::FIELD_TZ=>$this->getTz(),
			self::FIELD_HOLIDAYS=>$this->getHolidays(),
			self::FIELD_NAMEDAYS=>$this->getNamedAys(),
			self::FIELD_WORKDAYS=>$this->getWorkdays(),
			self::FIELD_WEEKSTART=>$this->getWeeksTart(),
			self::FIELD_DATE_FORMAT=>$this->getDateFormat(),
			self::FIELD_HOUR_FORMAT=>$this->getHourFormat(),
			self::FIELD_START_HOUR=>$this->getStartHour(),
			self::FIELD_END_HOUR=>$this->getEndHour(),
			self::FIELD_ACTIVITY_VIEW=>$this->getActivityView(),
			self::FIELD_LEAD_VIEW=>$this->getLeadView(),
			self::FIELD_IMAGENAME=>$this->getImageName(),
			self::FIELD_DELETED=>$this->getDeleted(),
			self::FIELD_CONFIRM_PASSWORD=>$this->getConfirmPassword(),
			self::FIELD_INTERNAL_MAILER=>$this->getInternalMailer(),
			self::FIELD_REMINDER_INTERVAL=>$this->getReminderInterval(),
			self::FIELD_REMINDER_NEXT_TIME=>$this->getReminderNextTime(),
			self::FIELD_CRYPT_TYPE=>$this->getCryptType(),
			self::FIELD_ACCESSKEY=>$this->getAccessKey(),
			self::FIELD_THEME=>$this->getTheme(),
			self::FIELD_LANGUAGE=>$this->getLanguage(),
			self::FIELD_TIME_ZONE=>$this->getTimeZone(),
			self::FIELD_CURRENCY_GROUPING_PATTERN=>$this->getCurrencyGroupingPattern(),
			self::FIELD_CURRENCY_DECIMAL_SEPARATOR=>$this->getCurrencyDecimalSeparator(),
			self::FIELD_CURRENCY_GROUPING_SEPARATOR=>$this->getCurrencyGroupingSeparator(),
			self::FIELD_CURRENCY_SYMBOL_PLACEMENT=>$this->getCurrencySymbolPlacement());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_ID=>$this->getId());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerUsers instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerUsers $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerUsers[]
	 */
	public static function findByExample(PDO $db,VTigerUsers $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerUsers instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerUsers[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_users`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerUsers instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerUsers[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerUsers instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerUsers[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerUsers();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerUsers instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerUsers[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_users`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setId($result['id']);
		$this->setUserName($result['user_name']);
		$this->setUserPassword($result['user_password']);
		$this->setUserHash($result['user_hash']);
		$this->setCalColor($result['cal_color']);
		$this->setFirstName($result['first_name']);
		$this->setLastName($result['last_name']);
		$this->setReportsToId($result['reports_to_id']);
		$this->setIsAdmin($result['is_admin']);
		$this->setCurrencyId($result['currency_id']);
		$this->setDescription($result['description']);
		$this->setDateEntered($result['date_entered']);
		$this->setDateModified($result['date_modified']);
		$this->setModifiedUserId($result['modified_user_id']);
		$this->setTitle($result['title']);
		$this->setDepartment($result['department']);
		$this->setPhoneHome($result['phone_home']);
		$this->setPhoneMobile($result['phone_mobile']);
		$this->setPhoneWork($result['phone_work']);
		$this->setPhoneOther($result['phone_other']);
		$this->setPhoneFax($result['phone_fax']);
		$this->setEmail1($result['email1']);
		$this->setEmail2($result['email2']);
		$this->setSecondaryEmail($result['secondaryemail']);
		$this->setStatus($result['status']);
		$this->setSignature($result['signature']);
		$this->setAddressStreet($result['address_street']);
		$this->setAddressCity($result['address_city']);
		$this->setAddressState($result['address_state']);
		$this->setAddressCountry($result['address_country']);
		$this->setAddressPostalCode($result['address_postalcode']);
		$this->setUserPreferences($result['user_preferences']);
		$this->setTz($result['tz']);
		$this->setHolidays($result['holidays']);
		$this->setNamedAys($result['namedays']);
		$this->setWorkdays($result['workdays']);
		$this->setWeeksTart($result['weekstart']);
		$this->setDateFormat($result['date_format']);
		$this->setHourFormat($result['hour_format']);
		$this->setStartHour($result['start_hour']);
		$this->setEndHour($result['end_hour']);
		$this->setActivityView($result['activity_view']);
		$this->setLeadView($result['lead_view']);
		$this->setImageName($result['imagename']);
		$this->setDeleted($result['deleted']);
		$this->setConfirmPassword($result['confirm_password']);
		$this->setInternalMailer($result['internal_mailer']);
		$this->setReminderInterval($result['reminder_interval']);
		$this->setReminderNextTime($result['reminder_next_time']);
		$this->setCryptType($result['crypt_type']);
		$this->setAccessKey($result['accesskey']);
		$this->setTheme($result['theme']);
		$this->setLanguage($result['language']);
		$this->setTimeZone($result['time_zone']);
		$this->setCurrencyGroupingPattern($result['currency_grouping_pattern']);
		$this->setCurrencyDecimalSeparator($result['currency_decimal_separator']);
		$this->setCurrencyGroupingSeparator($result['currency_grouping_separator']);
		$this->setCurrencySymbolPlacement($result['currency_symbol_placement']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerUsers
	 */
	public static function findById(PDO $db,$id) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$id);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerUsers();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getId());
		$stmt->bindValue(2,$this->getUserName());
		$stmt->bindValue(3,$this->getUserPassword());
		$stmt->bindValue(4,$this->getUserHash());
		$stmt->bindValue(5,$this->getCalColor());
		$stmt->bindValue(6,$this->getFirstName());
		$stmt->bindValue(7,$this->getLastName());
		$stmt->bindValue(8,$this->getReportsToId());
		$stmt->bindValue(9,$this->getIsAdmin());
		$stmt->bindValue(10,$this->getCurrencyId());
		$stmt->bindValue(11,$this->getDescription());
		$stmt->bindValue(12,$this->getDateEntered());
		$stmt->bindValue(13,$this->getDateModified());
		$stmt->bindValue(14,$this->getModifiedUserId());
		$stmt->bindValue(15,$this->getTitle());
		$stmt->bindValue(16,$this->getDepartment());
		$stmt->bindValue(17,$this->getPhoneHome());
		$stmt->bindValue(18,$this->getPhoneMobile());
		$stmt->bindValue(19,$this->getPhoneWork());
		$stmt->bindValue(20,$this->getPhoneOther());
		$stmt->bindValue(21,$this->getPhoneFax());
		$stmt->bindValue(22,$this->getEmail1());
		$stmt->bindValue(23,$this->getEmail2());
		$stmt->bindValue(24,$this->getSecondaryEmail());
		$stmt->bindValue(25,$this->getStatus());
		$stmt->bindValue(26,$this->getSignature());
		$stmt->bindValue(27,$this->getAddressStreet());
		$stmt->bindValue(28,$this->getAddressCity());
		$stmt->bindValue(29,$this->getAddressState());
		$stmt->bindValue(30,$this->getAddressCountry());
		$stmt->bindValue(31,$this->getAddressPostalCode());
		$stmt->bindValue(32,$this->getUserPreferences());
		$stmt->bindValue(33,$this->getTz());
		$stmt->bindValue(34,$this->getHolidays());
		$stmt->bindValue(35,$this->getNamedAys());
		$stmt->bindValue(36,$this->getWorkdays());
		$stmt->bindValue(37,$this->getWeeksTart());
		$stmt->bindValue(38,$this->getDateFormat());
		$stmt->bindValue(39,$this->getHourFormat());
		$stmt->bindValue(40,$this->getStartHour());
		$stmt->bindValue(41,$this->getEndHour());
		$stmt->bindValue(42,$this->getActivityView());
		$stmt->bindValue(43,$this->getLeadView());
		$stmt->bindValue(44,$this->getImageName());
		$stmt->bindValue(45,$this->getDeleted());
		$stmt->bindValue(46,$this->getConfirmPassword());
		$stmt->bindValue(47,$this->getInternalMailer());
		$stmt->bindValue(48,$this->getReminderInterval());
		$stmt->bindValue(49,$this->getReminderNextTime());
		$stmt->bindValue(50,$this->getCryptType());
		$stmt->bindValue(51,$this->getAccessKey());
		$stmt->bindValue(52,$this->getTheme());
		$stmt->bindValue(53,$this->getLanguage());
		$stmt->bindValue(54,$this->getTimeZone());
		$stmt->bindValue(55,$this->getCurrencyGroupingPattern());
		$stmt->bindValue(56,$this->getCurrencyDecimalSeparator());
		$stmt->bindValue(57,$this->getCurrencyGroupingSeparator());
		$stmt->bindValue(58,$this->getCurrencySymbolPlacement());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		if (null===$this->getId()) {
			$stmt=self::prepareStatement($db,self::SQL_INSERT_AUTOINCREMENT);
			$stmt->bindValue(1,$this->getUserName());
			$stmt->bindValue(2,$this->getUserPassword());
			$stmt->bindValue(3,$this->getUserHash());
			$stmt->bindValue(4,$this->getCalColor());
			$stmt->bindValue(5,$this->getFirstName());
			$stmt->bindValue(6,$this->getLastName());
			$stmt->bindValue(7,$this->getReportsToId());
			$stmt->bindValue(8,$this->getIsAdmin());
			$stmt->bindValue(9,$this->getCurrencyId());
			$stmt->bindValue(10,$this->getDescription());
			$stmt->bindValue(11,$this->getDateEntered());
			$stmt->bindValue(12,$this->getDateModified());
			$stmt->bindValue(13,$this->getModifiedUserId());
			$stmt->bindValue(14,$this->getTitle());
			$stmt->bindValue(15,$this->getDepartment());
			$stmt->bindValue(16,$this->getPhoneHome());
			$stmt->bindValue(17,$this->getPhoneMobile());
			$stmt->bindValue(18,$this->getPhoneWork());
			$stmt->bindValue(19,$this->getPhoneOther());
			$stmt->bindValue(20,$this->getPhoneFax());
			$stmt->bindValue(21,$this->getEmail1());
			$stmt->bindValue(22,$this->getEmail2());
			$stmt->bindValue(23,$this->getSecondaryEmail());
			$stmt->bindValue(24,$this->getStatus());
			$stmt->bindValue(25,$this->getSignature());
			$stmt->bindValue(26,$this->getAddressStreet());
			$stmt->bindValue(27,$this->getAddressCity());
			$stmt->bindValue(28,$this->getAddressState());
			$stmt->bindValue(29,$this->getAddressCountry());
			$stmt->bindValue(30,$this->getAddressPostalCode());
			$stmt->bindValue(31,$this->getUserPreferences());
			$stmt->bindValue(32,$this->getTz());
			$stmt->bindValue(33,$this->getHolidays());
			$stmt->bindValue(34,$this->getNamedAys());
			$stmt->bindValue(35,$this->getWorkdays());
			$stmt->bindValue(36,$this->getWeeksTart());
			$stmt->bindValue(37,$this->getDateFormat());
			$stmt->bindValue(38,$this->getHourFormat());
			$stmt->bindValue(39,$this->getStartHour());
			$stmt->bindValue(40,$this->getEndHour());
			$stmt->bindValue(41,$this->getActivityView());
			$stmt->bindValue(42,$this->getLeadView());
			$stmt->bindValue(43,$this->getImageName());
			$stmt->bindValue(44,$this->getDeleted());
			$stmt->bindValue(45,$this->getConfirmPassword());
			$stmt->bindValue(46,$this->getInternalMailer());
			$stmt->bindValue(47,$this->getReminderInterval());
			$stmt->bindValue(48,$this->getReminderNextTime());
			$stmt->bindValue(49,$this->getCryptType());
			$stmt->bindValue(50,$this->getAccessKey());
			$stmt->bindValue(51,$this->getTheme());
			$stmt->bindValue(52,$this->getLanguage());
			$stmt->bindValue(53,$this->getTimeZone());
			$stmt->bindValue(54,$this->getCurrencyGroupingPattern());
			$stmt->bindValue(55,$this->getCurrencyDecimalSeparator());
			$stmt->bindValue(56,$this->getCurrencyGroupingSeparator());
			$stmt->bindValue(57,$this->getCurrencySymbolPlacement());
		} else {
			$stmt=self::prepareStatement($db,self::SQL_INSERT);
			$this->bindValues($stmt);
		}
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$lastInsertId=$db->lastInsertId();
		if (false!==$lastInsertId) {
			$this->setId($lastInsertId);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(59,$this->getId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Fetch VTigerHomeStuff's which this VTigerUsers references.
	 * `vtiger_users`.`id` -> `vtiger_homestuff`.`userid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerHomeStuff[]
	 */
	public function fetchVTigerHomeStuffCollection(PDO $db, $sort=null) {
		$filter=array(VTigerHomeStuff::FIELD_USERID=>$this->getId());
		return VTigerHomeStuff::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerLaR's which this VTigerUsers references.
	 * `vtiger_users`.`id` -> `vtiger_lar`.`createdby`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerLaR[]
	 */
	public function fetchVTigerLaRCollection(PDO $db, $sort=null) {
		$filter=array(VTigerLaR::FIELD_CREATEDBY=>$this->getId());
		return VTigerLaR::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerSalesmanActivityRel's which this VTigerUsers references.
	 * `vtiger_users`.`id` -> `vtiger_salesmanactivityrel`.`smid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerSalesmanActivityRel[]
	 */
	public function fetchVTigerSalesmanActivityRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerSalesmanActivityRel::FIELD_SMID=>$this->getId());
		return VTigerSalesmanActivityRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerSalesmanTicketRel's which this VTigerUsers references.
	 * `vtiger_users`.`id` -> `vtiger_salesmanticketrel`.`smid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerSalesmanTicketRel[]
	 */
	public function fetchVTigerSalesmanTicketRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerSalesmanTicketRel::FIELD_SMID=>$this->getId());
		return VTigerSalesmanTicketRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerTmPReadGroupRelSharingPer's which this VTigerUsers references.
	 * `vtiger_users`.`id` -> `vtiger_tmp_read_group_rel_sharing_per`.`userid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerTmPReadGroupRelSharingPer[]
	 */
	public function fetchVTigerTmPReadGroupRelSharingPerCollection(PDO $db, $sort=null) {
		$filter=array(VTigerTmPReadGroupRelSharingPer::FIELD_USERID=>$this->getId());
		return VTigerTmPReadGroupRelSharingPer::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerTmPReadGroupSharingPer's which this VTigerUsers references.
	 * `vtiger_users`.`id` -> `vtiger_tmp_read_group_sharing_per`.`userid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerTmPReadGroupSharingPer[]
	 */
	public function fetchVTigerTmPReadGroupSharingPerCollection(PDO $db, $sort=null) {
		$filter=array(VTigerTmPReadGroupSharingPer::FIELD_USERID=>$this->getId());
		return VTigerTmPReadGroupSharingPer::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerTmPReadUserRelSharingPer's which this VTigerUsers references.
	 * `vtiger_users`.`id` -> `vtiger_tmp_read_user_rel_sharing_per`.`userid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerTmPReadUserRelSharingPer[]
	 */
	public function fetchVTigerTmPReadUserRelSharingPerCollection(PDO $db, $sort=null) {
		$filter=array(VTigerTmPReadUserRelSharingPer::FIELD_USERID=>$this->getId());
		return VTigerTmPReadUserRelSharingPer::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerTmPReadUserSharingPer's which this VTigerUsers references.
	 * `vtiger_users`.`id` -> `vtiger_tmp_read_user_sharing_per`.`userid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerTmPReadUserSharingPer[]
	 */
	public function fetchVTigerTmPReadUserSharingPerCollection(PDO $db, $sort=null) {
		$filter=array(VTigerTmPReadUserSharingPer::FIELD_USERID=>$this->getId());
		return VTigerTmPReadUserSharingPer::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerTmPWriteGroupRelSharingPer's which this VTigerUsers references.
	 * `vtiger_users`.`id` -> `vtiger_tmp_write_group_rel_sharing_per`.`userid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerTmPWriteGroupRelSharingPer[]
	 */
	public function fetchVTigerTmPWriteGroupRelSharingPerCollection(PDO $db, $sort=null) {
		$filter=array(VTigerTmPWriteGroupRelSharingPer::FIELD_USERID=>$this->getId());
		return VTigerTmPWriteGroupRelSharingPer::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerTmPWriteGroupSharingPer's which this VTigerUsers references.
	 * `vtiger_users`.`id` -> `vtiger_tmp_write_group_sharing_per`.`userid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerTmPWriteGroupSharingPer[]
	 */
	public function fetchVTigerTmPWriteGroupSharingPerCollection(PDO $db, $sort=null) {
		$filter=array(VTigerTmPWriteGroupSharingPer::FIELD_USERID=>$this->getId());
		return VTigerTmPWriteGroupSharingPer::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerTmPWriteUserRelSharingPer's which this VTigerUsers references.
	 * `vtiger_users`.`id` -> `vtiger_tmp_write_user_rel_sharing_per`.`userid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerTmPWriteUserRelSharingPer[]
	 */
	public function fetchVTigerTmPWriteUserRelSharingPerCollection(PDO $db, $sort=null) {
		$filter=array(VTigerTmPWriteUserRelSharingPer::FIELD_USERID=>$this->getId());
		return VTigerTmPWriteUserRelSharingPer::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerTmPWriteUserSharingPer's which this VTigerUsers references.
	 * `vtiger_users`.`id` -> `vtiger_tmp_write_user_sharing_per`.`userid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerTmPWriteUserSharingPer[]
	 */
	public function fetchVTigerTmPWriteUserSharingPerCollection(PDO $db, $sort=null) {
		$filter=array(VTigerTmPWriteUserSharingPer::FIELD_USERID=>$this->getId());
		return VTigerTmPWriteUserSharingPer::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerUser2Role's which this VTigerUsers references.
	 * `vtiger_users`.`id` -> `vtiger_user2role`.`userid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerUser2Role[]
	 */
	public function fetchVTigerUser2RoleCollection(PDO $db, $sort=null) {
		$filter=array(VTigerUser2Role::FIELD_USERID=>$this->getId());
		return VTigerUser2Role::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerUsers2Group's which this VTigerUsers references.
	 * `vtiger_users`.`id` -> `vtiger_users2group`.`userid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerUsers2Group[]
	 */
	public function fetchVTigerUsers2GroupCollection(PDO $db, $sort=null) {
		$filter=array(VTigerUsers2Group::FIELD_USERID=>$this->getId());
		return VTigerUsers2Group::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerUsers';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerUsers');
	}

	/**
	 * get single VTigerUsers instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerUsers
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerUsers();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerUsers from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerUsers[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerUsers') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>