<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerActivity extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerActivity';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_activity';
	const SQL_INSERT='INSERT INTO `vtiger_activity` (`activityid`,`subject`,`semodule`,`activitytype`,`date_start`,`due_date`,`time_start`,`time_end`,`sendnotification`,`duration_hours`,`duration_minutes`,`status`,`eventstatus`,`priority`,`location`,`notime`,`visibility`,`recurringtype`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_activity` (`activityid`,`subject`,`semodule`,`activitytype`,`date_start`,`due_date`,`time_start`,`time_end`,`sendnotification`,`duration_hours`,`duration_minutes`,`status`,`eventstatus`,`priority`,`location`,`notime`,`visibility`,`recurringtype`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_activity` SET `activityid`=?,`subject`=?,`semodule`=?,`activitytype`=?,`date_start`=?,`due_date`=?,`time_start`=?,`time_end`=?,`sendnotification`=?,`duration_hours`=?,`duration_minutes`=?,`status`=?,`eventstatus`=?,`priority`=?,`location`=?,`notime`=?,`visibility`=?,`recurringtype`=? WHERE `activityid`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_activity` WHERE `activityid`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_activity` WHERE `activityid`=?';
	const FIELD_ACTIVITYID=-1627361933;
	const FIELD_SUBJECT=592684227;
	const FIELD_SEMODULE=197710471;
	const FIELD_ACTIVITYTYPE=-526370414;
	const FIELD_DATE_START=1493701018;
	const FIELD_DUE_DATE=896687714;
	const FIELD_TIME_START=1754947961;
	const FIELD_TIME_END=1186168754;
	const FIELD_SENDNOTIFICATION=1086232252;
	const FIELD_DURATION_HOURS=-1826864851;
	const FIELD_DURATION_MINUTES=988907389;
	const FIELD_STATUS=-1367297669;
	const FIELD_EVENTSTATUS=-1263529181;
	const FIELD_PRIORITY=2097749229;
	const FIELD_LOCATION=869286654;
	const FIELD_NOTIME=-1514505833;
	const FIELD_VISIBILITY=-1734649829;
	const FIELD_RECURRINGTYPE=-1506489874;
	private static $PRIMARY_KEYS=array(self::FIELD_ACTIVITYID);
	private static $AUTOINCREMENT_FIELDS=array();
	private static $FIELD_NAMES=array(
		self::FIELD_ACTIVITYID=>'activityid',
		self::FIELD_SUBJECT=>'subject',
		self::FIELD_SEMODULE=>'semodule',
		self::FIELD_ACTIVITYTYPE=>'activitytype',
		self::FIELD_DATE_START=>'date_start',
		self::FIELD_DUE_DATE=>'due_date',
		self::FIELD_TIME_START=>'time_start',
		self::FIELD_TIME_END=>'time_end',
		self::FIELD_SENDNOTIFICATION=>'sendnotification',
		self::FIELD_DURATION_HOURS=>'duration_hours',
		self::FIELD_DURATION_MINUTES=>'duration_minutes',
		self::FIELD_STATUS=>'status',
		self::FIELD_EVENTSTATUS=>'eventstatus',
		self::FIELD_PRIORITY=>'priority',
		self::FIELD_LOCATION=>'location',
		self::FIELD_NOTIME=>'notime',
		self::FIELD_VISIBILITY=>'visibility',
		self::FIELD_RECURRINGTYPE=>'recurringtype');
	private static $PROPERTY_NAMES=array(
		self::FIELD_ACTIVITYID=>'activityId',
		self::FIELD_SUBJECT=>'subject',
		self::FIELD_SEMODULE=>'seModule',
		self::FIELD_ACTIVITYTYPE=>'activityType',
		self::FIELD_DATE_START=>'dateStart',
		self::FIELD_DUE_DATE=>'dueDate',
		self::FIELD_TIME_START=>'timeStart',
		self::FIELD_TIME_END=>'timeEnd',
		self::FIELD_SENDNOTIFICATION=>'sendNotification',
		self::FIELD_DURATION_HOURS=>'durationHours',
		self::FIELD_DURATION_MINUTES=>'durationMinutes',
		self::FIELD_STATUS=>'status',
		self::FIELD_EVENTSTATUS=>'eventStatus',
		self::FIELD_PRIORITY=>'priority',
		self::FIELD_LOCATION=>'location',
		self::FIELD_NOTIME=>'noTime',
		self::FIELD_VISIBILITY=>'visibility',
		self::FIELD_RECURRINGTYPE=>'recurringType');
	private static $PROPERTY_TYPES=array(
		self::FIELD_ACTIVITYID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_SUBJECT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SEMODULE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ACTIVITYTYPE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DATE_START=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DUE_DATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TIME_START=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TIME_END=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SENDNOTIFICATION=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DURATION_HOURS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DURATION_MINUTES=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_STATUS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_EVENTSTATUS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PRIORITY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_LOCATION=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_NOTIME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_VISIBILITY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_RECURRINGTYPE=>Db2PhpEntity::PHP_TYPE_STRING);
	private static $FIELD_TYPES=array(
		self::FIELD_ACTIVITYID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_SUBJECT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,false),
		self::FIELD_SEMODULE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,20,0,true),
		self::FIELD_ACTIVITYTYPE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,false),
		self::FIELD_DATE_START=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,false),
		self::FIELD_DUE_DATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_TIME_START=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_TIME_END=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_SENDNOTIFICATION=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,3,0,false),
		self::FIELD_DURATION_HOURS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_DURATION_MINUTES=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_STATUS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_EVENTSTATUS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_PRIORITY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_LOCATION=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,150,0,true),
		self::FIELD_NOTIME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,3,0,false),
		self::FIELD_VISIBILITY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,false),
		self::FIELD_RECURRINGTYPE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true));
	private static $DEFAULT_VALUES=array(
		self::FIELD_ACTIVITYID=>0,
		self::FIELD_SUBJECT=>'',
		self::FIELD_SEMODULE=>null,
		self::FIELD_ACTIVITYTYPE=>'',
		self::FIELD_DATE_START=>'',
		self::FIELD_DUE_DATE=>null,
		self::FIELD_TIME_START=>null,
		self::FIELD_TIME_END=>null,
		self::FIELD_SENDNOTIFICATION=>'0',
		self::FIELD_DURATION_HOURS=>null,
		self::FIELD_DURATION_MINUTES=>null,
		self::FIELD_STATUS=>null,
		self::FIELD_EVENTSTATUS=>null,
		self::FIELD_PRIORITY=>null,
		self::FIELD_LOCATION=>null,
		self::FIELD_NOTIME=>'0',
		self::FIELD_VISIBILITY=>'all',
		self::FIELD_RECURRINGTYPE=>null);
	private $activityId;
	private $subject;
	private $seModule;
	private $activityType;
	private $dateStart;
	private $dueDate;
	private $timeStart;
	private $timeEnd;
	private $sendNotification;
	private $durationHours;
	private $durationMinutes;
	private $status;
	private $eventStatus;
	private $priority;
	private $location;
	private $noTime;
	private $visibility;
	private $recurringType;

	/**
	 * set value for activityid 
	 *
	 * type:INT,size:10,default:0,primary,index
	 *
	 * @param mixed $activityId
	 * @return VTigerActivity
	 */
	public function &setActivityId($activityId) {
		$this->notifyChanged(self::FIELD_ACTIVITYID,$this->activityId,$activityId);
		$this->activityId=$activityId;
		return $this;
	}

	/**
	 * get value for activityid 
	 *
	 * type:INT,size:10,default:0,primary,index
	 *
	 * @return mixed
	 */
	public function getActivityId() {
		return $this->activityId;
	}

	/**
	 * set value for subject 
	 *
	 * type:VARCHAR,size:100,default:null,index
	 *
	 * @param mixed $subject
	 * @return VTigerActivity
	 */
	public function &setSubject($subject) {
		$this->notifyChanged(self::FIELD_SUBJECT,$this->subject,$subject);
		$this->subject=$subject;
		return $this;
	}

	/**
	 * get value for subject 
	 *
	 * type:VARCHAR,size:100,default:null,index
	 *
	 * @return mixed
	 */
	public function getSubject() {
		return $this->subject;
	}

	/**
	 * set value for semodule 
	 *
	 * type:VARCHAR,size:20,default:null,nullable
	 *
	 * @param mixed $seModule
	 * @return VTigerActivity
	 */
	public function &setSeModule($seModule) {
		$this->notifyChanged(self::FIELD_SEMODULE,$this->seModule,$seModule);
		$this->seModule=$seModule;
		return $this;
	}

	/**
	 * get value for semodule 
	 *
	 * type:VARCHAR,size:20,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSeModule() {
		return $this->seModule;
	}

	/**
	 * set value for activitytype 
	 *
	 * type:VARCHAR,size:200,default:null,index
	 *
	 * @param mixed $activityType
	 * @return VTigerActivity
	 */
	public function &setActivityType($activityType) {
		$this->notifyChanged(self::FIELD_ACTIVITYTYPE,$this->activityType,$activityType);
		$this->activityType=$activityType;
		return $this;
	}

	/**
	 * get value for activitytype 
	 *
	 * type:VARCHAR,size:200,default:null,index
	 *
	 * @return mixed
	 */
	public function getActivityType() {
		return $this->activityType;
	}

	/**
	 * set value for date_start 
	 *
	 * type:DATE,size:10,default:null,index
	 *
	 * @param mixed $dateStart
	 * @return VTigerActivity
	 */
	public function &setDateStart($dateStart) {
		$this->notifyChanged(self::FIELD_DATE_START,$this->dateStart,$dateStart);
		$this->dateStart=$dateStart;
		return $this;
	}

	/**
	 * get value for date_start 
	 *
	 * type:DATE,size:10,default:null,index
	 *
	 * @return mixed
	 */
	public function getDateStart() {
		return $this->dateStart;
	}

	/**
	 * set value for due_date 
	 *
	 * type:DATE,size:10,default:null,index,nullable
	 *
	 * @param mixed $dueDate
	 * @return VTigerActivity
	 */
	public function &setDueDate($dueDate) {
		$this->notifyChanged(self::FIELD_DUE_DATE,$this->dueDate,$dueDate);
		$this->dueDate=$dueDate;
		return $this;
	}

	/**
	 * get value for due_date 
	 *
	 * type:DATE,size:10,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getDueDate() {
		return $this->dueDate;
	}

	/**
	 * set value for time_start 
	 *
	 * type:VARCHAR,size:50,default:null,index,nullable
	 *
	 * @param mixed $timeStart
	 * @return VTigerActivity
	 */
	public function &setTimeStart($timeStart) {
		$this->notifyChanged(self::FIELD_TIME_START,$this->timeStart,$timeStart);
		$this->timeStart=$timeStart;
		return $this;
	}

	/**
	 * get value for time_start 
	 *
	 * type:VARCHAR,size:50,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getTimeStart() {
		return $this->timeStart;
	}

	/**
	 * set value for time_end 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $timeEnd
	 * @return VTigerActivity
	 */
	public function &setTimeEnd($timeEnd) {
		$this->notifyChanged(self::FIELD_TIME_END,$this->timeEnd,$timeEnd);
		$this->timeEnd=$timeEnd;
		return $this;
	}

	/**
	 * get value for time_end 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTimeEnd() {
		return $this->timeEnd;
	}

	/**
	 * set value for sendnotification 
	 *
	 * type:VARCHAR,size:3,default:0
	 *
	 * @param mixed $sendNotification
	 * @return VTigerActivity
	 */
	public function &setSendNotification($sendNotification) {
		$this->notifyChanged(self::FIELD_SENDNOTIFICATION,$this->sendNotification,$sendNotification);
		$this->sendNotification=$sendNotification;
		return $this;
	}

	/**
	 * get value for sendnotification 
	 *
	 * type:VARCHAR,size:3,default:0
	 *
	 * @return mixed
	 */
	public function getSendNotification() {
		return $this->sendNotification;
	}

	/**
	 * set value for duration_hours 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $durationHours
	 * @return VTigerActivity
	 */
	public function &setDurationHours($durationHours) {
		$this->notifyChanged(self::FIELD_DURATION_HOURS,$this->durationHours,$durationHours);
		$this->durationHours=$durationHours;
		return $this;
	}

	/**
	 * get value for duration_hours 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDurationHours() {
		return $this->durationHours;
	}

	/**
	 * set value for duration_minutes 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $durationMinutes
	 * @return VTigerActivity
	 */
	public function &setDurationMinutes($durationMinutes) {
		$this->notifyChanged(self::FIELD_DURATION_MINUTES,$this->durationMinutes,$durationMinutes);
		$this->durationMinutes=$durationMinutes;
		return $this;
	}

	/**
	 * get value for duration_minutes 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDurationMinutes() {
		return $this->durationMinutes;
	}

	/**
	 * set value for status 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @param mixed $status
	 * @return VTigerActivity
	 */
	public function &setStatus($status) {
		$this->notifyChanged(self::FIELD_STATUS,$this->status,$status);
		$this->status=$status;
		return $this;
	}

	/**
	 * get value for status 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getStatus() {
		return $this->status;
	}

	/**
	 * set value for eventstatus 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @param mixed $eventStatus
	 * @return VTigerActivity
	 */
	public function &setEventStatus($eventStatus) {
		$this->notifyChanged(self::FIELD_EVENTSTATUS,$this->eventStatus,$eventStatus);
		$this->eventStatus=$eventStatus;
		return $this;
	}

	/**
	 * get value for eventstatus 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getEventStatus() {
		return $this->eventStatus;
	}

	/**
	 * set value for priority 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $priority
	 * @return VTigerActivity
	 */
	public function &setPriority($priority) {
		$this->notifyChanged(self::FIELD_PRIORITY,$this->priority,$priority);
		$this->priority=$priority;
		return $this;
	}

	/**
	 * get value for priority 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPriority() {
		return $this->priority;
	}

	/**
	 * set value for location 
	 *
	 * type:VARCHAR,size:150,default:null,nullable
	 *
	 * @param mixed $location
	 * @return VTigerActivity
	 */
	public function &setLocation($location) {
		$this->notifyChanged(self::FIELD_LOCATION,$this->location,$location);
		$this->location=$location;
		return $this;
	}

	/**
	 * get value for location 
	 *
	 * type:VARCHAR,size:150,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getLocation() {
		return $this->location;
	}

	/**
	 * set value for notime 
	 *
	 * type:VARCHAR,size:3,default:0
	 *
	 * @param mixed $noTime
	 * @return VTigerActivity
	 */
	public function &setNoTime($noTime) {
		$this->notifyChanged(self::FIELD_NOTIME,$this->noTime,$noTime);
		$this->noTime=$noTime;
		return $this;
	}

	/**
	 * get value for notime 
	 *
	 * type:VARCHAR,size:3,default:0
	 *
	 * @return mixed
	 */
	public function getNoTime() {
		return $this->noTime;
	}

	/**
	 * set value for visibility 
	 *
	 * type:VARCHAR,size:50,default:all
	 *
	 * @param mixed $visibility
	 * @return VTigerActivity
	 */
	public function &setVisibility($visibility) {
		$this->notifyChanged(self::FIELD_VISIBILITY,$this->visibility,$visibility);
		$this->visibility=$visibility;
		return $this;
	}

	/**
	 * get value for visibility 
	 *
	 * type:VARCHAR,size:50,default:all
	 *
	 * @return mixed
	 */
	public function getVisibility() {
		return $this->visibility;
	}

	/**
	 * set value for recurringtype 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $recurringType
	 * @return VTigerActivity
	 */
	public function &setRecurringType($recurringType) {
		$this->notifyChanged(self::FIELD_RECURRINGTYPE,$this->recurringType,$recurringType);
		$this->recurringType=$recurringType;
		return $this;
	}

	/**
	 * get value for recurringtype 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getRecurringType() {
		return $this->recurringType;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_ACTIVITYID=>$this->getActivityId(),
			self::FIELD_SUBJECT=>$this->getSubject(),
			self::FIELD_SEMODULE=>$this->getSeModule(),
			self::FIELD_ACTIVITYTYPE=>$this->getActivityType(),
			self::FIELD_DATE_START=>$this->getDateStart(),
			self::FIELD_DUE_DATE=>$this->getDueDate(),
			self::FIELD_TIME_START=>$this->getTimeStart(),
			self::FIELD_TIME_END=>$this->getTimeEnd(),
			self::FIELD_SENDNOTIFICATION=>$this->getSendNotification(),
			self::FIELD_DURATION_HOURS=>$this->getDurationHours(),
			self::FIELD_DURATION_MINUTES=>$this->getDurationMinutes(),
			self::FIELD_STATUS=>$this->getStatus(),
			self::FIELD_EVENTSTATUS=>$this->getEventStatus(),
			self::FIELD_PRIORITY=>$this->getPriority(),
			self::FIELD_LOCATION=>$this->getLocation(),
			self::FIELD_NOTIME=>$this->getNoTime(),
			self::FIELD_VISIBILITY=>$this->getVisibility(),
			self::FIELD_RECURRINGTYPE=>$this->getRecurringType());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_ACTIVITYID=>$this->getActivityId());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerActivity instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerActivity $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerActivity[]
	 */
	public static function findByExample(PDO $db,VTigerActivity $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerActivity instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerActivity[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_activity`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerActivity instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerActivity[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerActivity instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerActivity[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerActivity();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerActivity instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerActivity[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_activity`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setActivityId($result['activityid']);
		$this->setSubject($result['subject']);
		$this->setSeModule($result['semodule']);
		$this->setActivityType($result['activitytype']);
		$this->setDateStart($result['date_start']);
		$this->setDueDate($result['due_date']);
		$this->setTimeStart($result['time_start']);
		$this->setTimeEnd($result['time_end']);
		$this->setSendNotification($result['sendnotification']);
		$this->setDurationHours($result['duration_hours']);
		$this->setDurationMinutes($result['duration_minutes']);
		$this->setStatus($result['status']);
		$this->setEventStatus($result['eventstatus']);
		$this->setPriority($result['priority']);
		$this->setLocation($result['location']);
		$this->setNoTime($result['notime']);
		$this->setVisibility($result['visibility']);
		$this->setRecurringType($result['recurringtype']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerActivity
	 */
	public static function findById(PDO $db,$activityId) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$activityId);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerActivity();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getActivityId());
		$stmt->bindValue(2,$this->getSubject());
		$stmt->bindValue(3,$this->getSeModule());
		$stmt->bindValue(4,$this->getActivityType());
		$stmt->bindValue(5,$this->getDateStart());
		$stmt->bindValue(6,$this->getDueDate());
		$stmt->bindValue(7,$this->getTimeStart());
		$stmt->bindValue(8,$this->getTimeEnd());
		$stmt->bindValue(9,$this->getSendNotification());
		$stmt->bindValue(10,$this->getDurationHours());
		$stmt->bindValue(11,$this->getDurationMinutes());
		$stmt->bindValue(12,$this->getStatus());
		$stmt->bindValue(13,$this->getEventStatus());
		$stmt->bindValue(14,$this->getPriority());
		$stmt->bindValue(15,$this->getLocation());
		$stmt->bindValue(16,$this->getNoTime());
		$stmt->bindValue(17,$this->getVisibility());
		$stmt->bindValue(18,$this->getRecurringType());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_INSERT);
		$this->bindValues($stmt);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(19,$this->getActivityId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getActivityId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Fetch VTigerRecurringEvents's which this VTigerActivity references.
	 * `vtiger_activity`.`activityid` -> `vtiger_recurringevents`.`activityid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerRecurringEvents[]
	 */
	public function fetchVTigerRecurringEventsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerRecurringEvents::FIELD_ACTIVITYID=>$this->getActivityId());
		return VTigerRecurringEvents::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerCRmEntity which references this VTigerActivity. Will return null in case reference is invalid.
	 * `vtiger_activity`.`activityid` -> `vtiger_crmentity`.`crmid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerCRmEntity
	 */
	public function fetchVTigerCRmEntity(PDO $db, $sort=null) {
		$filter=array(VTigerCRmEntity::FIELD_CRMID=>$this->getActivityId());
		$result=VTigerCRmEntity::findByFilter($db, $filter, true, $sort);
		return empty($result) ? null : $result[0];
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerActivity';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerActivity');
	}

	/**
	 * get single VTigerActivity instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerActivity
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerActivity();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerActivity from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerActivity[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerActivity') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>