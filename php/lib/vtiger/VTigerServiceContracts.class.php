<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerServiceContracts extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerServiceContracts';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_servicecontracts';
	const SQL_INSERT='INSERT INTO `vtiger_servicecontracts` (`servicecontractsid`,`start_date`,`end_date`,`sc_related_to`,`tracking_unit`,`total_units`,`used_units`,`subject`,`due_date`,`planned_duration`,`actual_duration`,`contract_status`,`priority`,`contract_type`,`progress`,`contract_no`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_servicecontracts` (`servicecontractsid`,`start_date`,`end_date`,`sc_related_to`,`tracking_unit`,`total_units`,`used_units`,`subject`,`due_date`,`planned_duration`,`actual_duration`,`contract_status`,`priority`,`contract_type`,`progress`,`contract_no`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_servicecontracts` SET `servicecontractsid`=?,`start_date`=?,`end_date`=?,`sc_related_to`=?,`tracking_unit`=?,`total_units`=?,`used_units`=?,`subject`=?,`due_date`=?,`planned_duration`=?,`actual_duration`=?,`contract_status`=?,`priority`=?,`contract_type`=?,`progress`=?,`contract_no`=? WHERE `servicecontractsid`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_servicecontracts` WHERE `servicecontractsid`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_servicecontracts` WHERE `servicecontractsid`=?';
	const FIELD_SERVICECONTRACTSID=1921829907;
	const FIELD_START_DATE=-212096809;
	const FIELD_END_DATE=-360664322;
	const FIELD_SC_RELATED_TO=1111718258;
	const FIELD_TRACKING_UNIT=1490513696;
	const FIELD_TOTAL_UNITS=-1133336376;
	const FIELD_USED_UNITS=-537101351;
	const FIELD_SUBJECT=-1103882944;
	const FIELD_DUE_DATE=-157287035;
	const FIELD_PLANNED_DURATION=-657690597;
	const FIELD_ACTUAL_DURATION=-2115559111;
	const FIELD_CONTRACT_STATUS=-681889837;
	const FIELD_PRIORITY=1043774480;
	const FIELD_CONTRACT_TYPE=-760450213;
	const FIELD_PROGRESS=1208157337;
	const FIELD_CONTRACT_NO=1429374498;
	private static $PRIMARY_KEYS=array(self::FIELD_SERVICECONTRACTSID);
	private static $AUTOINCREMENT_FIELDS=array();
	private static $FIELD_NAMES=array(
		self::FIELD_SERVICECONTRACTSID=>'servicecontractsid',
		self::FIELD_START_DATE=>'start_date',
		self::FIELD_END_DATE=>'end_date',
		self::FIELD_SC_RELATED_TO=>'sc_related_to',
		self::FIELD_TRACKING_UNIT=>'tracking_unit',
		self::FIELD_TOTAL_UNITS=>'total_units',
		self::FIELD_USED_UNITS=>'used_units',
		self::FIELD_SUBJECT=>'subject',
		self::FIELD_DUE_DATE=>'due_date',
		self::FIELD_PLANNED_DURATION=>'planned_duration',
		self::FIELD_ACTUAL_DURATION=>'actual_duration',
		self::FIELD_CONTRACT_STATUS=>'contract_status',
		self::FIELD_PRIORITY=>'priority',
		self::FIELD_CONTRACT_TYPE=>'contract_type',
		self::FIELD_PROGRESS=>'progress',
		self::FIELD_CONTRACT_NO=>'contract_no');
	private static $PROPERTY_NAMES=array(
		self::FIELD_SERVICECONTRACTSID=>'serviceContractsId',
		self::FIELD_START_DATE=>'startDate',
		self::FIELD_END_DATE=>'endDate',
		self::FIELD_SC_RELATED_TO=>'scRelatedTo',
		self::FIELD_TRACKING_UNIT=>'trackingUnit',
		self::FIELD_TOTAL_UNITS=>'totalUnits',
		self::FIELD_USED_UNITS=>'usedUnits',
		self::FIELD_SUBJECT=>'subject',
		self::FIELD_DUE_DATE=>'dueDate',
		self::FIELD_PLANNED_DURATION=>'plannedDuration',
		self::FIELD_ACTUAL_DURATION=>'actualDuration',
		self::FIELD_CONTRACT_STATUS=>'contractStatus',
		self::FIELD_PRIORITY=>'priority',
		self::FIELD_CONTRACT_TYPE=>'contractType',
		self::FIELD_PROGRESS=>'progress',
		self::FIELD_CONTRACT_NO=>'contractNo');
	private static $PROPERTY_TYPES=array(
		self::FIELD_SERVICECONTRACTSID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_START_DATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_END_DATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SC_RELATED_TO=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_TRACKING_UNIT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TOTAL_UNITS=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_USED_UNITS=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_SUBJECT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DUE_DATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PLANNED_DURATION=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ACTUAL_DURATION=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CONTRACT_STATUS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PRIORITY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CONTRACT_TYPE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PROGRESS=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_CONTRACT_NO=>Db2PhpEntity::PHP_TYPE_STRING);
	private static $FIELD_TYPES=array(
		self::FIELD_SERVICECONTRACTSID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_START_DATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_END_DATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_SC_RELATED_TO=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_TRACKING_UNIT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_TOTAL_UNITS=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,5,2,true),
		self::FIELD_USED_UNITS=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,5,2,true),
		self::FIELD_SUBJECT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_DUE_DATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_PLANNED_DURATION=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,256,0,true),
		self::FIELD_ACTUAL_DURATION=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,256,0,true),
		self::FIELD_CONTRACT_STATUS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_PRIORITY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_CONTRACT_TYPE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_PROGRESS=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,5,2,true),
		self::FIELD_CONTRACT_NO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true));
	private static $DEFAULT_VALUES=array(
		self::FIELD_SERVICECONTRACTSID=>null,
		self::FIELD_START_DATE=>null,
		self::FIELD_END_DATE=>null,
		self::FIELD_SC_RELATED_TO=>null,
		self::FIELD_TRACKING_UNIT=>null,
		self::FIELD_TOTAL_UNITS=>null,
		self::FIELD_USED_UNITS=>null,
		self::FIELD_SUBJECT=>null,
		self::FIELD_DUE_DATE=>null,
		self::FIELD_PLANNED_DURATION=>null,
		self::FIELD_ACTUAL_DURATION=>null,
		self::FIELD_CONTRACT_STATUS=>null,
		self::FIELD_PRIORITY=>null,
		self::FIELD_CONTRACT_TYPE=>null,
		self::FIELD_PROGRESS=>null,
		self::FIELD_CONTRACT_NO=>null);
	private $serviceContractsId;
	private $startDate;
	private $endDate;
	private $scRelatedTo;
	private $trackingUnit;
	private $totalUnits;
	private $usedUnits;
	private $subject;
	private $dueDate;
	private $plannedDuration;
	private $actualDuration;
	private $contractStatus;
	private $priority;
	private $contractType;
	private $progress;
	private $contractNo;

	/**
	 * set value for servicecontractsid 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $serviceContractsId
	 * @return VTigerServiceContracts
	 */
	public function &setServiceContractsId($serviceContractsId) {
		$this->notifyChanged(self::FIELD_SERVICECONTRACTSID,$this->serviceContractsId,$serviceContractsId);
		$this->serviceContractsId=$serviceContractsId;
		return $this;
	}

	/**
	 * get value for servicecontractsid 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getServiceContractsId() {
		return $this->serviceContractsId;
	}

	/**
	 * set value for start_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $startDate
	 * @return VTigerServiceContracts
	 */
	public function &setStartDate($startDate) {
		$this->notifyChanged(self::FIELD_START_DATE,$this->startDate,$startDate);
		$this->startDate=$startDate;
		return $this;
	}

	/**
	 * get value for start_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getStartDate() {
		return $this->startDate;
	}

	/**
	 * set value for end_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $endDate
	 * @return VTigerServiceContracts
	 */
	public function &setEndDate($endDate) {
		$this->notifyChanged(self::FIELD_END_DATE,$this->endDate,$endDate);
		$this->endDate=$endDate;
		return $this;
	}

	/**
	 * get value for end_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getEndDate() {
		return $this->endDate;
	}

	/**
	 * set value for sc_related_to 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $scRelatedTo
	 * @return VTigerServiceContracts
	 */
	public function &setScRelatedTo($scRelatedTo) {
		$this->notifyChanged(self::FIELD_SC_RELATED_TO,$this->scRelatedTo,$scRelatedTo);
		$this->scRelatedTo=$scRelatedTo;
		return $this;
	}

	/**
	 * get value for sc_related_to 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getScRelatedTo() {
		return $this->scRelatedTo;
	}

	/**
	 * set value for tracking_unit 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $trackingUnit
	 * @return VTigerServiceContracts
	 */
	public function &setTrackingUnit($trackingUnit) {
		$this->notifyChanged(self::FIELD_TRACKING_UNIT,$this->trackingUnit,$trackingUnit);
		$this->trackingUnit=$trackingUnit;
		return $this;
	}

	/**
	 * get value for tracking_unit 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTrackingUnit() {
		return $this->trackingUnit;
	}

	/**
	 * set value for total_units 
	 *
	 * type:DECIMAL,size:5,default:null,nullable
	 *
	 * @param mixed $totalUnits
	 * @return VTigerServiceContracts
	 */
	public function &setTotalUnits($totalUnits) {
		$this->notifyChanged(self::FIELD_TOTAL_UNITS,$this->totalUnits,$totalUnits);
		$this->totalUnits=$totalUnits;
		return $this;
	}

	/**
	 * get value for total_units 
	 *
	 * type:DECIMAL,size:5,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTotalUnits() {
		return $this->totalUnits;
	}

	/**
	 * set value for used_units 
	 *
	 * type:DECIMAL,size:5,default:null,nullable
	 *
	 * @param mixed $usedUnits
	 * @return VTigerServiceContracts
	 */
	public function &setUsedUnits($usedUnits) {
		$this->notifyChanged(self::FIELD_USED_UNITS,$this->usedUnits,$usedUnits);
		$this->usedUnits=$usedUnits;
		return $this;
	}

	/**
	 * get value for used_units 
	 *
	 * type:DECIMAL,size:5,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getUsedUnits() {
		return $this->usedUnits;
	}

	/**
	 * set value for subject 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $subject
	 * @return VTigerServiceContracts
	 */
	public function &setSubject($subject) {
		$this->notifyChanged(self::FIELD_SUBJECT,$this->subject,$subject);
		$this->subject=$subject;
		return $this;
	}

	/**
	 * get value for subject 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSubject() {
		return $this->subject;
	}

	/**
	 * set value for due_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $dueDate
	 * @return VTigerServiceContracts
	 */
	public function &setDueDate($dueDate) {
		$this->notifyChanged(self::FIELD_DUE_DATE,$this->dueDate,$dueDate);
		$this->dueDate=$dueDate;
		return $this;
	}

	/**
	 * get value for due_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDueDate() {
		return $this->dueDate;
	}

	/**
	 * set value for planned_duration 
	 *
	 * type:VARCHAR,size:256,default:null,nullable
	 *
	 * @param mixed $plannedDuration
	 * @return VTigerServiceContracts
	 */
	public function &setPlannedDuration($plannedDuration) {
		$this->notifyChanged(self::FIELD_PLANNED_DURATION,$this->plannedDuration,$plannedDuration);
		$this->plannedDuration=$plannedDuration;
		return $this;
	}

	/**
	 * get value for planned_duration 
	 *
	 * type:VARCHAR,size:256,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPlannedDuration() {
		return $this->plannedDuration;
	}

	/**
	 * set value for actual_duration 
	 *
	 * type:VARCHAR,size:256,default:null,nullable
	 *
	 * @param mixed $actualDuration
	 * @return VTigerServiceContracts
	 */
	public function &setActualDuration($actualDuration) {
		$this->notifyChanged(self::FIELD_ACTUAL_DURATION,$this->actualDuration,$actualDuration);
		$this->actualDuration=$actualDuration;
		return $this;
	}

	/**
	 * get value for actual_duration 
	 *
	 * type:VARCHAR,size:256,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getActualDuration() {
		return $this->actualDuration;
	}

	/**
	 * set value for contract_status 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $contractStatus
	 * @return VTigerServiceContracts
	 */
	public function &setContractStatus($contractStatus) {
		$this->notifyChanged(self::FIELD_CONTRACT_STATUS,$this->contractStatus,$contractStatus);
		$this->contractStatus=$contractStatus;
		return $this;
	}

	/**
	 * get value for contract_status 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getContractStatus() {
		return $this->contractStatus;
	}

	/**
	 * set value for priority 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $priority
	 * @return VTigerServiceContracts
	 */
	public function &setPriority($priority) {
		$this->notifyChanged(self::FIELD_PRIORITY,$this->priority,$priority);
		$this->priority=$priority;
		return $this;
	}

	/**
	 * get value for priority 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPriority() {
		return $this->priority;
	}

	/**
	 * set value for contract_type 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $contractType
	 * @return VTigerServiceContracts
	 */
	public function &setContractType($contractType) {
		$this->notifyChanged(self::FIELD_CONTRACT_TYPE,$this->contractType,$contractType);
		$this->contractType=$contractType;
		return $this;
	}

	/**
	 * get value for contract_type 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getContractType() {
		return $this->contractType;
	}

	/**
	 * set value for progress 
	 *
	 * type:DECIMAL,size:5,default:null,nullable
	 *
	 * @param mixed $progress
	 * @return VTigerServiceContracts
	 */
	public function &setProgress($progress) {
		$this->notifyChanged(self::FIELD_PROGRESS,$this->progress,$progress);
		$this->progress=$progress;
		return $this;
	}

	/**
	 * get value for progress 
	 *
	 * type:DECIMAL,size:5,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getProgress() {
		return $this->progress;
	}

	/**
	 * set value for contract_no 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $contractNo
	 * @return VTigerServiceContracts
	 */
	public function &setContractNo($contractNo) {
		$this->notifyChanged(self::FIELD_CONTRACT_NO,$this->contractNo,$contractNo);
		$this->contractNo=$contractNo;
		return $this;
	}

	/**
	 * get value for contract_no 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getContractNo() {
		return $this->contractNo;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_SERVICECONTRACTSID=>$this->getServiceContractsId(),
			self::FIELD_START_DATE=>$this->getStartDate(),
			self::FIELD_END_DATE=>$this->getEndDate(),
			self::FIELD_SC_RELATED_TO=>$this->getScRelatedTo(),
			self::FIELD_TRACKING_UNIT=>$this->getTrackingUnit(),
			self::FIELD_TOTAL_UNITS=>$this->getTotalUnits(),
			self::FIELD_USED_UNITS=>$this->getUsedUnits(),
			self::FIELD_SUBJECT=>$this->getSubject(),
			self::FIELD_DUE_DATE=>$this->getDueDate(),
			self::FIELD_PLANNED_DURATION=>$this->getPlannedDuration(),
			self::FIELD_ACTUAL_DURATION=>$this->getActualDuration(),
			self::FIELD_CONTRACT_STATUS=>$this->getContractStatus(),
			self::FIELD_PRIORITY=>$this->getPriority(),
			self::FIELD_CONTRACT_TYPE=>$this->getContractType(),
			self::FIELD_PROGRESS=>$this->getProgress(),
			self::FIELD_CONTRACT_NO=>$this->getContractNo());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_SERVICECONTRACTSID=>$this->getServiceContractsId());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerServiceContracts instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerServiceContracts $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerServiceContracts[]
	 */
	public static function findByExample(PDO $db,VTigerServiceContracts $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerServiceContracts instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerServiceContracts[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_servicecontracts`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerServiceContracts instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerServiceContracts[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerServiceContracts instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerServiceContracts[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerServiceContracts();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerServiceContracts instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerServiceContracts[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_servicecontracts`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setServiceContractsId($result['servicecontractsid']);
		$this->setStartDate($result['start_date']);
		$this->setEndDate($result['end_date']);
		$this->setScRelatedTo($result['sc_related_to']);
		$this->setTrackingUnit($result['tracking_unit']);
		$this->setTotalUnits($result['total_units']);
		$this->setUsedUnits($result['used_units']);
		$this->setSubject($result['subject']);
		$this->setDueDate($result['due_date']);
		$this->setPlannedDuration($result['planned_duration']);
		$this->setActualDuration($result['actual_duration']);
		$this->setContractStatus($result['contract_status']);
		$this->setPriority($result['priority']);
		$this->setContractType($result['contract_type']);
		$this->setProgress($result['progress']);
		$this->setContractNo($result['contract_no']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerServiceContracts
	 */
	public static function findById(PDO $db,$serviceContractsId) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$serviceContractsId);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerServiceContracts();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getServiceContractsId());
		$stmt->bindValue(2,$this->getStartDate());
		$stmt->bindValue(3,$this->getEndDate());
		$stmt->bindValue(4,$this->getScRelatedTo());
		$stmt->bindValue(5,$this->getTrackingUnit());
		$stmt->bindValue(6,$this->getTotalUnits());
		$stmt->bindValue(7,$this->getUsedUnits());
		$stmt->bindValue(8,$this->getSubject());
		$stmt->bindValue(9,$this->getDueDate());
		$stmt->bindValue(10,$this->getPlannedDuration());
		$stmt->bindValue(11,$this->getActualDuration());
		$stmt->bindValue(12,$this->getContractStatus());
		$stmt->bindValue(13,$this->getPriority());
		$stmt->bindValue(14,$this->getContractType());
		$stmt->bindValue(15,$this->getProgress());
		$stmt->bindValue(16,$this->getContractNo());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_INSERT);
		$this->bindValues($stmt);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(17,$this->getServiceContractsId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getServiceContractsId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerServiceContracts';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerServiceContracts');
	}

	/**
	 * get single VTigerServiceContracts instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerServiceContracts
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerServiceContracts();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerServiceContracts from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerServiceContracts[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerServiceContracts') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>