<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerProducts extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerProducts';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_products';
	const SQL_INSERT='INSERT INTO `vtiger_products` (`productid`,`product_no`,`productname`,`productcode`,`productcategory`,`manufacturer`,`qty_per_unit`,`unit_price`,`weight`,`pack_size`,`sales_start_date`,`sales_end_date`,`start_date`,`expiry_date`,`cost_factor`,`commissionrate`,`commissionmethod`,`discontinued`,`usageunit`,`reorderlevel`,`website`,`taxclass`,`mfr_part_no`,`vendor_part_no`,`serialno`,`qtyinstock`,`productsheet`,`qtyindemand`,`glacct`,`vendor_id`,`imagename`,`currency_id`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_products` (`productid`,`product_no`,`productname`,`productcode`,`productcategory`,`manufacturer`,`qty_per_unit`,`unit_price`,`weight`,`pack_size`,`sales_start_date`,`sales_end_date`,`start_date`,`expiry_date`,`cost_factor`,`commissionrate`,`commissionmethod`,`discontinued`,`usageunit`,`reorderlevel`,`website`,`taxclass`,`mfr_part_no`,`vendor_part_no`,`serialno`,`qtyinstock`,`productsheet`,`qtyindemand`,`glacct`,`vendor_id`,`imagename`,`currency_id`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_products` SET `productid`=?,`product_no`=?,`productname`=?,`productcode`=?,`productcategory`=?,`manufacturer`=?,`qty_per_unit`=?,`unit_price`=?,`weight`=?,`pack_size`=?,`sales_start_date`=?,`sales_end_date`=?,`start_date`=?,`expiry_date`=?,`cost_factor`=?,`commissionrate`=?,`commissionmethod`=?,`discontinued`=?,`usageunit`=?,`reorderlevel`=?,`website`=?,`taxclass`=?,`mfr_part_no`=?,`vendor_part_no`=?,`serialno`=?,`qtyinstock`=?,`productsheet`=?,`qtyindemand`=?,`glacct`=?,`vendor_id`=?,`imagename`=?,`currency_id`=? WHERE `productid`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_products` WHERE `productid`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_products` WHERE `productid`=?';
	const FIELD_PRODUCTID=1844697142;
	const FIELD_PRODUCT_NO=1351027365;
	const FIELD_PRODUCTNAME=-1067390234;
	const FIELD_PRODUCTCODE=-1067704760;
	const FIELD_PRODUCTCATEGORY=335185881;
	const FIELD_MANUFACTURER=-1726558619;
	const FIELD_QTY_PER_UNIT=-2131600029;
	const FIELD_UNIT_PRICE=2133654114;
	const FIELD_WEIGHT=-1485673460;
	const FIELD_PACK_SIZE=402136147;
	const FIELD_SALES_START_DATE=-1845117166;
	const FIELD_SALES_END_DATE=1335958521;
	const FIELD_START_DATE=-1975611137;
	const FIELD_EXPIRY_DATE=899393062;
	const FIELD_COST_FACTOR=-1689188115;
	const FIELD_COMMISSIONRATE=-1347374625;
	const FIELD_COMMISSIONMETHOD=2113663520;
	const FIELD_DISCONTINUED=-962802077;
	const FIELD_USAGEUNIT=-623305583;
	const FIELD_REORDERLEVEL=1737837053;
	const FIELD_WEBSITE=1182656903;
	const FIELD_TAXCLASS=-1565716159;
	const FIELD_MFR_PART_NO=933665843;
	const FIELD_VENDOR_PART_NO=1345158954;
	const FIELD_SERIALNO=74937161;
	const FIELD_QTYINSTOCK=2039744815;
	const FIELD_PRODUCTSHEET=1275459684;
	const FIELD_QTYINDEMAND=-1635771566;
	const FIELD_GLACCT=-1937517556;
	const FIELD_VENDOR_ID=1810556254;
	const FIELD_IMAGENAME=2019130450;
	const FIELD_CURRENCY_ID=1010102005;
	private static $PRIMARY_KEYS=array(self::FIELD_PRODUCTID);
	private static $AUTOINCREMENT_FIELDS=array();
	private static $FIELD_NAMES=array(
		self::FIELD_PRODUCTID=>'productid',
		self::FIELD_PRODUCT_NO=>'product_no',
		self::FIELD_PRODUCTNAME=>'productname',
		self::FIELD_PRODUCTCODE=>'productcode',
		self::FIELD_PRODUCTCATEGORY=>'productcategory',
		self::FIELD_MANUFACTURER=>'manufacturer',
		self::FIELD_QTY_PER_UNIT=>'qty_per_unit',
		self::FIELD_UNIT_PRICE=>'unit_price',
		self::FIELD_WEIGHT=>'weight',
		self::FIELD_PACK_SIZE=>'pack_size',
		self::FIELD_SALES_START_DATE=>'sales_start_date',
		self::FIELD_SALES_END_DATE=>'sales_end_date',
		self::FIELD_START_DATE=>'start_date',
		self::FIELD_EXPIRY_DATE=>'expiry_date',
		self::FIELD_COST_FACTOR=>'cost_factor',
		self::FIELD_COMMISSIONRATE=>'commissionrate',
		self::FIELD_COMMISSIONMETHOD=>'commissionmethod',
		self::FIELD_DISCONTINUED=>'discontinued',
		self::FIELD_USAGEUNIT=>'usageunit',
		self::FIELD_REORDERLEVEL=>'reorderlevel',
		self::FIELD_WEBSITE=>'website',
		self::FIELD_TAXCLASS=>'taxclass',
		self::FIELD_MFR_PART_NO=>'mfr_part_no',
		self::FIELD_VENDOR_PART_NO=>'vendor_part_no',
		self::FIELD_SERIALNO=>'serialno',
		self::FIELD_QTYINSTOCK=>'qtyinstock',
		self::FIELD_PRODUCTSHEET=>'productsheet',
		self::FIELD_QTYINDEMAND=>'qtyindemand',
		self::FIELD_GLACCT=>'glacct',
		self::FIELD_VENDOR_ID=>'vendor_id',
		self::FIELD_IMAGENAME=>'imagename',
		self::FIELD_CURRENCY_ID=>'currency_id');
	private static $PROPERTY_NAMES=array(
		self::FIELD_PRODUCTID=>'productId',
		self::FIELD_PRODUCT_NO=>'productNo',
		self::FIELD_PRODUCTNAME=>'productName',
		self::FIELD_PRODUCTCODE=>'productCode',
		self::FIELD_PRODUCTCATEGORY=>'productCategory',
		self::FIELD_MANUFACTURER=>'manufacturer',
		self::FIELD_QTY_PER_UNIT=>'qtyPerUnit',
		self::FIELD_UNIT_PRICE=>'unitPrice',
		self::FIELD_WEIGHT=>'weight',
		self::FIELD_PACK_SIZE=>'packSize',
		self::FIELD_SALES_START_DATE=>'salesStartDate',
		self::FIELD_SALES_END_DATE=>'salesEndDate',
		self::FIELD_START_DATE=>'startDate',
		self::FIELD_EXPIRY_DATE=>'expiryDate',
		self::FIELD_COST_FACTOR=>'costFactor',
		self::FIELD_COMMISSIONRATE=>'commissionRate',
		self::FIELD_COMMISSIONMETHOD=>'commissionMethod',
		self::FIELD_DISCONTINUED=>'discontinued',
		self::FIELD_USAGEUNIT=>'usageUnit',
		self::FIELD_REORDERLEVEL=>'reorderLevel',
		self::FIELD_WEBSITE=>'website',
		self::FIELD_TAXCLASS=>'taxClass',
		self::FIELD_MFR_PART_NO=>'mfrPartNo',
		self::FIELD_VENDOR_PART_NO=>'vendorPartNo',
		self::FIELD_SERIALNO=>'serialNo',
		self::FIELD_QTYINSTOCK=>'qtYinStock',
		self::FIELD_PRODUCTSHEET=>'productsHeEt',
		self::FIELD_QTYINDEMAND=>'qtYinDemand',
		self::FIELD_GLACCT=>'glAcct',
		self::FIELD_VENDOR_ID=>'vendorId',
		self::FIELD_IMAGENAME=>'imageName',
		self::FIELD_CURRENCY_ID=>'currencyId');
	private static $PROPERTY_TYPES=array(
		self::FIELD_PRODUCTID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_PRODUCT_NO=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PRODUCTNAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PRODUCTCODE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PRODUCTCATEGORY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MANUFACTURER=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_QTY_PER_UNIT=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_UNIT_PRICE=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_WEIGHT=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_PACK_SIZE=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_SALES_START_DATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SALES_END_DATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_START_DATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_EXPIRY_DATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_COST_FACTOR=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_COMMISSIONRATE=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_COMMISSIONMETHOD=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DISCONTINUED=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_USAGEUNIT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_REORDERLEVEL=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_WEBSITE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TAXCLASS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MFR_PART_NO=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_VENDOR_PART_NO=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SERIALNO=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_QTYINSTOCK=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_PRODUCTSHEET=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_QTYINDEMAND=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_GLACCT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_VENDOR_ID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_IMAGENAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CURRENCY_ID=>Db2PhpEntity::PHP_TYPE_INT);
	private static $FIELD_TYPES=array(
		self::FIELD_PRODUCTID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_PRODUCT_NO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,false),
		self::FIELD_PRODUCTNAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,false),
		self::FIELD_PRODUCTCODE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,40,0,true),
		self::FIELD_PRODUCTCATEGORY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_MANUFACTURER=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_QTY_PER_UNIT=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,11,2,true),
		self::FIELD_UNIT_PRICE=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,25,2,true),
		self::FIELD_WEIGHT=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,11,3,true),
		self::FIELD_PACK_SIZE=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_SALES_START_DATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_SALES_END_DATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_START_DATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_EXPIRY_DATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_COST_FACTOR=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_COMMISSIONRATE=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,7,3,true),
		self::FIELD_COMMISSIONMETHOD=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_DISCONTINUED=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_USAGEUNIT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_REORDERLEVEL=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_WEBSITE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_TAXCLASS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_MFR_PART_NO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_VENDOR_PART_NO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_SERIALNO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_QTYINSTOCK=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,25,3,true),
		self::FIELD_PRODUCTSHEET=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_QTYINDEMAND=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_GLACCT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_VENDOR_ID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_IMAGENAME=>array(Db2PhpEntity::JDBC_TYPE_LONGVARCHAR,65535,0,true),
		self::FIELD_CURRENCY_ID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false));
	private static $DEFAULT_VALUES=array(
		self::FIELD_PRODUCTID=>0,
		self::FIELD_PRODUCT_NO=>'',
		self::FIELD_PRODUCTNAME=>'',
		self::FIELD_PRODUCTCODE=>null,
		self::FIELD_PRODUCTCATEGORY=>null,
		self::FIELD_MANUFACTURER=>null,
		self::FIELD_QTY_PER_UNIT=>0.00,
		self::FIELD_UNIT_PRICE=>null,
		self::FIELD_WEIGHT=>null,
		self::FIELD_PACK_SIZE=>null,
		self::FIELD_SALES_START_DATE=>null,
		self::FIELD_SALES_END_DATE=>null,
		self::FIELD_START_DATE=>null,
		self::FIELD_EXPIRY_DATE=>null,
		self::FIELD_COST_FACTOR=>null,
		self::FIELD_COMMISSIONRATE=>null,
		self::FIELD_COMMISSIONMETHOD=>null,
		self::FIELD_DISCONTINUED=>0,
		self::FIELD_USAGEUNIT=>null,
		self::FIELD_REORDERLEVEL=>null,
		self::FIELD_WEBSITE=>null,
		self::FIELD_TAXCLASS=>null,
		self::FIELD_MFR_PART_NO=>null,
		self::FIELD_VENDOR_PART_NO=>null,
		self::FIELD_SERIALNO=>null,
		self::FIELD_QTYINSTOCK=>null,
		self::FIELD_PRODUCTSHEET=>null,
		self::FIELD_QTYINDEMAND=>null,
		self::FIELD_GLACCT=>null,
		self::FIELD_VENDOR_ID=>null,
		self::FIELD_IMAGENAME=>null,
		self::FIELD_CURRENCY_ID=>1);
	private $productId;
	private $productNo;
	private $productName;
	private $productCode;
	private $productCategory;
	private $manufacturer;
	private $qtyPerUnit;
	private $unitPrice;
	private $weight;
	private $packSize;
	private $salesStartDate;
	private $salesEndDate;
	private $startDate;
	private $expiryDate;
	private $costFactor;
	private $commissionRate;
	private $commissionMethod;
	private $discontinued;
	private $usageUnit;
	private $reorderLevel;
	private $website;
	private $taxClass;
	private $mfrPartNo;
	private $vendorPartNo;
	private $serialNo;
	private $qtYinStock;
	private $productsHeEt;
	private $qtYinDemand;
	private $glAcct;
	private $vendorId;
	private $imageName;
	private $currencyId;

	/**
	 * set value for productid 
	 *
	 * type:INT,size:10,default:null,primary,unique
	 *
	 * @param mixed $productId
	 * @return VTigerProducts
	 */
	public function &setProductId($productId) {
		$this->notifyChanged(self::FIELD_PRODUCTID,$this->productId,$productId);
		$this->productId=$productId;
		return $this;
	}

	/**
	 * get value for productid 
	 *
	 * type:INT,size:10,default:null,primary,unique
	 *
	 * @return mixed
	 */
	public function getProductId() {
		return $this->productId;
	}

	/**
	 * set value for product_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @param mixed $productNo
	 * @return VTigerProducts
	 */
	public function &setProductNo($productNo) {
		$this->notifyChanged(self::FIELD_PRODUCT_NO,$this->productNo,$productNo);
		$this->productNo=$productNo;
		return $this;
	}

	/**
	 * get value for product_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @return mixed
	 */
	public function getProductNo() {
		return $this->productNo;
	}

	/**
	 * set value for productname 
	 *
	 * type:VARCHAR,size:50,default:null
	 *
	 * @param mixed $productName
	 * @return VTigerProducts
	 */
	public function &setProductName($productName) {
		$this->notifyChanged(self::FIELD_PRODUCTNAME,$this->productName,$productName);
		$this->productName=$productName;
		return $this;
	}

	/**
	 * get value for productname 
	 *
	 * type:VARCHAR,size:50,default:null
	 *
	 * @return mixed
	 */
	public function getProductName() {
		return $this->productName;
	}

	/**
	 * set value for productcode 
	 *
	 * type:VARCHAR,size:40,default:null,nullable
	 *
	 * @param mixed $productCode
	 * @return VTigerProducts
	 */
	public function &setProductCode($productCode) {
		$this->notifyChanged(self::FIELD_PRODUCTCODE,$this->productCode,$productCode);
		$this->productCode=$productCode;
		return $this;
	}

	/**
	 * get value for productcode 
	 *
	 * type:VARCHAR,size:40,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getProductCode() {
		return $this->productCode;
	}

	/**
	 * set value for productcategory 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $productCategory
	 * @return VTigerProducts
	 */
	public function &setProductCategory($productCategory) {
		$this->notifyChanged(self::FIELD_PRODUCTCATEGORY,$this->productCategory,$productCategory);
		$this->productCategory=$productCategory;
		return $this;
	}

	/**
	 * get value for productcategory 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getProductCategory() {
		return $this->productCategory;
	}

	/**
	 * set value for manufacturer 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $manufacturer
	 * @return VTigerProducts
	 */
	public function &setManufacturer($manufacturer) {
		$this->notifyChanged(self::FIELD_MANUFACTURER,$this->manufacturer,$manufacturer);
		$this->manufacturer=$manufacturer;
		return $this;
	}

	/**
	 * get value for manufacturer 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getManufacturer() {
		return $this->manufacturer;
	}

	/**
	 * set value for qty_per_unit 
	 *
	 * type:DECIMAL,size:11,default:0.00,nullable
	 *
	 * @param mixed $qtyPerUnit
	 * @return VTigerProducts
	 */
	public function &setQtyPerUnit($qtyPerUnit) {
		$this->notifyChanged(self::FIELD_QTY_PER_UNIT,$this->qtyPerUnit,$qtyPerUnit);
		$this->qtyPerUnit=$qtyPerUnit;
		return $this;
	}

	/**
	 * get value for qty_per_unit 
	 *
	 * type:DECIMAL,size:11,default:0.00,nullable
	 *
	 * @return mixed
	 */
	public function getQtyPerUnit() {
		return $this->qtyPerUnit;
	}

	/**
	 * set value for unit_price 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @param mixed $unitPrice
	 * @return VTigerProducts
	 */
	public function &setUnitPrice($unitPrice) {
		$this->notifyChanged(self::FIELD_UNIT_PRICE,$this->unitPrice,$unitPrice);
		$this->unitPrice=$unitPrice;
		return $this;
	}

	/**
	 * get value for unit_price 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getUnitPrice() {
		return $this->unitPrice;
	}

	/**
	 * set value for weight 
	 *
	 * type:DECIMAL,size:11,default:null,nullable
	 *
	 * @param mixed $weight
	 * @return VTigerProducts
	 */
	public function &setWeight($weight) {
		$this->notifyChanged(self::FIELD_WEIGHT,$this->weight,$weight);
		$this->weight=$weight;
		return $this;
	}

	/**
	 * get value for weight 
	 *
	 * type:DECIMAL,size:11,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getWeight() {
		return $this->weight;
	}

	/**
	 * set value for pack_size 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $packSize
	 * @return VTigerProducts
	 */
	public function &setPackSize($packSize) {
		$this->notifyChanged(self::FIELD_PACK_SIZE,$this->packSize,$packSize);
		$this->packSize=$packSize;
		return $this;
	}

	/**
	 * get value for pack_size 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPackSize() {
		return $this->packSize;
	}

	/**
	 * set value for sales_start_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $salesStartDate
	 * @return VTigerProducts
	 */
	public function &setSalesStartDate($salesStartDate) {
		$this->notifyChanged(self::FIELD_SALES_START_DATE,$this->salesStartDate,$salesStartDate);
		$this->salesStartDate=$salesStartDate;
		return $this;
	}

	/**
	 * get value for sales_start_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSalesStartDate() {
		return $this->salesStartDate;
	}

	/**
	 * set value for sales_end_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $salesEndDate
	 * @return VTigerProducts
	 */
	public function &setSalesEndDate($salesEndDate) {
		$this->notifyChanged(self::FIELD_SALES_END_DATE,$this->salesEndDate,$salesEndDate);
		$this->salesEndDate=$salesEndDate;
		return $this;
	}

	/**
	 * get value for sales_end_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSalesEndDate() {
		return $this->salesEndDate;
	}

	/**
	 * set value for start_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $startDate
	 * @return VTigerProducts
	 */
	public function &setStartDate($startDate) {
		$this->notifyChanged(self::FIELD_START_DATE,$this->startDate,$startDate);
		$this->startDate=$startDate;
		return $this;
	}

	/**
	 * get value for start_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getStartDate() {
		return $this->startDate;
	}

	/**
	 * set value for expiry_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $expiryDate
	 * @return VTigerProducts
	 */
	public function &setExpiryDate($expiryDate) {
		$this->notifyChanged(self::FIELD_EXPIRY_DATE,$this->expiryDate,$expiryDate);
		$this->expiryDate=$expiryDate;
		return $this;
	}

	/**
	 * get value for expiry_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getExpiryDate() {
		return $this->expiryDate;
	}

	/**
	 * set value for cost_factor 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $costFactor
	 * @return VTigerProducts
	 */
	public function &setCostFactor($costFactor) {
		$this->notifyChanged(self::FIELD_COST_FACTOR,$this->costFactor,$costFactor);
		$this->costFactor=$costFactor;
		return $this;
	}

	/**
	 * get value for cost_factor 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getCostFactor() {
		return $this->costFactor;
	}

	/**
	 * set value for commissionrate 
	 *
	 * type:DECIMAL,size:7,default:null,nullable
	 *
	 * @param mixed $commissionRate
	 * @return VTigerProducts
	 */
	public function &setCommissionRate($commissionRate) {
		$this->notifyChanged(self::FIELD_COMMISSIONRATE,$this->commissionRate,$commissionRate);
		$this->commissionRate=$commissionRate;
		return $this;
	}

	/**
	 * get value for commissionrate 
	 *
	 * type:DECIMAL,size:7,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getCommissionRate() {
		return $this->commissionRate;
	}

	/**
	 * set value for commissionmethod 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $commissionMethod
	 * @return VTigerProducts
	 */
	public function &setCommissionMethod($commissionMethod) {
		$this->notifyChanged(self::FIELD_COMMISSIONMETHOD,$this->commissionMethod,$commissionMethod);
		$this->commissionMethod=$commissionMethod;
		return $this;
	}

	/**
	 * get value for commissionmethod 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getCommissionMethod() {
		return $this->commissionMethod;
	}

	/**
	 * set value for discontinued 
	 *
	 * type:INT,size:10,default:0
	 *
	 * @param mixed $discontinued
	 * @return VTigerProducts
	 */
	public function &setDiscontinued($discontinued) {
		$this->notifyChanged(self::FIELD_DISCONTINUED,$this->discontinued,$discontinued);
		$this->discontinued=$discontinued;
		return $this;
	}

	/**
	 * get value for discontinued 
	 *
	 * type:INT,size:10,default:0
	 *
	 * @return mixed
	 */
	public function getDiscontinued() {
		return $this->discontinued;
	}

	/**
	 * set value for usageunit 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $usageUnit
	 * @return VTigerProducts
	 */
	public function &setUsageUnit($usageUnit) {
		$this->notifyChanged(self::FIELD_USAGEUNIT,$this->usageUnit,$usageUnit);
		$this->usageUnit=$usageUnit;
		return $this;
	}

	/**
	 * get value for usageunit 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getUsageUnit() {
		return $this->usageUnit;
	}

	/**
	 * set value for reorderlevel 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $reorderLevel
	 * @return VTigerProducts
	 */
	public function &setReorderLevel($reorderLevel) {
		$this->notifyChanged(self::FIELD_REORDERLEVEL,$this->reorderLevel,$reorderLevel);
		$this->reorderLevel=$reorderLevel;
		return $this;
	}

	/**
	 * get value for reorderlevel 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getReorderLevel() {
		return $this->reorderLevel;
	}

	/**
	 * set value for website 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $website
	 * @return VTigerProducts
	 */
	public function &setWebsite($website) {
		$this->notifyChanged(self::FIELD_WEBSITE,$this->website,$website);
		$this->website=$website;
		return $this;
	}

	/**
	 * get value for website 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getWebsite() {
		return $this->website;
	}

	/**
	 * set value for taxclass 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $taxClass
	 * @return VTigerProducts
	 */
	public function &setTaxClass($taxClass) {
		$this->notifyChanged(self::FIELD_TAXCLASS,$this->taxClass,$taxClass);
		$this->taxClass=$taxClass;
		return $this;
	}

	/**
	 * get value for taxclass 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTaxClass() {
		return $this->taxClass;
	}

	/**
	 * set value for mfr_part_no 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $mfrPartNo
	 * @return VTigerProducts
	 */
	public function &setMfrPartNo($mfrPartNo) {
		$this->notifyChanged(self::FIELD_MFR_PART_NO,$this->mfrPartNo,$mfrPartNo);
		$this->mfrPartNo=$mfrPartNo;
		return $this;
	}

	/**
	 * get value for mfr_part_no 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMfrPartNo() {
		return $this->mfrPartNo;
	}

	/**
	 * set value for vendor_part_no 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $vendorPartNo
	 * @return VTigerProducts
	 */
	public function &setVendorPartNo($vendorPartNo) {
		$this->notifyChanged(self::FIELD_VENDOR_PART_NO,$this->vendorPartNo,$vendorPartNo);
		$this->vendorPartNo=$vendorPartNo;
		return $this;
	}

	/**
	 * get value for vendor_part_no 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getVendorPartNo() {
		return $this->vendorPartNo;
	}

	/**
	 * set value for serialno 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $serialNo
	 * @return VTigerProducts
	 */
	public function &setSerialNo($serialNo) {
		$this->notifyChanged(self::FIELD_SERIALNO,$this->serialNo,$serialNo);
		$this->serialNo=$serialNo;
		return $this;
	}

	/**
	 * get value for serialno 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSerialNo() {
		return $this->serialNo;
	}

	/**
	 * set value for qtyinstock 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @param mixed $qtYinStock
	 * @return VTigerProducts
	 */
	public function &setQtYinStock($qtYinStock) {
		$this->notifyChanged(self::FIELD_QTYINSTOCK,$this->qtYinStock,$qtYinStock);
		$this->qtYinStock=$qtYinStock;
		return $this;
	}

	/**
	 * get value for qtyinstock 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getQtYinStock() {
		return $this->qtYinStock;
	}

	/**
	 * set value for productsheet 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $productsHeEt
	 * @return VTigerProducts
	 */
	public function &setProductsHeEt($productsHeEt) {
		$this->notifyChanged(self::FIELD_PRODUCTSHEET,$this->productsHeEt,$productsHeEt);
		$this->productsHeEt=$productsHeEt;
		return $this;
	}

	/**
	 * get value for productsheet 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getProductsHeEt() {
		return $this->productsHeEt;
	}

	/**
	 * set value for qtyindemand 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $qtYinDemand
	 * @return VTigerProducts
	 */
	public function &setQtYinDemand($qtYinDemand) {
		$this->notifyChanged(self::FIELD_QTYINDEMAND,$this->qtYinDemand,$qtYinDemand);
		$this->qtYinDemand=$qtYinDemand;
		return $this;
	}

	/**
	 * get value for qtyindemand 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getQtYinDemand() {
		return $this->qtYinDemand;
	}

	/**
	 * set value for glacct 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $glAcct
	 * @return VTigerProducts
	 */
	public function &setGlAcct($glAcct) {
		$this->notifyChanged(self::FIELD_GLACCT,$this->glAcct,$glAcct);
		$this->glAcct=$glAcct;
		return $this;
	}

	/**
	 * get value for glacct 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getGlAcct() {
		return $this->glAcct;
	}

	/**
	 * set value for vendor_id 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $vendorId
	 * @return VTigerProducts
	 */
	public function &setVendorId($vendorId) {
		$this->notifyChanged(self::FIELD_VENDOR_ID,$this->vendorId,$vendorId);
		$this->vendorId=$vendorId;
		return $this;
	}

	/**
	 * get value for vendor_id 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getVendorId() {
		return $this->vendorId;
	}

	/**
	 * set value for imagename 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @param mixed $imageName
	 * @return VTigerProducts
	 */
	public function &setImageName($imageName) {
		$this->notifyChanged(self::FIELD_IMAGENAME,$this->imageName,$imageName);
		$this->imageName=$imageName;
		return $this;
	}

	/**
	 * get value for imagename 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getImageName() {
		return $this->imageName;
	}

	/**
	 * set value for currency_id 
	 *
	 * type:INT,size:10,default:1
	 *
	 * @param mixed $currencyId
	 * @return VTigerProducts
	 */
	public function &setCurrencyId($currencyId) {
		$this->notifyChanged(self::FIELD_CURRENCY_ID,$this->currencyId,$currencyId);
		$this->currencyId=$currencyId;
		return $this;
	}

	/**
	 * get value for currency_id 
	 *
	 * type:INT,size:10,default:1
	 *
	 * @return mixed
	 */
	public function getCurrencyId() {
		return $this->currencyId;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_PRODUCTID=>$this->getProductId(),
			self::FIELD_PRODUCT_NO=>$this->getProductNo(),
			self::FIELD_PRODUCTNAME=>$this->getProductName(),
			self::FIELD_PRODUCTCODE=>$this->getProductCode(),
			self::FIELD_PRODUCTCATEGORY=>$this->getProductCategory(),
			self::FIELD_MANUFACTURER=>$this->getManufacturer(),
			self::FIELD_QTY_PER_UNIT=>$this->getQtyPerUnit(),
			self::FIELD_UNIT_PRICE=>$this->getUnitPrice(),
			self::FIELD_WEIGHT=>$this->getWeight(),
			self::FIELD_PACK_SIZE=>$this->getPackSize(),
			self::FIELD_SALES_START_DATE=>$this->getSalesStartDate(),
			self::FIELD_SALES_END_DATE=>$this->getSalesEndDate(),
			self::FIELD_START_DATE=>$this->getStartDate(),
			self::FIELD_EXPIRY_DATE=>$this->getExpiryDate(),
			self::FIELD_COST_FACTOR=>$this->getCostFactor(),
			self::FIELD_COMMISSIONRATE=>$this->getCommissionRate(),
			self::FIELD_COMMISSIONMETHOD=>$this->getCommissionMethod(),
			self::FIELD_DISCONTINUED=>$this->getDiscontinued(),
			self::FIELD_USAGEUNIT=>$this->getUsageUnit(),
			self::FIELD_REORDERLEVEL=>$this->getReorderLevel(),
			self::FIELD_WEBSITE=>$this->getWebsite(),
			self::FIELD_TAXCLASS=>$this->getTaxClass(),
			self::FIELD_MFR_PART_NO=>$this->getMfrPartNo(),
			self::FIELD_VENDOR_PART_NO=>$this->getVendorPartNo(),
			self::FIELD_SERIALNO=>$this->getSerialNo(),
			self::FIELD_QTYINSTOCK=>$this->getQtYinStock(),
			self::FIELD_PRODUCTSHEET=>$this->getProductsHeEt(),
			self::FIELD_QTYINDEMAND=>$this->getQtYinDemand(),
			self::FIELD_GLACCT=>$this->getGlAcct(),
			self::FIELD_VENDOR_ID=>$this->getVendorId(),
			self::FIELD_IMAGENAME=>$this->getImageName(),
			self::FIELD_CURRENCY_ID=>$this->getCurrencyId());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_PRODUCTID=>$this->getProductId());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerProducts instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerProducts $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerProducts[]
	 */
	public static function findByExample(PDO $db,VTigerProducts $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerProducts instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerProducts[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_products`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerProducts instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerProducts[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerProducts instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerProducts[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerProducts();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerProducts instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerProducts[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_products`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setProductId($result['productid']);
		$this->setProductNo($result['product_no']);
		$this->setProductName($result['productname']);
		$this->setProductCode($result['productcode']);
		$this->setProductCategory($result['productcategory']);
		$this->setManufacturer($result['manufacturer']);
		$this->setQtyPerUnit($result['qty_per_unit']);
		$this->setUnitPrice($result['unit_price']);
		$this->setWeight($result['weight']);
		$this->setPackSize($result['pack_size']);
		$this->setSalesStartDate($result['sales_start_date']);
		$this->setSalesEndDate($result['sales_end_date']);
		$this->setStartDate($result['start_date']);
		$this->setExpiryDate($result['expiry_date']);
		$this->setCostFactor($result['cost_factor']);
		$this->setCommissionRate($result['commissionrate']);
		$this->setCommissionMethod($result['commissionmethod']);
		$this->setDiscontinued($result['discontinued']);
		$this->setUsageUnit($result['usageunit']);
		$this->setReorderLevel($result['reorderlevel']);
		$this->setWebsite($result['website']);
		$this->setTaxClass($result['taxclass']);
		$this->setMfrPartNo($result['mfr_part_no']);
		$this->setVendorPartNo($result['vendor_part_no']);
		$this->setSerialNo($result['serialno']);
		$this->setQtYinStock($result['qtyinstock']);
		$this->setProductsHeEt($result['productsheet']);
		$this->setQtYinDemand($result['qtyindemand']);
		$this->setGlAcct($result['glacct']);
		$this->setVendorId($result['vendor_id']);
		$this->setImageName($result['imagename']);
		$this->setCurrencyId($result['currency_id']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerProducts
	 */
	public static function findById(PDO $db,$productId) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$productId);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerProducts();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getProductId());
		$stmt->bindValue(2,$this->getProductNo());
		$stmt->bindValue(3,$this->getProductName());
		$stmt->bindValue(4,$this->getProductCode());
		$stmt->bindValue(5,$this->getProductCategory());
		$stmt->bindValue(6,$this->getManufacturer());
		$stmt->bindValue(7,$this->getQtyPerUnit());
		$stmt->bindValue(8,$this->getUnitPrice());
		$stmt->bindValue(9,$this->getWeight());
		$stmt->bindValue(10,$this->getPackSize());
		$stmt->bindValue(11,$this->getSalesStartDate());
		$stmt->bindValue(12,$this->getSalesEndDate());
		$stmt->bindValue(13,$this->getStartDate());
		$stmt->bindValue(14,$this->getExpiryDate());
		$stmt->bindValue(15,$this->getCostFactor());
		$stmt->bindValue(16,$this->getCommissionRate());
		$stmt->bindValue(17,$this->getCommissionMethod());
		$stmt->bindValue(18,$this->getDiscontinued());
		$stmt->bindValue(19,$this->getUsageUnit());
		$stmt->bindValue(20,$this->getReorderLevel());
		$stmt->bindValue(21,$this->getWebsite());
		$stmt->bindValue(22,$this->getTaxClass());
		$stmt->bindValue(23,$this->getMfrPartNo());
		$stmt->bindValue(24,$this->getVendorPartNo());
		$stmt->bindValue(25,$this->getSerialNo());
		$stmt->bindValue(26,$this->getQtYinStock());
		$stmt->bindValue(27,$this->getProductsHeEt());
		$stmt->bindValue(28,$this->getQtYinDemand());
		$stmt->bindValue(29,$this->getGlAcct());
		$stmt->bindValue(30,$this->getVendorId());
		$stmt->bindValue(31,$this->getImageName());
		$stmt->bindValue(32,$this->getCurrencyId());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_INSERT);
		$this->bindValues($stmt);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(33,$this->getProductId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getProductId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Fetch VTigerActivityProductRel's which this VTigerProducts references.
	 * `vtiger_products`.`productid` -> `vtiger_activityproductrel`.`productid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerActivityProductRel[]
	 */
	public function fetchVTigerActivityProductRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerActivityProductRel::FIELD_PRODUCTID=>$this->getProductId());
		return VTigerActivityProductRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerProductCf's which this VTigerProducts references.
	 * `vtiger_products`.`productid` -> `vtiger_productcf`.`productid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerProductCf[]
	 */
	public function fetchVTigerProductCfCollection(PDO $db, $sort=null) {
		$filter=array(VTigerProductCf::FIELD_PRODUCTID=>$this->getProductId());
		return VTigerProductCf::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerProductCollateralS's which this VTigerProducts references.
	 * `vtiger_products`.`productid` -> `vtiger_productcollaterals`.`productid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerProductCollateralS[]
	 */
	public function fetchVTigerProductCollateralSCollection(PDO $db, $sort=null) {
		$filter=array(VTigerProductCollateralS::FIELD_PRODUCTID=>$this->getProductId());
		return VTigerProductCollateralS::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerSeProductsRel's which this VTigerProducts references.
	 * `vtiger_products`.`productid` -> `vtiger_seproductsrel`.`productid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerSeProductsRel[]
	 */
	public function fetchVTigerSeProductsRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerSeProductsRel::FIELD_PRODUCTID=>$this->getProductId());
		return VTigerSeProductsRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerCRmEntity which references this VTigerProducts. Will return null in case reference is invalid.
	 * `vtiger_products`.`productid` -> `vtiger_crmentity`.`crmid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerCRmEntity
	 */
	public function fetchVTigerCRmEntity(PDO $db, $sort=null) {
		$filter=array(VTigerCRmEntity::FIELD_CRMID=>$this->getProductId());
		$result=VTigerCRmEntity::findByFilter($db, $filter, true, $sort);
		return empty($result) ? null : $result[0];
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerProducts';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerProducts');
	}

	/**
	 * get single VTigerProducts instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerProducts
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerProducts();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerProducts from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerProducts[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerProducts') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>