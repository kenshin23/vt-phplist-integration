<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerContactDetails extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerContactDetails';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_contactdetails';
	const SQL_INSERT='INSERT INTO `vtiger_contactdetails` (`contactid`,`contact_no`,`accountid`,`salutation`,`firstname`,`lastname`,`email`,`phone`,`mobile`,`title`,`department`,`fax`,`reportsto`,`training`,`usertype`,`contacttype`,`otheremail`,`secondaryemail`,`donotcall`,`emailoptout`,`imagename`,`reference`,`notify_owner`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_contactdetails` (`contactid`,`contact_no`,`accountid`,`salutation`,`firstname`,`lastname`,`email`,`phone`,`mobile`,`title`,`department`,`fax`,`reportsto`,`training`,`usertype`,`contacttype`,`otheremail`,`secondaryemail`,`donotcall`,`emailoptout`,`imagename`,`reference`,`notify_owner`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_contactdetails` SET `contactid`=?,`contact_no`=?,`accountid`=?,`salutation`=?,`firstname`=?,`lastname`=?,`email`=?,`phone`=?,`mobile`=?,`title`=?,`department`=?,`fax`=?,`reportsto`=?,`training`=?,`usertype`=?,`contacttype`=?,`otheremail`=?,`secondaryemail`=?,`donotcall`=?,`emailoptout`=?,`imagename`=?,`reference`=?,`notify_owner`=? WHERE `contactid`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_contactdetails` WHERE `contactid`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_contactdetails` WHERE `contactid`=?';
	const FIELD_CONTACTID=1455626725;
	const FIELD_CONTACT_NO=-2120220970;
	const FIELD_ACCOUNTID=39727282;
	const FIELD_SALUTATION=804055726;
	const FIELD_FIRSTNAME=2000545253;
	const FIELD_LASTNAME=679781431;
	const FIELD_EMAIL=56467782;
	const FIELD_PHONE=66491160;
	const FIELD_MOBILE=1981411384;
	const FIELD_TITLE=70219778;
	const FIELD_DEPARTMENT=-1411913752;
	const FIELD_FAX=-1796586681;
	const FIELD_REPORTSTO=1513446692;
	const FIELD_TRAINING=-880420112;
	const FIELD_USERTYPE=1872916379;
	const FIELD_CONTACTTYPE=-1301704316;
	const FIELD_OTHEREMAIL=1857968930;
	const FIELD_SECONDARYEMAIL=1990724670;
	const FIELD_DONOTCALL=-477444752;
	const FIELD_EMAILOPTOUT=1335866497;
	const FIELD_IMAGENAME=989359888;
	const FIELD_REFERENCE=941600757;
	const FIELD_NOTIFY_OWNER=-1186698925;
	private static $PRIMARY_KEYS=array(self::FIELD_CONTACTID);
	private static $AUTOINCREMENT_FIELDS=array();
	private static $FIELD_NAMES=array(
		self::FIELD_CONTACTID=>'contactid',
		self::FIELD_CONTACT_NO=>'contact_no',
		self::FIELD_ACCOUNTID=>'accountid',
		self::FIELD_SALUTATION=>'salutation',
		self::FIELD_FIRSTNAME=>'firstname',
		self::FIELD_LASTNAME=>'lastname',
		self::FIELD_EMAIL=>'email',
		self::FIELD_PHONE=>'phone',
		self::FIELD_MOBILE=>'mobile',
		self::FIELD_TITLE=>'title',
		self::FIELD_DEPARTMENT=>'department',
		self::FIELD_FAX=>'fax',
		self::FIELD_REPORTSTO=>'reportsto',
		self::FIELD_TRAINING=>'training',
		self::FIELD_USERTYPE=>'usertype',
		self::FIELD_CONTACTTYPE=>'contacttype',
		self::FIELD_OTHEREMAIL=>'otheremail',
		self::FIELD_SECONDARYEMAIL=>'secondaryemail',
		self::FIELD_DONOTCALL=>'donotcall',
		self::FIELD_EMAILOPTOUT=>'emailoptout',
		self::FIELD_IMAGENAME=>'imagename',
		self::FIELD_REFERENCE=>'reference',
		self::FIELD_NOTIFY_OWNER=>'notify_owner');
	private static $PROPERTY_NAMES=array(
		self::FIELD_CONTACTID=>'contactId',
		self::FIELD_CONTACT_NO=>'contactNo',
		self::FIELD_ACCOUNTID=>'accountId',
		self::FIELD_SALUTATION=>'salutation',
		self::FIELD_FIRSTNAME=>'firstName',
		self::FIELD_LASTNAME=>'lastName',
		self::FIELD_EMAIL=>'email',
		self::FIELD_PHONE=>'phone',
		self::FIELD_MOBILE=>'mobile',
		self::FIELD_TITLE=>'title',
		self::FIELD_DEPARTMENT=>'department',
		self::FIELD_FAX=>'fax',
		self::FIELD_REPORTSTO=>'reportsTo',
		self::FIELD_TRAINING=>'training',
		self::FIELD_USERTYPE=>'userType',
		self::FIELD_CONTACTTYPE=>'contactType',
		self::FIELD_OTHEREMAIL=>'oThereMail',
		self::FIELD_SECONDARYEMAIL=>'secondaryEmail',
		self::FIELD_DONOTCALL=>'dOnoTCall',
		self::FIELD_EMAILOPTOUT=>'emailOpTout',
		self::FIELD_IMAGENAME=>'imageName',
		self::FIELD_REFERENCE=>'reference',
		self::FIELD_NOTIFY_OWNER=>'notifyOwner');
	private static $PROPERTY_TYPES=array(
		self::FIELD_CONTACTID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_CONTACT_NO=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_ACCOUNTID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_SALUTATION=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_FIRSTNAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_LASTNAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_EMAIL=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PHONE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MOBILE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TITLE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DEPARTMENT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_FAX=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_REPORTSTO=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TRAINING=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_USERTYPE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CONTACTTYPE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_OTHEREMAIL=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SECONDARYEMAIL=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DONOTCALL=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_EMAILOPTOUT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_IMAGENAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_REFERENCE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_NOTIFY_OWNER=>Db2PhpEntity::PHP_TYPE_STRING);
	private static $FIELD_TYPES=array(
		self::FIELD_CONTACTID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_CONTACT_NO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,false),
		self::FIELD_ACCOUNTID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_SALUTATION=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_FIRSTNAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,40,0,true),
		self::FIELD_LASTNAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,80,0,false),
		self::FIELD_EMAIL=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_PHONE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_MOBILE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_TITLE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_DEPARTMENT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,true),
		self::FIELD_FAX=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_REPORTSTO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,true),
		self::FIELD_TRAINING=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_USERTYPE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_CONTACTTYPE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_OTHEREMAIL=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_SECONDARYEMAIL=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_DONOTCALL=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,3,0,true),
		self::FIELD_EMAILOPTOUT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,3,0,true),
		self::FIELD_IMAGENAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,150,0,true),
		self::FIELD_REFERENCE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,3,0,true),
		self::FIELD_NOTIFY_OWNER=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,3,0,true));
	private static $DEFAULT_VALUES=array(
		self::FIELD_CONTACTID=>0,
		self::FIELD_CONTACT_NO=>'',
		self::FIELD_ACCOUNTID=>null,
		self::FIELD_SALUTATION=>null,
		self::FIELD_FIRSTNAME=>null,
		self::FIELD_LASTNAME=>'',
		self::FIELD_EMAIL=>null,
		self::FIELD_PHONE=>null,
		self::FIELD_MOBILE=>null,
		self::FIELD_TITLE=>null,
		self::FIELD_DEPARTMENT=>null,
		self::FIELD_FAX=>null,
		self::FIELD_REPORTSTO=>null,
		self::FIELD_TRAINING=>null,
		self::FIELD_USERTYPE=>null,
		self::FIELD_CONTACTTYPE=>null,
		self::FIELD_OTHEREMAIL=>null,
		self::FIELD_SECONDARYEMAIL=>null,
		self::FIELD_DONOTCALL=>null,
		self::FIELD_EMAILOPTOUT=>'0',
		self::FIELD_IMAGENAME=>null,
		self::FIELD_REFERENCE=>null,
		self::FIELD_NOTIFY_OWNER=>'0');
	private $contactId;
	private $contactNo;
	private $accountId;
	private $salutation;
	private $firstName;
	private $lastName;
	private $email;
	private $phone;
	private $mobile;
	private $title;
	private $department;
	private $fax;
	private $reportsTo;
	private $training;
	private $userType;
	private $contactType;
	private $oThereMail;
	private $secondaryEmail;
	private $dOnoTCall;
	private $emailOpTout;
	private $imageName;
	private $reference;
	private $notifyOwner;

	/**
	 * set value for contactid 
	 *
	 * type:INT,size:10,default:0,primary,unique
	 *
	 * @param mixed $contactId
	 * @return VTigerContactDetails
	 */
	public function &setContactId($contactId) {
		$this->notifyChanged(self::FIELD_CONTACTID,$this->contactId,$contactId);
		$this->contactId=$contactId;
		return $this;
	}

	/**
	 * get value for contactid 
	 *
	 * type:INT,size:10,default:0,primary,unique
	 *
	 * @return mixed
	 */
	public function getContactId() {
		return $this->contactId;
	}

	/**
	 * set value for contact_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @param mixed $contactNo
	 * @return VTigerContactDetails
	 */
	public function &setContactNo($contactNo) {
		$this->notifyChanged(self::FIELD_CONTACT_NO,$this->contactNo,$contactNo);
		$this->contactNo=$contactNo;
		return $this;
	}

	/**
	 * get value for contact_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @return mixed
	 */
	public function getContactNo() {
		return $this->contactNo;
	}

	/**
	 * set value for accountid 
	 *
	 * type:INT,size:10,default:null,index,nullable
	 *
	 * @param mixed $accountId
	 * @return VTigerContactDetails
	 */
	public function &setAccountId($accountId) {
		$this->notifyChanged(self::FIELD_ACCOUNTID,$this->accountId,$accountId);
		$this->accountId=$accountId;
		return $this;
	}

	/**
	 * get value for accountid 
	 *
	 * type:INT,size:10,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getAccountId() {
		return $this->accountId;
	}

	/**
	 * set value for salutation 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $salutation
	 * @return VTigerContactDetails
	 */
	public function &setSalutation($salutation) {
		$this->notifyChanged(self::FIELD_SALUTATION,$this->salutation,$salutation);
		$this->salutation=$salutation;
		return $this;
	}

	/**
	 * get value for salutation 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSalutation() {
		return $this->salutation;
	}

	/**
	 * set value for firstname 
	 *
	 * type:VARCHAR,size:40,default:null,nullable
	 *
	 * @param mixed $firstName
	 * @return VTigerContactDetails
	 */
	public function &setFirstName($firstName) {
		$this->notifyChanged(self::FIELD_FIRSTNAME,$this->firstName,$firstName);
		$this->firstName=$firstName;
		return $this;
	}

	/**
	 * get value for firstname 
	 *
	 * type:VARCHAR,size:40,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getFirstName() {
		return $this->firstName;
	}

	/**
	 * set value for lastname 
	 *
	 * type:VARCHAR,size:80,default:null
	 *
	 * @param mixed $lastName
	 * @return VTigerContactDetails
	 */
	public function &setLastName($lastName) {
		$this->notifyChanged(self::FIELD_LASTNAME,$this->lastName,$lastName);
		$this->lastName=$lastName;
		return $this;
	}

	/**
	 * get value for lastname 
	 *
	 * type:VARCHAR,size:80,default:null
	 *
	 * @return mixed
	 */
	public function getLastName() {
		return $this->lastName;
	}

	/**
	 * set value for email 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $email
	 * @return VTigerContactDetails
	 */
	public function &setEmail($email) {
		$this->notifyChanged(self::FIELD_EMAIL,$this->email,$email);
		$this->email=$email;
		return $this;
	}

	/**
	 * get value for email 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getEmail() {
		return $this->email;
	}

	/**
	 * set value for phone 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $phone
	 * @return VTigerContactDetails
	 */
	public function &setPhone($phone) {
		$this->notifyChanged(self::FIELD_PHONE,$this->phone,$phone);
		$this->phone=$phone;
		return $this;
	}

	/**
	 * get value for phone 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPhone() {
		return $this->phone;
	}

	/**
	 * set value for mobile 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $mobile
	 * @return VTigerContactDetails
	 */
	public function &setMobile($mobile) {
		$this->notifyChanged(self::FIELD_MOBILE,$this->mobile,$mobile);
		$this->mobile=$mobile;
		return $this;
	}

	/**
	 * get value for mobile 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getMobile() {
		return $this->mobile;
	}

	/**
	 * set value for title 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $title
	 * @return VTigerContactDetails
	 */
	public function &setTitle($title) {
		$this->notifyChanged(self::FIELD_TITLE,$this->title,$title);
		$this->title=$title;
		return $this;
	}

	/**
	 * get value for title 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTitle() {
		return $this->title;
	}

	/**
	 * set value for department 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @param mixed $department
	 * @return VTigerContactDetails
	 */
	public function &setDepartment($department) {
		$this->notifyChanged(self::FIELD_DEPARTMENT,$this->department,$department);
		$this->department=$department;
		return $this;
	}

	/**
	 * get value for department 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDepartment() {
		return $this->department;
	}

	/**
	 * set value for fax 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $fax
	 * @return VTigerContactDetails
	 */
	public function &setFax($fax) {
		$this->notifyChanged(self::FIELD_FAX,$this->fax,$fax);
		$this->fax=$fax;
		return $this;
	}

	/**
	 * get value for fax 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getFax() {
		return $this->fax;
	}

	/**
	 * set value for reportsto 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @param mixed $reportsTo
	 * @return VTigerContactDetails
	 */
	public function &setReportsTo($reportsTo) {
		$this->notifyChanged(self::FIELD_REPORTSTO,$this->reportsTo,$reportsTo);
		$this->reportsTo=$reportsTo;
		return $this;
	}

	/**
	 * get value for reportsto 
	 *
	 * type:VARCHAR,size:30,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getReportsTo() {
		return $this->reportsTo;
	}

	/**
	 * set value for training 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $training
	 * @return VTigerContactDetails
	 */
	public function &setTraining($training) {
		$this->notifyChanged(self::FIELD_TRAINING,$this->training,$training);
		$this->training=$training;
		return $this;
	}

	/**
	 * get value for training 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTraining() {
		return $this->training;
	}

	/**
	 * set value for usertype 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $userType
	 * @return VTigerContactDetails
	 */
	public function &setUserType($userType) {
		$this->notifyChanged(self::FIELD_USERTYPE,$this->userType,$userType);
		$this->userType=$userType;
		return $this;
	}

	/**
	 * get value for usertype 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getUserType() {
		return $this->userType;
	}

	/**
	 * set value for contacttype 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $contactType
	 * @return VTigerContactDetails
	 */
	public function &setContactType($contactType) {
		$this->notifyChanged(self::FIELD_CONTACTTYPE,$this->contactType,$contactType);
		$this->contactType=$contactType;
		return $this;
	}

	/**
	 * get value for contacttype 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getContactType() {
		return $this->contactType;
	}

	/**
	 * set value for otheremail 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $oThereMail
	 * @return VTigerContactDetails
	 */
	public function &setOThereMail($oThereMail) {
		$this->notifyChanged(self::FIELD_OTHEREMAIL,$this->oThereMail,$oThereMail);
		$this->oThereMail=$oThereMail;
		return $this;
	}

	/**
	 * get value for otheremail 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getOThereMail() {
		return $this->oThereMail;
	}

	/**
	 * set value for secondaryemail 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $secondaryEmail
	 * @return VTigerContactDetails
	 */
	public function &setSecondaryEmail($secondaryEmail) {
		$this->notifyChanged(self::FIELD_SECONDARYEMAIL,$this->secondaryEmail,$secondaryEmail);
		$this->secondaryEmail=$secondaryEmail;
		return $this;
	}

	/**
	 * get value for secondaryemail 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSecondaryEmail() {
		return $this->secondaryEmail;
	}

	/**
	 * set value for donotcall 
	 *
	 * type:VARCHAR,size:3,default:null,nullable
	 *
	 * @param mixed $dOnoTCall
	 * @return VTigerContactDetails
	 */
	public function &setDOnoTCall($dOnoTCall) {
		$this->notifyChanged(self::FIELD_DONOTCALL,$this->dOnoTCall,$dOnoTCall);
		$this->dOnoTCall=$dOnoTCall;
		return $this;
	}

	/**
	 * get value for donotcall 
	 *
	 * type:VARCHAR,size:3,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDOnoTCall() {
		return $this->dOnoTCall;
	}

	/**
	 * set value for emailoptout 
	 *
	 * type:VARCHAR,size:3,default:0,nullable
	 *
	 * @param mixed $emailOpTout
	 * @return VTigerContactDetails
	 */
	public function &setEmailOpTout($emailOpTout) {
		$this->notifyChanged(self::FIELD_EMAILOPTOUT,$this->emailOpTout,$emailOpTout);
		$this->emailOpTout=$emailOpTout;
		return $this;
	}

	/**
	 * get value for emailoptout 
	 *
	 * type:VARCHAR,size:3,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getEmailOpTout() {
		return $this->emailOpTout;
	}

	/**
	 * set value for imagename 
	 *
	 * type:VARCHAR,size:150,default:null,nullable
	 *
	 * @param mixed $imageName
	 * @return VTigerContactDetails
	 */
	public function &setImageName($imageName) {
		$this->notifyChanged(self::FIELD_IMAGENAME,$this->imageName,$imageName);
		$this->imageName=$imageName;
		return $this;
	}

	/**
	 * get value for imagename 
	 *
	 * type:VARCHAR,size:150,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getImageName() {
		return $this->imageName;
	}

	/**
	 * set value for reference 
	 *
	 * type:VARCHAR,size:3,default:null,nullable
	 *
	 * @param mixed $reference
	 * @return VTigerContactDetails
	 */
	public function &setReference($reference) {
		$this->notifyChanged(self::FIELD_REFERENCE,$this->reference,$reference);
		$this->reference=$reference;
		return $this;
	}

	/**
	 * get value for reference 
	 *
	 * type:VARCHAR,size:3,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getReference() {
		return $this->reference;
	}

	/**
	 * set value for notify_owner 
	 *
	 * type:VARCHAR,size:3,default:0,nullable
	 *
	 * @param mixed $notifyOwner
	 * @return VTigerContactDetails
	 */
	public function &setNotifyOwner($notifyOwner) {
		$this->notifyChanged(self::FIELD_NOTIFY_OWNER,$this->notifyOwner,$notifyOwner);
		$this->notifyOwner=$notifyOwner;
		return $this;
	}

	/**
	 * get value for notify_owner 
	 *
	 * type:VARCHAR,size:3,default:0,nullable
	 *
	 * @return mixed
	 */
	public function getNotifyOwner() {
		return $this->notifyOwner;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_CONTACTID=>$this->getContactId(),
			self::FIELD_CONTACT_NO=>$this->getContactNo(),
			self::FIELD_ACCOUNTID=>$this->getAccountId(),
			self::FIELD_SALUTATION=>$this->getSalutation(),
			self::FIELD_FIRSTNAME=>$this->getFirstName(),
			self::FIELD_LASTNAME=>$this->getLastName(),
			self::FIELD_EMAIL=>$this->getEmail(),
			self::FIELD_PHONE=>$this->getPhone(),
			self::FIELD_MOBILE=>$this->getMobile(),
			self::FIELD_TITLE=>$this->getTitle(),
			self::FIELD_DEPARTMENT=>$this->getDepartment(),
			self::FIELD_FAX=>$this->getFax(),
			self::FIELD_REPORTSTO=>$this->getReportsTo(),
			self::FIELD_TRAINING=>$this->getTraining(),
			self::FIELD_USERTYPE=>$this->getUserType(),
			self::FIELD_CONTACTTYPE=>$this->getContactType(),
			self::FIELD_OTHEREMAIL=>$this->getOThereMail(),
			self::FIELD_SECONDARYEMAIL=>$this->getSecondaryEmail(),
			self::FIELD_DONOTCALL=>$this->getDOnoTCall(),
			self::FIELD_EMAILOPTOUT=>$this->getEmailOpTout(),
			self::FIELD_IMAGENAME=>$this->getImageName(),
			self::FIELD_REFERENCE=>$this->getReference(),
			self::FIELD_NOTIFY_OWNER=>$this->getNotifyOwner());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_CONTACTID=>$this->getContactId());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerContactDetails instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerContactDetails $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerContactDetails[]
	 */
	public static function findByExample(PDO $db,VTigerContactDetails $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerContactDetails instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerContactDetails[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_contactdetails`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerContactDetails instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerContactDetails[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerContactDetails instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerContactDetails[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerContactDetails();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerContactDetails instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerContactDetails[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_contactdetails`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setContactId($result['contactid']);
		$this->setContactNo($result['contact_no']);
		$this->setAccountId($result['accountid']);
		$this->setSalutation($result['salutation']);
		$this->setFirstName($result['firstname']);
		$this->setLastName($result['lastname']);
		$this->setEmail($result['email']);
		$this->setPhone($result['phone']);
		$this->setMobile($result['mobile']);
		$this->setTitle($result['title']);
		$this->setDepartment($result['department']);
		$this->setFax($result['fax']);
		$this->setReportsTo($result['reportsto']);
		$this->setTraining($result['training']);
		$this->setUserType($result['usertype']);
		$this->setContactType($result['contacttype']);
		$this->setOThereMail($result['otheremail']);
		$this->setSecondaryEmail($result['secondaryemail']);
		$this->setDOnoTCall($result['donotcall']);
		$this->setEmailOpTout($result['emailoptout']);
		$this->setImageName($result['imagename']);
		$this->setReference($result['reference']);
		$this->setNotifyOwner($result['notify_owner']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerContactDetails
	 */
	public static function findById(PDO $db,$contactId) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$contactId);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerContactDetails();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getContactId());
		$stmt->bindValue(2,$this->getContactNo());
		$stmt->bindValue(3,$this->getAccountId());
		$stmt->bindValue(4,$this->getSalutation());
		$stmt->bindValue(5,$this->getFirstName());
		$stmt->bindValue(6,$this->getLastName());
		$stmt->bindValue(7,$this->getEmail());
		$stmt->bindValue(8,$this->getPhone());
		$stmt->bindValue(9,$this->getMobile());
		$stmt->bindValue(10,$this->getTitle());
		$stmt->bindValue(11,$this->getDepartment());
		$stmt->bindValue(12,$this->getFax());
		$stmt->bindValue(13,$this->getReportsTo());
		$stmt->bindValue(14,$this->getTraining());
		$stmt->bindValue(15,$this->getUserType());
		$stmt->bindValue(16,$this->getContactType());
		$stmt->bindValue(17,$this->getOThereMail());
		$stmt->bindValue(18,$this->getSecondaryEmail());
		$stmt->bindValue(19,$this->getDOnoTCall());
		$stmt->bindValue(20,$this->getEmailOpTout());
		$stmt->bindValue(21,$this->getImageName());
		$stmt->bindValue(22,$this->getReference());
		$stmt->bindValue(23,$this->getNotifyOwner());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_INSERT);
		$this->bindValues($stmt);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(24,$this->getContactId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getContactId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Fetch VTigerCampaignContRel's which this VTigerContactDetails references.
	 * `vtiger_contactdetails`.`contactid` -> `vtiger_campaigncontrel`.`contactid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerCampaignContRel[]
	 */
	public function fetchVTigerCampaignContRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerCampaignContRel::FIELD_CONTACTID=>$this->getContactId());
		return VTigerCampaignContRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerCNtActivityRel's which this VTigerContactDetails references.
	 * `vtiger_contactdetails`.`contactid` -> `vtiger_cntactivityrel`.`contactid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerCNtActivityRel[]
	 */
	public function fetchVTigerCNtActivityRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerCNtActivityRel::FIELD_CONTACTID=>$this->getContactId());
		return VTigerCNtActivityRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerContactAddress's which this VTigerContactDetails references.
	 * `vtiger_contactdetails`.`contactid` -> `vtiger_contactaddress`.`contactaddressid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerContactAddress[]
	 */
	public function fetchVTigerContactAddressCollection(PDO $db, $sort=null) {
		$filter=array(VTigerContactAddress::FIELD_CONTACTADDRESSID=>$this->getContactId());
		return VTigerContactAddress::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerContactsCf's which this VTigerContactDetails references.
	 * `vtiger_contactdetails`.`contactid` -> `vtiger_contactscf`.`contactid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerContactsCf[]
	 */
	public function fetchVTigerContactsCfCollection(PDO $db, $sort=null) {
		$filter=array(VTigerContactsCf::FIELD_CONTACTID=>$this->getContactId());
		return VTigerContactsCf::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerContactsUbDetails's which this VTigerContactDetails references.
	 * `vtiger_contactdetails`.`contactid` -> `vtiger_contactsubdetails`.`contactsubscriptionid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerContactsUbDetails[]
	 */
	public function fetchVTigerContactsUbDetailsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerContactsUbDetails::FIELD_CONTACTSUBSCRIPTIONID=>$this->getContactId());
		return VTigerContactsUbDetails::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerCustomerDetails's which this VTigerContactDetails references.
	 * `vtiger_contactdetails`.`contactid` -> `vtiger_customerdetails`.`customerid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerCustomerDetails[]
	 */
	public function fetchVTigerCustomerDetailsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerCustomerDetails::FIELD_CUSTOMERID=>$this->getContactId());
		return VTigerCustomerDetails::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerPortalInfo's which this VTigerContactDetails references.
	 * `vtiger_contactdetails`.`contactid` -> `vtiger_portalinfo`.`id`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerPortalInfo[]
	 */
	public function fetchVTigerPortalInfoCollection(PDO $db, $sort=null) {
		$filter=array(VTigerPortalInfo::FIELD_ID=>$this->getContactId());
		return VTigerPortalInfo::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerCRmEntity which references this VTigerContactDetails. Will return null in case reference is invalid.
	 * `vtiger_contactdetails`.`contactid` -> `vtiger_crmentity`.`crmid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerCRmEntity
	 */
	public function fetchVTigerCRmEntity(PDO $db, $sort=null) {
		$filter=array(VTigerCRmEntity::FIELD_CRMID=>$this->getContactId());
		$result=VTigerCRmEntity::findByFilter($db, $filter, true, $sort);
		return empty($result) ? null : $result[0];
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerContactDetails';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerContactDetails');
	}

	/**
	 * get single VTigerContactDetails instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerContactDetails
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerContactDetails();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerContactDetails from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerContactDetails[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerContactDetails') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>