<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerService extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerService';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_service';
	const SQL_INSERT='INSERT INTO `vtiger_service` (`serviceid`,`service_no`,`servicename`,`servicecategory`,`qty_per_unit`,`unit_price`,`sales_start_date`,`sales_end_date`,`start_date`,`expiry_date`,`discontinued`,`service_usageunit`,`website`,`taxclass`,`currency_id`,`commissionrate`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_service` (`serviceid`,`service_no`,`servicename`,`servicecategory`,`qty_per_unit`,`unit_price`,`sales_start_date`,`sales_end_date`,`start_date`,`expiry_date`,`discontinued`,`service_usageunit`,`website`,`taxclass`,`currency_id`,`commissionrate`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_service` SET `serviceid`=?,`service_no`=?,`servicename`=?,`servicecategory`=?,`qty_per_unit`=?,`unit_price`=?,`sales_start_date`=?,`sales_end_date`=?,`start_date`=?,`expiry_date`=?,`discontinued`=?,`service_usageunit`=?,`website`=?,`taxclass`=?,`currency_id`=?,`commissionrate`=? WHERE `serviceid`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_service` WHERE `serviceid`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_service` WHERE `serviceid`=?';
	const FIELD_SERVICEID=-1333290527;
	const FIELD_SERVICE_NO=1617657434;
	const FIELD_SERVICENAME=-1391792687;
	const FIELD_SERVICECATEGORY=-993845948;
	const FIELD_QTY_PER_UNIT=1351321054;
	const FIELD_UNIT_PRICE=1583089053;
	const FIELD_SALES_START_DATE=663761421;
	const FIELD_SALES_END_DATE=-1651371596;
	const FIELD_START_DATE=1768791098;
	const FIELD_EXPIRY_DATE=1011745355;
	const FIELD_DISCONTINUED=-1774848290;
	const FIELD_SERVICE_USAGEUNIT=681443308;
	const FIELD_WEBSITE=-551149524;
	const FIELD_TAXCLASS=520859452;
	const FIELD_CURRENCY_ID=1122454298;
	const FIELD_COMMISSIONRATE=-39737446;
	private static $PRIMARY_KEYS=array(self::FIELD_SERVICEID);
	private static $AUTOINCREMENT_FIELDS=array();
	private static $FIELD_NAMES=array(
		self::FIELD_SERVICEID=>'serviceid',
		self::FIELD_SERVICE_NO=>'service_no',
		self::FIELD_SERVICENAME=>'servicename',
		self::FIELD_SERVICECATEGORY=>'servicecategory',
		self::FIELD_QTY_PER_UNIT=>'qty_per_unit',
		self::FIELD_UNIT_PRICE=>'unit_price',
		self::FIELD_SALES_START_DATE=>'sales_start_date',
		self::FIELD_SALES_END_DATE=>'sales_end_date',
		self::FIELD_START_DATE=>'start_date',
		self::FIELD_EXPIRY_DATE=>'expiry_date',
		self::FIELD_DISCONTINUED=>'discontinued',
		self::FIELD_SERVICE_USAGEUNIT=>'service_usageunit',
		self::FIELD_WEBSITE=>'website',
		self::FIELD_TAXCLASS=>'taxclass',
		self::FIELD_CURRENCY_ID=>'currency_id',
		self::FIELD_COMMISSIONRATE=>'commissionrate');
	private static $PROPERTY_NAMES=array(
		self::FIELD_SERVICEID=>'serviceId',
		self::FIELD_SERVICE_NO=>'serviceNo',
		self::FIELD_SERVICENAME=>'serviceName',
		self::FIELD_SERVICECATEGORY=>'serviceCategory',
		self::FIELD_QTY_PER_UNIT=>'qtyPerUnit',
		self::FIELD_UNIT_PRICE=>'unitPrice',
		self::FIELD_SALES_START_DATE=>'salesStartDate',
		self::FIELD_SALES_END_DATE=>'salesEndDate',
		self::FIELD_START_DATE=>'startDate',
		self::FIELD_EXPIRY_DATE=>'expiryDate',
		self::FIELD_DISCONTINUED=>'discontinued',
		self::FIELD_SERVICE_USAGEUNIT=>'serviceUsageUnit',
		self::FIELD_WEBSITE=>'website',
		self::FIELD_TAXCLASS=>'taxClass',
		self::FIELD_CURRENCY_ID=>'currencyId',
		self::FIELD_COMMISSIONRATE=>'commissionRate');
	private static $PROPERTY_TYPES=array(
		self::FIELD_SERVICEID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_SERVICE_NO=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SERVICENAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SERVICECATEGORY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_QTY_PER_UNIT=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_UNIT_PRICE=>Db2PhpEntity::PHP_TYPE_FLOAT,
		self::FIELD_SALES_START_DATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SALES_END_DATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_START_DATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_EXPIRY_DATE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DISCONTINUED=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_SERVICE_USAGEUNIT=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_WEBSITE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TAXCLASS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CURRENCY_ID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_COMMISSIONRATE=>Db2PhpEntity::PHP_TYPE_FLOAT);
	private static $FIELD_TYPES=array(
		self::FIELD_SERVICEID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_SERVICE_NO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,false),
		self::FIELD_SERVICENAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,false),
		self::FIELD_SERVICECATEGORY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_QTY_PER_UNIT=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,11,2,true),
		self::FIELD_UNIT_PRICE=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,25,2,true),
		self::FIELD_SALES_START_DATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_SALES_END_DATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_START_DATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_EXPIRY_DATE=>array(Db2PhpEntity::JDBC_TYPE_DATE,10,0,true),
		self::FIELD_DISCONTINUED=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_SERVICE_USAGEUNIT=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_WEBSITE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_TAXCLASS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_CURRENCY_ID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_COMMISSIONRATE=>array(Db2PhpEntity::JDBC_TYPE_DECIMAL,7,3,true));
	private static $DEFAULT_VALUES=array(
		self::FIELD_SERVICEID=>0,
		self::FIELD_SERVICE_NO=>'',
		self::FIELD_SERVICENAME=>'',
		self::FIELD_SERVICECATEGORY=>null,
		self::FIELD_QTY_PER_UNIT=>0.00,
		self::FIELD_UNIT_PRICE=>null,
		self::FIELD_SALES_START_DATE=>null,
		self::FIELD_SALES_END_DATE=>null,
		self::FIELD_START_DATE=>null,
		self::FIELD_EXPIRY_DATE=>null,
		self::FIELD_DISCONTINUED=>0,
		self::FIELD_SERVICE_USAGEUNIT=>null,
		self::FIELD_WEBSITE=>null,
		self::FIELD_TAXCLASS=>null,
		self::FIELD_CURRENCY_ID=>1,
		self::FIELD_COMMISSIONRATE=>null);
	private $serviceId;
	private $serviceNo;
	private $serviceName;
	private $serviceCategory;
	private $qtyPerUnit;
	private $unitPrice;
	private $salesStartDate;
	private $salesEndDate;
	private $startDate;
	private $expiryDate;
	private $discontinued;
	private $serviceUsageUnit;
	private $website;
	private $taxClass;
	private $currencyId;
	private $commissionRate;

	/**
	 * set value for serviceid 
	 *
	 * type:INT,size:10,default:null,primary,unique
	 *
	 * @param mixed $serviceId
	 * @return VTigerService
	 */
	public function &setServiceId($serviceId) {
		$this->notifyChanged(self::FIELD_SERVICEID,$this->serviceId,$serviceId);
		$this->serviceId=$serviceId;
		return $this;
	}

	/**
	 * get value for serviceid 
	 *
	 * type:INT,size:10,default:null,primary,unique
	 *
	 * @return mixed
	 */
	public function getServiceId() {
		return $this->serviceId;
	}

	/**
	 * set value for service_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @param mixed $serviceNo
	 * @return VTigerService
	 */
	public function &setServiceNo($serviceNo) {
		$this->notifyChanged(self::FIELD_SERVICE_NO,$this->serviceNo,$serviceNo);
		$this->serviceNo=$serviceNo;
		return $this;
	}

	/**
	 * get value for service_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @return mixed
	 */
	public function getServiceNo() {
		return $this->serviceNo;
	}

	/**
	 * set value for servicename 
	 *
	 * type:VARCHAR,size:50,default:null
	 *
	 * @param mixed $serviceName
	 * @return VTigerService
	 */
	public function &setServiceName($serviceName) {
		$this->notifyChanged(self::FIELD_SERVICENAME,$this->serviceName,$serviceName);
		$this->serviceName=$serviceName;
		return $this;
	}

	/**
	 * get value for servicename 
	 *
	 * type:VARCHAR,size:50,default:null
	 *
	 * @return mixed
	 */
	public function getServiceName() {
		return $this->serviceName;
	}

	/**
	 * set value for servicecategory 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $serviceCategory
	 * @return VTigerService
	 */
	public function &setServiceCategory($serviceCategory) {
		$this->notifyChanged(self::FIELD_SERVICECATEGORY,$this->serviceCategory,$serviceCategory);
		$this->serviceCategory=$serviceCategory;
		return $this;
	}

	/**
	 * get value for servicecategory 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getServiceCategory() {
		return $this->serviceCategory;
	}

	/**
	 * set value for qty_per_unit 
	 *
	 * type:DECIMAL,size:11,default:0.00,nullable
	 *
	 * @param mixed $qtyPerUnit
	 * @return VTigerService
	 */
	public function &setQtyPerUnit($qtyPerUnit) {
		$this->notifyChanged(self::FIELD_QTY_PER_UNIT,$this->qtyPerUnit,$qtyPerUnit);
		$this->qtyPerUnit=$qtyPerUnit;
		return $this;
	}

	/**
	 * get value for qty_per_unit 
	 *
	 * type:DECIMAL,size:11,default:0.00,nullable
	 *
	 * @return mixed
	 */
	public function getQtyPerUnit() {
		return $this->qtyPerUnit;
	}

	/**
	 * set value for unit_price 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @param mixed $unitPrice
	 * @return VTigerService
	 */
	public function &setUnitPrice($unitPrice) {
		$this->notifyChanged(self::FIELD_UNIT_PRICE,$this->unitPrice,$unitPrice);
		$this->unitPrice=$unitPrice;
		return $this;
	}

	/**
	 * get value for unit_price 
	 *
	 * type:DECIMAL,size:25,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getUnitPrice() {
		return $this->unitPrice;
	}

	/**
	 * set value for sales_start_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $salesStartDate
	 * @return VTigerService
	 */
	public function &setSalesStartDate($salesStartDate) {
		$this->notifyChanged(self::FIELD_SALES_START_DATE,$this->salesStartDate,$salesStartDate);
		$this->salesStartDate=$salesStartDate;
		return $this;
	}

	/**
	 * get value for sales_start_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSalesStartDate() {
		return $this->salesStartDate;
	}

	/**
	 * set value for sales_end_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $salesEndDate
	 * @return VTigerService
	 */
	public function &setSalesEndDate($salesEndDate) {
		$this->notifyChanged(self::FIELD_SALES_END_DATE,$this->salesEndDate,$salesEndDate);
		$this->salesEndDate=$salesEndDate;
		return $this;
	}

	/**
	 * get value for sales_end_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSalesEndDate() {
		return $this->salesEndDate;
	}

	/**
	 * set value for start_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $startDate
	 * @return VTigerService
	 */
	public function &setStartDate($startDate) {
		$this->notifyChanged(self::FIELD_START_DATE,$this->startDate,$startDate);
		$this->startDate=$startDate;
		return $this;
	}

	/**
	 * get value for start_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getStartDate() {
		return $this->startDate;
	}

	/**
	 * set value for expiry_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @param mixed $expiryDate
	 * @return VTigerService
	 */
	public function &setExpiryDate($expiryDate) {
		$this->notifyChanged(self::FIELD_EXPIRY_DATE,$this->expiryDate,$expiryDate);
		$this->expiryDate=$expiryDate;
		return $this;
	}

	/**
	 * get value for expiry_date 
	 *
	 * type:DATE,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getExpiryDate() {
		return $this->expiryDate;
	}

	/**
	 * set value for discontinued 
	 *
	 * type:INT,size:10,default:0
	 *
	 * @param mixed $discontinued
	 * @return VTigerService
	 */
	public function &setDiscontinued($discontinued) {
		$this->notifyChanged(self::FIELD_DISCONTINUED,$this->discontinued,$discontinued);
		$this->discontinued=$discontinued;
		return $this;
	}

	/**
	 * get value for discontinued 
	 *
	 * type:INT,size:10,default:0
	 *
	 * @return mixed
	 */
	public function getDiscontinued() {
		return $this->discontinued;
	}

	/**
	 * set value for service_usageunit 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $serviceUsageUnit
	 * @return VTigerService
	 */
	public function &setServiceUsageUnit($serviceUsageUnit) {
		$this->notifyChanged(self::FIELD_SERVICE_USAGEUNIT,$this->serviceUsageUnit,$serviceUsageUnit);
		$this->serviceUsageUnit=$serviceUsageUnit;
		return $this;
	}

	/**
	 * get value for service_usageunit 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getServiceUsageUnit() {
		return $this->serviceUsageUnit;
	}

	/**
	 * set value for website 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $website
	 * @return VTigerService
	 */
	public function &setWebsite($website) {
		$this->notifyChanged(self::FIELD_WEBSITE,$this->website,$website);
		$this->website=$website;
		return $this;
	}

	/**
	 * get value for website 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getWebsite() {
		return $this->website;
	}

	/**
	 * set value for taxclass 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $taxClass
	 * @return VTigerService
	 */
	public function &setTaxClass($taxClass) {
		$this->notifyChanged(self::FIELD_TAXCLASS,$this->taxClass,$taxClass);
		$this->taxClass=$taxClass;
		return $this;
	}

	/**
	 * get value for taxclass 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getTaxClass() {
		return $this->taxClass;
	}

	/**
	 * set value for currency_id 
	 *
	 * type:INT,size:10,default:1
	 *
	 * @param mixed $currencyId
	 * @return VTigerService
	 */
	public function &setCurrencyId($currencyId) {
		$this->notifyChanged(self::FIELD_CURRENCY_ID,$this->currencyId,$currencyId);
		$this->currencyId=$currencyId;
		return $this;
	}

	/**
	 * get value for currency_id 
	 *
	 * type:INT,size:10,default:1
	 *
	 * @return mixed
	 */
	public function getCurrencyId() {
		return $this->currencyId;
	}

	/**
	 * set value for commissionrate 
	 *
	 * type:DECIMAL,size:7,default:null,nullable
	 *
	 * @param mixed $commissionRate
	 * @return VTigerService
	 */
	public function &setCommissionRate($commissionRate) {
		$this->notifyChanged(self::FIELD_COMMISSIONRATE,$this->commissionRate,$commissionRate);
		$this->commissionRate=$commissionRate;
		return $this;
	}

	/**
	 * get value for commissionrate 
	 *
	 * type:DECIMAL,size:7,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getCommissionRate() {
		return $this->commissionRate;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_SERVICEID=>$this->getServiceId(),
			self::FIELD_SERVICE_NO=>$this->getServiceNo(),
			self::FIELD_SERVICENAME=>$this->getServiceName(),
			self::FIELD_SERVICECATEGORY=>$this->getServiceCategory(),
			self::FIELD_QTY_PER_UNIT=>$this->getQtyPerUnit(),
			self::FIELD_UNIT_PRICE=>$this->getUnitPrice(),
			self::FIELD_SALES_START_DATE=>$this->getSalesStartDate(),
			self::FIELD_SALES_END_DATE=>$this->getSalesEndDate(),
			self::FIELD_START_DATE=>$this->getStartDate(),
			self::FIELD_EXPIRY_DATE=>$this->getExpiryDate(),
			self::FIELD_DISCONTINUED=>$this->getDiscontinued(),
			self::FIELD_SERVICE_USAGEUNIT=>$this->getServiceUsageUnit(),
			self::FIELD_WEBSITE=>$this->getWebsite(),
			self::FIELD_TAXCLASS=>$this->getTaxClass(),
			self::FIELD_CURRENCY_ID=>$this->getCurrencyId(),
			self::FIELD_COMMISSIONRATE=>$this->getCommissionRate());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_SERVICEID=>$this->getServiceId());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerService instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerService $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerService[]
	 */
	public static function findByExample(PDO $db,VTigerService $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerService instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerService[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_service`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerService instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerService[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerService instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerService[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerService();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerService instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerService[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_service`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setServiceId($result['serviceid']);
		$this->setServiceNo($result['service_no']);
		$this->setServiceName($result['servicename']);
		$this->setServiceCategory($result['servicecategory']);
		$this->setQtyPerUnit($result['qty_per_unit']);
		$this->setUnitPrice($result['unit_price']);
		$this->setSalesStartDate($result['sales_start_date']);
		$this->setSalesEndDate($result['sales_end_date']);
		$this->setStartDate($result['start_date']);
		$this->setExpiryDate($result['expiry_date']);
		$this->setDiscontinued($result['discontinued']);
		$this->setServiceUsageUnit($result['service_usageunit']);
		$this->setWebsite($result['website']);
		$this->setTaxClass($result['taxclass']);
		$this->setCurrencyId($result['currency_id']);
		$this->setCommissionRate($result['commissionrate']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerService
	 */
	public static function findById(PDO $db,$serviceId) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$serviceId);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerService();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getServiceId());
		$stmt->bindValue(2,$this->getServiceNo());
		$stmt->bindValue(3,$this->getServiceName());
		$stmt->bindValue(4,$this->getServiceCategory());
		$stmt->bindValue(5,$this->getQtyPerUnit());
		$stmt->bindValue(6,$this->getUnitPrice());
		$stmt->bindValue(7,$this->getSalesStartDate());
		$stmt->bindValue(8,$this->getSalesEndDate());
		$stmt->bindValue(9,$this->getStartDate());
		$stmt->bindValue(10,$this->getExpiryDate());
		$stmt->bindValue(11,$this->getDiscontinued());
		$stmt->bindValue(12,$this->getServiceUsageUnit());
		$stmt->bindValue(13,$this->getWebsite());
		$stmt->bindValue(14,$this->getTaxClass());
		$stmt->bindValue(15,$this->getCurrencyId());
		$stmt->bindValue(16,$this->getCommissionRate());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_INSERT);
		$this->bindValues($stmt);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(17,$this->getServiceId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getServiceId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Fetch VTigerCRmEntity which references this VTigerService. Will return null in case reference is invalid.
	 * `vtiger_service`.`serviceid` -> `vtiger_crmentity`.`crmid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerCRmEntity
	 */
	public function fetchVTigerCRmEntity(PDO $db, $sort=null) {
		$filter=array(VTigerCRmEntity::FIELD_CRMID=>$this->getServiceId());
		$result=VTigerCRmEntity::findByFilter($db, $filter, true, $sort);
		return empty($result) ? null : $result[0];
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerService';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerService');
	}

	/**
	 * get single VTigerService instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerService
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerService();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerService from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerService[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerService') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>