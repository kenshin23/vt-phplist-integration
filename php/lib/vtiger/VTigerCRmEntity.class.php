<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerCRmEntity extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerCRmEntity';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_crmentity';
	const SQL_INSERT='INSERT INTO `vtiger_crmentity` (`crmid`,`smcreatorid`,`smownerid`,`modifiedby`,`setype`,`description`,`createdtime`,`modifiedtime`,`viewedtime`,`status`,`version`,`presence`,`deleted`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_crmentity` (`crmid`,`smcreatorid`,`smownerid`,`modifiedby`,`setype`,`description`,`createdtime`,`modifiedtime`,`viewedtime`,`status`,`version`,`presence`,`deleted`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_crmentity` SET `crmid`=?,`smcreatorid`=?,`smownerid`=?,`modifiedby`=?,`setype`=?,`description`=?,`createdtime`=?,`modifiedtime`=?,`viewedtime`=?,`status`=?,`version`=?,`presence`=?,`deleted`=? WHERE `crmid`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_crmentity` WHERE `crmid`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_crmentity` WHERE `crmid`=?';
	const FIELD_CRMID=1951611990;
	const FIELD_SMCREATORID=-1419019190;
	const FIELD_SMOWNERID=610209233;
	const FIELD_MODIFIEDBY=1838831139;
	const FIELD_SETYPE=816714575;
	const FIELD_DESCRIPTION=988829465;
	const FIELD_CREATEDTIME=-2070548270;
	const FIELD_MODIFIEDTIME=1885690265;
	const FIELD_VIEWEDTIME=-719800300;
	const FIELD_STATUS=829996725;
	const FIELD_VERSION=-2086140299;
	const FIELD_PRESENCE=462546686;
	const FIELD_DELETED=-887285322;
	private static $PRIMARY_KEYS=array(self::FIELD_CRMID);
	private static $AUTOINCREMENT_FIELDS=array();
	private static $FIELD_NAMES=array(
		self::FIELD_CRMID=>'crmid',
		self::FIELD_SMCREATORID=>'smcreatorid',
		self::FIELD_SMOWNERID=>'smownerid',
		self::FIELD_MODIFIEDBY=>'modifiedby',
		self::FIELD_SETYPE=>'setype',
		self::FIELD_DESCRIPTION=>'description',
		self::FIELD_CREATEDTIME=>'createdtime',
		self::FIELD_MODIFIEDTIME=>'modifiedtime',
		self::FIELD_VIEWEDTIME=>'viewedtime',
		self::FIELD_STATUS=>'status',
		self::FIELD_VERSION=>'version',
		self::FIELD_PRESENCE=>'presence',
		self::FIELD_DELETED=>'deleted');
	private static $PROPERTY_NAMES=array(
		self::FIELD_CRMID=>'crMid',
		self::FIELD_SMCREATORID=>'smCreatorId',
		self::FIELD_SMOWNERID=>'smOwnerId',
		self::FIELD_MODIFIEDBY=>'modifiedBy',
		self::FIELD_SETYPE=>'seType',
		self::FIELD_DESCRIPTION=>'description',
		self::FIELD_CREATEDTIME=>'createdTime',
		self::FIELD_MODIFIEDTIME=>'modifiedTime',
		self::FIELD_VIEWEDTIME=>'viewedTime',
		self::FIELD_STATUS=>'status',
		self::FIELD_VERSION=>'version',
		self::FIELD_PRESENCE=>'presence',
		self::FIELD_DELETED=>'deleted');
	private static $PROPERTY_TYPES=array(
		self::FIELD_CRMID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_SMCREATORID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_SMOWNERID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_MODIFIEDBY=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_SETYPE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DESCRIPTION=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CREATEDTIME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_MODIFIEDTIME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_VIEWEDTIME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_STATUS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_VERSION=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_PRESENCE=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_DELETED=>Db2PhpEntity::PHP_TYPE_INT);
	private static $FIELD_TYPES=array(
		self::FIELD_CRMID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_SMCREATORID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_SMOWNERID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_MODIFIEDBY=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_SETYPE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,30,0,false),
		self::FIELD_DESCRIPTION=>array(Db2PhpEntity::JDBC_TYPE_LONGVARCHAR,65535,0,true),
		self::FIELD_CREATEDTIME=>array(Db2PhpEntity::JDBC_TYPE_TIMESTAMP,19,0,false),
		self::FIELD_MODIFIEDTIME=>array(Db2PhpEntity::JDBC_TYPE_TIMESTAMP,19,0,false),
		self::FIELD_VIEWEDTIME=>array(Db2PhpEntity::JDBC_TYPE_TIMESTAMP,19,0,true),
		self::FIELD_STATUS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,50,0,true),
		self::FIELD_VERSION=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_PRESENCE=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_DELETED=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false));
	private static $DEFAULT_VALUES=array(
		self::FIELD_CRMID=>0,
		self::FIELD_SMCREATORID=>0,
		self::FIELD_SMOWNERID=>0,
		self::FIELD_MODIFIEDBY=>0,
		self::FIELD_SETYPE=>'',
		self::FIELD_DESCRIPTION=>null,
		self::FIELD_CREATEDTIME=>'',
		self::FIELD_MODIFIEDTIME=>'',
		self::FIELD_VIEWEDTIME=>null,
		self::FIELD_STATUS=>null,
		self::FIELD_VERSION=>0,
		self::FIELD_PRESENCE=>1,
		self::FIELD_DELETED=>0);
	private $crMid;
	private $smCreatorId;
	private $smOwnerId;
	private $modifiedBy;
	private $seType;
	private $description;
	private $createdTime;
	private $modifiedTime;
	private $viewedTime;
	private $status;
	private $version;
	private $presence;
	private $deleted;

	/**
	 * set value for crmid 
	 *
	 * type:INT,size:10,default:null,primary,unique
	 *
	 * @param mixed $crMid
	 * @return VTigerCRmEntity
	 */
	public function &setCrMid($crMid) {
		$this->notifyChanged(self::FIELD_CRMID,$this->crMid,$crMid);
		$this->crMid=$crMid;
		return $this;
	}

	/**
	 * get value for crmid 
	 *
	 * type:INT,size:10,default:null,primary,unique
	 *
	 * @return mixed
	 */
	public function getCrMid() {
		return $this->crMid;
	}

	/**
	 * set value for smcreatorid 
	 *
	 * type:INT,size:10,default:0,index
	 *
	 * @param mixed $smCreatorId
	 * @return VTigerCRmEntity
	 */
	public function &setSmCreatorId($smCreatorId) {
		$this->notifyChanged(self::FIELD_SMCREATORID,$this->smCreatorId,$smCreatorId);
		$this->smCreatorId=$smCreatorId;
		return $this;
	}

	/**
	 * get value for smcreatorid 
	 *
	 * type:INT,size:10,default:0,index
	 *
	 * @return mixed
	 */
	public function getSmCreatorId() {
		return $this->smCreatorId;
	}

	/**
	 * set value for smownerid 
	 *
	 * type:INT,size:10,default:0,index
	 *
	 * @param mixed $smOwnerId
	 * @return VTigerCRmEntity
	 */
	public function &setSmOwnerId($smOwnerId) {
		$this->notifyChanged(self::FIELD_SMOWNERID,$this->smOwnerId,$smOwnerId);
		$this->smOwnerId=$smOwnerId;
		return $this;
	}

	/**
	 * get value for smownerid 
	 *
	 * type:INT,size:10,default:0,index
	 *
	 * @return mixed
	 */
	public function getSmOwnerId() {
		return $this->smOwnerId;
	}

	/**
	 * set value for modifiedby 
	 *
	 * type:INT,size:10,default:0,index
	 *
	 * @param mixed $modifiedBy
	 * @return VTigerCRmEntity
	 */
	public function &setModifiedBy($modifiedBy) {
		$this->notifyChanged(self::FIELD_MODIFIEDBY,$this->modifiedBy,$modifiedBy);
		$this->modifiedBy=$modifiedBy;
		return $this;
	}

	/**
	 * get value for modifiedby 
	 *
	 * type:INT,size:10,default:0,index
	 *
	 * @return mixed
	 */
	public function getModifiedBy() {
		return $this->modifiedBy;
	}

	/**
	 * set value for setype 
	 *
	 * type:VARCHAR,size:30,default:null,index
	 *
	 * @param mixed $seType
	 * @return VTigerCRmEntity
	 */
	public function &setSeType($seType) {
		$this->notifyChanged(self::FIELD_SETYPE,$this->seType,$seType);
		$this->seType=$seType;
		return $this;
	}

	/**
	 * get value for setype 
	 *
	 * type:VARCHAR,size:30,default:null,index
	 *
	 * @return mixed
	 */
	public function getSeType() {
		return $this->seType;
	}

	/**
	 * set value for description 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @param mixed $description
	 * @return VTigerCRmEntity
	 */
	public function &setDescription($description) {
		$this->notifyChanged(self::FIELD_DESCRIPTION,$this->description,$description);
		$this->description=$description;
		return $this;
	}

	/**
	 * get value for description 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDescription() {
		return $this->description;
	}

	/**
	 * set value for createdtime 
	 *
	 * type:DATETIME,size:19,default:null
	 *
	 * @param mixed $createdTime
	 * @return VTigerCRmEntity
	 */
	public function &setCreatedTime($createdTime) {
		$this->notifyChanged(self::FIELD_CREATEDTIME,$this->createdTime,$createdTime);
		$this->createdTime=$createdTime;
		return $this;
	}

	/**
	 * get value for createdtime 
	 *
	 * type:DATETIME,size:19,default:null
	 *
	 * @return mixed
	 */
	public function getCreatedTime() {
		return $this->createdTime;
	}

	/**
	 * set value for modifiedtime 
	 *
	 * type:DATETIME,size:19,default:null
	 *
	 * @param mixed $modifiedTime
	 * @return VTigerCRmEntity
	 */
	public function &setModifiedTime($modifiedTime) {
		$this->notifyChanged(self::FIELD_MODIFIEDTIME,$this->modifiedTime,$modifiedTime);
		$this->modifiedTime=$modifiedTime;
		return $this;
	}

	/**
	 * get value for modifiedtime 
	 *
	 * type:DATETIME,size:19,default:null
	 *
	 * @return mixed
	 */
	public function getModifiedTime() {
		return $this->modifiedTime;
	}

	/**
	 * set value for viewedtime 
	 *
	 * type:DATETIME,size:19,default:null,nullable
	 *
	 * @param mixed $viewedTime
	 * @return VTigerCRmEntity
	 */
	public function &setViewedTime($viewedTime) {
		$this->notifyChanged(self::FIELD_VIEWEDTIME,$this->viewedTime,$viewedTime);
		$this->viewedTime=$viewedTime;
		return $this;
	}

	/**
	 * get value for viewedtime 
	 *
	 * type:DATETIME,size:19,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getViewedTime() {
		return $this->viewedTime;
	}

	/**
	 * set value for status 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @param mixed $status
	 * @return VTigerCRmEntity
	 */
	public function &setStatus($status) {
		$this->notifyChanged(self::FIELD_STATUS,$this->status,$status);
		$this->status=$status;
		return $this;
	}

	/**
	 * get value for status 
	 *
	 * type:VARCHAR,size:50,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getStatus() {
		return $this->status;
	}

	/**
	 * set value for version 
	 *
	 * type:INT,size:10,default:0
	 *
	 * @param mixed $version
	 * @return VTigerCRmEntity
	 */
	public function &setVersion($version) {
		$this->notifyChanged(self::FIELD_VERSION,$this->version,$version);
		$this->version=$version;
		return $this;
	}

	/**
	 * get value for version 
	 *
	 * type:INT,size:10,default:0
	 *
	 * @return mixed
	 */
	public function getVersion() {
		return $this->version;
	}

	/**
	 * set value for presence 
	 *
	 * type:INT,size:10,default:1,nullable
	 *
	 * @param mixed $presence
	 * @return VTigerCRmEntity
	 */
	public function &setPresence($presence) {
		$this->notifyChanged(self::FIELD_PRESENCE,$this->presence,$presence);
		$this->presence=$presence;
		return $this;
	}

	/**
	 * get value for presence 
	 *
	 * type:INT,size:10,default:1,nullable
	 *
	 * @return mixed
	 */
	public function getPresence() {
		return $this->presence;
	}

	/**
	 * set value for deleted 
	 *
	 * type:INT,size:10,default:0,index
	 *
	 * @param mixed $deleted
	 * @return VTigerCRmEntity
	 */
	public function &setDeleted($deleted) {
		$this->notifyChanged(self::FIELD_DELETED,$this->deleted,$deleted);
		$this->deleted=$deleted;
		return $this;
	}

	/**
	 * get value for deleted 
	 *
	 * type:INT,size:10,default:0,index
	 *
	 * @return mixed
	 */
	public function getDeleted() {
		return $this->deleted;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_CRMID=>$this->getCrMid(),
			self::FIELD_SMCREATORID=>$this->getSmCreatorId(),
			self::FIELD_SMOWNERID=>$this->getSmOwnerId(),
			self::FIELD_MODIFIEDBY=>$this->getModifiedBy(),
			self::FIELD_SETYPE=>$this->getSeType(),
			self::FIELD_DESCRIPTION=>$this->getDescription(),
			self::FIELD_CREATEDTIME=>$this->getCreatedTime(),
			self::FIELD_MODIFIEDTIME=>$this->getModifiedTime(),
			self::FIELD_VIEWEDTIME=>$this->getViewedTime(),
			self::FIELD_STATUS=>$this->getStatus(),
			self::FIELD_VERSION=>$this->getVersion(),
			self::FIELD_PRESENCE=>$this->getPresence(),
			self::FIELD_DELETED=>$this->getDeleted());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_CRMID=>$this->getCrMid());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerCRmEntity instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerCRmEntity $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerCRmEntity[]
	 */
	public static function findByExample(PDO $db,VTigerCRmEntity $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerCRmEntity instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerCRmEntity[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_crmentity`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerCRmEntity instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerCRmEntity[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerCRmEntity instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerCRmEntity[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerCRmEntity();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerCRmEntity instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerCRmEntity[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_crmentity`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setCrMid($result['crmid']);
		$this->setSmCreatorId($result['smcreatorid']);
		$this->setSmOwnerId($result['smownerid']);
		$this->setModifiedBy($result['modifiedby']);
		$this->setSeType($result['setype']);
		$this->setDescription($result['description']);
		$this->setCreatedTime($result['createdtime']);
		$this->setModifiedTime($result['modifiedtime']);
		$this->setViewedTime($result['viewedtime']);
		$this->setStatus($result['status']);
		$this->setVersion($result['version']);
		$this->setPresence($result['presence']);
		$this->setDeleted($result['deleted']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerCRmEntity
	 */
	public static function findById(PDO $db,$crMid) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$crMid);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerCRmEntity();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getCrMid());
		$stmt->bindValue(2,$this->getSmCreatorId());
		$stmt->bindValue(3,$this->getSmOwnerId());
		$stmt->bindValue(4,$this->getModifiedBy());
		$stmt->bindValue(5,$this->getSeType());
		$stmt->bindValue(6,$this->getDescription());
		$stmt->bindValue(7,$this->getCreatedTime());
		$stmt->bindValue(8,$this->getModifiedTime());
		$stmt->bindValue(9,$this->getViewedTime());
		$stmt->bindValue(10,$this->getStatus());
		$stmt->bindValue(11,$this->getVersion());
		$stmt->bindValue(12,$this->getPresence());
		$stmt->bindValue(13,$this->getDeleted());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_INSERT);
		$this->bindValues($stmt);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(14,$this->getCrMid());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getCrMid());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Fetch VTigerAccount's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_account`.`accountid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerAccount[]
	 */
	public function fetchVTigerAccountCollection(PDO $db, $sort=null) {
		$filter=array(VTigerAccount::FIELD_ACCOUNTID=>$this->getCrMid());
		return VTigerAccount::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerActivity's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_activity`.`activityid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerActivity[]
	 */
	public function fetchVTigerActivityCollection(PDO $db, $sort=null) {
		$filter=array(VTigerActivity::FIELD_ACTIVITYID=>$this->getCrMid());
		return VTigerActivity::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerAssets's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_assets`.`assetsid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerAssets[]
	 */
	public function fetchVTigerAssetsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerAssets::FIELD_ASSETSID=>$this->getCrMid());
		return VTigerAssets::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerAttachments's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_attachments`.`attachmentsid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerAttachments[]
	 */
	public function fetchVTigerAttachmentsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerAttachments::FIELD_ATTACHMENTSID=>$this->getCrMid());
		return VTigerAttachments::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerCompetitor's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_competitor`.`competitorid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerCompetitor[]
	 */
	public function fetchVTigerCompetitorCollection(PDO $db, $sort=null) {
		$filter=array(VTigerCompetitor::FIELD_COMPETITORID=>$this->getCrMid());
		return VTigerCompetitor::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerContactDetails's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_contactdetails`.`contactid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerContactDetails[]
	 */
	public function fetchVTigerContactDetailsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerContactDetails::FIELD_CONTACTID=>$this->getCrMid());
		return VTigerContactDetails::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerFaq's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_faq`.`id`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerFaq[]
	 */
	public function fetchVTigerFaqCollection(PDO $db, $sort=null) {
		$filter=array(VTigerFaq::FIELD_ID=>$this->getCrMid());
		return VTigerFaq::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerLeadDetails's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_leaddetails`.`leadid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerLeadDetails[]
	 */
	public function fetchVTigerLeadDetailsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerLeadDetails::FIELD_LEADID=>$this->getCrMid());
		return VTigerLeadDetails::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerNotes's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_notes`.`notesid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerNotes[]
	 */
	public function fetchVTigerNotesCollection(PDO $db, $sort=null) {
		$filter=array(VTigerNotes::FIELD_NOTESID=>$this->getCrMid());
		return VTigerNotes::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerPotential's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_potential`.`potentialid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerPotential[]
	 */
	public function fetchVTigerPotentialCollection(PDO $db, $sort=null) {
		$filter=array(VTigerPotential::FIELD_POTENTIALID=>$this->getCrMid());
		return VTigerPotential::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerPriceBook's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_pricebook`.`pricebookid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerPriceBook[]
	 */
	public function fetchVTigerPriceBookCollection(PDO $db, $sort=null) {
		$filter=array(VTigerPriceBook::FIELD_PRICEBOOKID=>$this->getCrMid());
		return VTigerPriceBook::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerProducts's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_products`.`productid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerProducts[]
	 */
	public function fetchVTigerProductsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerProducts::FIELD_PRODUCTID=>$this->getCrMid());
		return VTigerProducts::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerSeActivityRel's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_seactivityrel`.`crmid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerSeActivityRel[]
	 */
	public function fetchVTigerSeActivityRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerSeActivityRel::FIELD_CRMID=>$this->getCrMid());
		return VTigerSeActivityRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerSeAttachmentsRel's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_seattachmentsrel`.`crmid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerSeAttachmentsRel[]
	 */
	public function fetchVTigerSeAttachmentsRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerSeAttachmentsRel::FIELD_CRMID=>$this->getCrMid());
		return VTigerSeAttachmentsRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerService's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_service`.`serviceid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerService[]
	 */
	public function fetchVTigerServiceCollection(PDO $db, $sort=null) {
		$filter=array(VTigerService::FIELD_SERVICEID=>$this->getCrMid());
		return VTigerService::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerTroubleTickets's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_troubletickets`.`ticketid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerTroubleTickets[]
	 */
	public function fetchVTigerTroubleTicketsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerTroubleTickets::FIELD_TICKETID=>$this->getCrMid());
		return VTigerTroubleTickets::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerVendor's which this VTigerCRmEntity references.
	 * `vtiger_crmentity`.`crmid` -> `vtiger_vendor`.`vendorid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerVendor[]
	 */
	public function fetchVTigerVendorCollection(PDO $db, $sort=null) {
		$filter=array(VTigerVendor::FIELD_VENDORID=>$this->getCrMid());
		return VTigerVendor::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerCRmEntity';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerCRmEntity');
	}

	/**
	 * get single VTigerCRmEntity instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerCRmEntity
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerCRmEntity();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerCRmEntity from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerCRmEntity[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerCRmEntity') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>