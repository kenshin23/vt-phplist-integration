<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Autogenerated CRUD-like access library for Vtiger Database Tables
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    VtigerDBCRUDLibrary
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-access-library
 */


/**
 * 
 *
 * @version 1.107
 * @package entity
 */
class VTigerTroubleTickets extends Db2PhpEntityBase implements Db2PhpEntityModificationTracking {
	private static $CLASS_NAME='VTigerTroubleTickets';
	const SQL_IDENTIFIER_QUOTE='`';
	const SQL_TABLE_NAME='vtiger_troubletickets';
	const SQL_INSERT='INSERT INTO `vtiger_troubletickets` (`ticketid`,`ticket_no`,`groupname`,`parent_id`,`product_id`,`priority`,`severity`,`status`,`category`,`title`,`solution`,`update_log`,`version_id`,`hours`,`days`,`from_portal`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_INSERT_AUTOINCREMENT='INSERT INTO `vtiger_troubletickets` (`ticketid`,`ticket_no`,`groupname`,`parent_id`,`product_id`,`priority`,`severity`,`status`,`category`,`title`,`solution`,`update_log`,`version_id`,`hours`,`days`,`from_portal`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)';
	const SQL_UPDATE='UPDATE `vtiger_troubletickets` SET `ticketid`=?,`ticket_no`=?,`groupname`=?,`parent_id`=?,`product_id`=?,`priority`=?,`severity`=?,`status`=?,`category`=?,`title`=?,`solution`=?,`update_log`=?,`version_id`=?,`hours`=?,`days`=?,`from_portal`=? WHERE `ticketid`=?';
	const SQL_SELECT_PK='SELECT * FROM `vtiger_troubletickets` WHERE `ticketid`=?';
	const SQL_DELETE_PK='DELETE FROM `vtiger_troubletickets` WHERE `ticketid`=?';
	const FIELD_TICKETID=-1087596529;
	const FIELD_TICKET_NO=644236780;
	const FIELD_GROUPNAME=-766852190;
	const FIELD_PARENT_ID=-1509270808;
	const FIELD_PRODUCT_ID=-1840356525;
	const FIELD_PRIORITY=104541324;
	const FIELD_SEVERITY=-1546664475;
	const FIELD_STATUS=-1847583526;
	const FIELD_CATEGORY=1320513510;
	const FIELD_TITLE=1326487664;
	const FIELD_SOLUTION=-1533018015;
	const FIELD_UPDATE_LOG=406001590;
	const FIELD_VERSION_ID=31104714;
	const FIELD_HOURS=1315585319;
	const FIELD_DAYS=-373336257;
	const FIELD_FROM_PORTAL=396484281;
	private static $PRIMARY_KEYS=array(self::FIELD_TICKETID);
	private static $AUTOINCREMENT_FIELDS=array();
	private static $FIELD_NAMES=array(
		self::FIELD_TICKETID=>'ticketid',
		self::FIELD_TICKET_NO=>'ticket_no',
		self::FIELD_GROUPNAME=>'groupname',
		self::FIELD_PARENT_ID=>'parent_id',
		self::FIELD_PRODUCT_ID=>'product_id',
		self::FIELD_PRIORITY=>'priority',
		self::FIELD_SEVERITY=>'severity',
		self::FIELD_STATUS=>'status',
		self::FIELD_CATEGORY=>'category',
		self::FIELD_TITLE=>'title',
		self::FIELD_SOLUTION=>'solution',
		self::FIELD_UPDATE_LOG=>'update_log',
		self::FIELD_VERSION_ID=>'version_id',
		self::FIELD_HOURS=>'hours',
		self::FIELD_DAYS=>'days',
		self::FIELD_FROM_PORTAL=>'from_portal');
	private static $PROPERTY_NAMES=array(
		self::FIELD_TICKETID=>'ticketId',
		self::FIELD_TICKET_NO=>'ticketNo',
		self::FIELD_GROUPNAME=>'groupName',
		self::FIELD_PARENT_ID=>'parentId',
		self::FIELD_PRODUCT_ID=>'productId',
		self::FIELD_PRIORITY=>'priority',
		self::FIELD_SEVERITY=>'severity',
		self::FIELD_STATUS=>'status',
		self::FIELD_CATEGORY=>'category',
		self::FIELD_TITLE=>'title',
		self::FIELD_SOLUTION=>'solution',
		self::FIELD_UPDATE_LOG=>'updateLog',
		self::FIELD_VERSION_ID=>'versionId',
		self::FIELD_HOURS=>'hours',
		self::FIELD_DAYS=>'days',
		self::FIELD_FROM_PORTAL=>'fromPortal');
	private static $PROPERTY_TYPES=array(
		self::FIELD_TICKETID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_TICKET_NO=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_GROUPNAME=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PARENT_ID=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PRODUCT_ID=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_PRIORITY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SEVERITY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_STATUS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_CATEGORY=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_TITLE=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_SOLUTION=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_UPDATE_LOG=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_VERSION_ID=>Db2PhpEntity::PHP_TYPE_INT,
		self::FIELD_HOURS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_DAYS=>Db2PhpEntity::PHP_TYPE_STRING,
		self::FIELD_FROM_PORTAL=>Db2PhpEntity::PHP_TYPE_STRING);
	private static $FIELD_TYPES=array(
		self::FIELD_TICKETID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,false),
		self::FIELD_TICKET_NO=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,false),
		self::FIELD_GROUPNAME=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_PARENT_ID=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_PRODUCT_ID=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,100,0,true),
		self::FIELD_PRIORITY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_SEVERITY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_STATUS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_CATEGORY=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_TITLE=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,255,0,false),
		self::FIELD_SOLUTION=>array(Db2PhpEntity::JDBC_TYPE_LONGVARCHAR,65535,0,true),
		self::FIELD_UPDATE_LOG=>array(Db2PhpEntity::JDBC_TYPE_LONGVARCHAR,65535,0,true),
		self::FIELD_VERSION_ID=>array(Db2PhpEntity::JDBC_TYPE_INTEGER,10,0,true),
		self::FIELD_HOURS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_DAYS=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,200,0,true),
		self::FIELD_FROM_PORTAL=>array(Db2PhpEntity::JDBC_TYPE_VARCHAR,3,0,true));
	private static $DEFAULT_VALUES=array(
		self::FIELD_TICKETID=>0,
		self::FIELD_TICKET_NO=>'',
		self::FIELD_GROUPNAME=>null,
		self::FIELD_PARENT_ID=>null,
		self::FIELD_PRODUCT_ID=>null,
		self::FIELD_PRIORITY=>null,
		self::FIELD_SEVERITY=>null,
		self::FIELD_STATUS=>null,
		self::FIELD_CATEGORY=>null,
		self::FIELD_TITLE=>'',
		self::FIELD_SOLUTION=>null,
		self::FIELD_UPDATE_LOG=>null,
		self::FIELD_VERSION_ID=>null,
		self::FIELD_HOURS=>null,
		self::FIELD_DAYS=>null,
		self::FIELD_FROM_PORTAL=>null);
	private $ticketId;
	private $ticketNo;
	private $groupName;
	private $parentId;
	private $productId;
	private $priority;
	private $severity;
	private $status;
	private $category;
	private $title;
	private $solution;
	private $updateLog;
	private $versionId;
	private $hours;
	private $days;
	private $fromPortal;

	/**
	 * set value for ticketid 
	 *
	 * type:INT,size:10,default:null,primary,index
	 *
	 * @param mixed $ticketId
	 * @return VTigerTroubleTickets
	 */
	public function &setTicketId($ticketId) {
		$this->notifyChanged(self::FIELD_TICKETID,$this->ticketId,$ticketId);
		$this->ticketId=$ticketId;
		return $this;
	}

	/**
	 * get value for ticketid 
	 *
	 * type:INT,size:10,default:null,primary,index
	 *
	 * @return mixed
	 */
	public function getTicketId() {
		return $this->ticketId;
	}

	/**
	 * set value for ticket_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @param mixed $ticketNo
	 * @return VTigerTroubleTickets
	 */
	public function &setTicketNo($ticketNo) {
		$this->notifyChanged(self::FIELD_TICKET_NO,$this->ticketNo,$ticketNo);
		$this->ticketNo=$ticketNo;
		return $this;
	}

	/**
	 * get value for ticket_no 
	 *
	 * type:VARCHAR,size:100,default:null
	 *
	 * @return mixed
	 */
	public function getTicketNo() {
		return $this->ticketNo;
	}

	/**
	 * set value for groupname 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $groupName
	 * @return VTigerTroubleTickets
	 */
	public function &setGroupName($groupName) {
		$this->notifyChanged(self::FIELD_GROUPNAME,$this->groupName,$groupName);
		$this->groupName=$groupName;
		return $this;
	}

	/**
	 * get value for groupname 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getGroupName() {
		return $this->groupName;
	}

	/**
	 * set value for parent_id 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $parentId
	 * @return VTigerTroubleTickets
	 */
	public function &setParentId($parentId) {
		$this->notifyChanged(self::FIELD_PARENT_ID,$this->parentId,$parentId);
		$this->parentId=$parentId;
		return $this;
	}

	/**
	 * get value for parent_id 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getParentId() {
		return $this->parentId;
	}

	/**
	 * set value for product_id 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @param mixed $productId
	 * @return VTigerTroubleTickets
	 */
	public function &setProductId($productId) {
		$this->notifyChanged(self::FIELD_PRODUCT_ID,$this->productId,$productId);
		$this->productId=$productId;
		return $this;
	}

	/**
	 * get value for product_id 
	 *
	 * type:VARCHAR,size:100,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getProductId() {
		return $this->productId;
	}

	/**
	 * set value for priority 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $priority
	 * @return VTigerTroubleTickets
	 */
	public function &setPriority($priority) {
		$this->notifyChanged(self::FIELD_PRIORITY,$this->priority,$priority);
		$this->priority=$priority;
		return $this;
	}

	/**
	 * get value for priority 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getPriority() {
		return $this->priority;
	}

	/**
	 * set value for severity 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $severity
	 * @return VTigerTroubleTickets
	 */
	public function &setSeverity($severity) {
		$this->notifyChanged(self::FIELD_SEVERITY,$this->severity,$severity);
		$this->severity=$severity;
		return $this;
	}

	/**
	 * get value for severity 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSeverity() {
		return $this->severity;
	}

	/**
	 * set value for status 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @param mixed $status
	 * @return VTigerTroubleTickets
	 */
	public function &setStatus($status) {
		$this->notifyChanged(self::FIELD_STATUS,$this->status,$status);
		$this->status=$status;
		return $this;
	}

	/**
	 * get value for status 
	 *
	 * type:VARCHAR,size:200,default:null,index,nullable
	 *
	 * @return mixed
	 */
	public function getStatus() {
		return $this->status;
	}

	/**
	 * set value for category 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $category
	 * @return VTigerTroubleTickets
	 */
	public function &setCategory($category) {
		$this->notifyChanged(self::FIELD_CATEGORY,$this->category,$category);
		$this->category=$category;
		return $this;
	}

	/**
	 * get value for category 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getCategory() {
		return $this->category;
	}

	/**
	 * set value for title 
	 *
	 * type:VARCHAR,size:255,default:null
	 *
	 * @param mixed $title
	 * @return VTigerTroubleTickets
	 */
	public function &setTitle($title) {
		$this->notifyChanged(self::FIELD_TITLE,$this->title,$title);
		$this->title=$title;
		return $this;
	}

	/**
	 * get value for title 
	 *
	 * type:VARCHAR,size:255,default:null
	 *
	 * @return mixed
	 */
	public function getTitle() {
		return $this->title;
	}

	/**
	 * set value for solution 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @param mixed $solution
	 * @return VTigerTroubleTickets
	 */
	public function &setSolution($solution) {
		$this->notifyChanged(self::FIELD_SOLUTION,$this->solution,$solution);
		$this->solution=$solution;
		return $this;
	}

	/**
	 * get value for solution 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getSolution() {
		return $this->solution;
	}

	/**
	 * set value for update_log 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @param mixed $updateLog
	 * @return VTigerTroubleTickets
	 */
	public function &setUpdateLog($updateLog) {
		$this->notifyChanged(self::FIELD_UPDATE_LOG,$this->updateLog,$updateLog);
		$this->updateLog=$updateLog;
		return $this;
	}

	/**
	 * get value for update_log 
	 *
	 * type:TEXT,size:65535,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getUpdateLog() {
		return $this->updateLog;
	}

	/**
	 * set value for version_id 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @param mixed $versionId
	 * @return VTigerTroubleTickets
	 */
	public function &setVersionId($versionId) {
		$this->notifyChanged(self::FIELD_VERSION_ID,$this->versionId,$versionId);
		$this->versionId=$versionId;
		return $this;
	}

	/**
	 * get value for version_id 
	 *
	 * type:INT,size:10,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getVersionId() {
		return $this->versionId;
	}

	/**
	 * set value for hours 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $hours
	 * @return VTigerTroubleTickets
	 */
	public function &setHours($hours) {
		$this->notifyChanged(self::FIELD_HOURS,$this->hours,$hours);
		$this->hours=$hours;
		return $this;
	}

	/**
	 * get value for hours 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getHours() {
		return $this->hours;
	}

	/**
	 * set value for days 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @param mixed $days
	 * @return VTigerTroubleTickets
	 */
	public function &setDays($days) {
		$this->notifyChanged(self::FIELD_DAYS,$this->days,$days);
		$this->days=$days;
		return $this;
	}

	/**
	 * get value for days 
	 *
	 * type:VARCHAR,size:200,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getDays() {
		return $this->days;
	}

	/**
	 * set value for from_portal 
	 *
	 * type:VARCHAR,size:3,default:null,nullable
	 *
	 * @param mixed $fromPortal
	 * @return VTigerTroubleTickets
	 */
	public function &setFromPortal($fromPortal) {
		$this->notifyChanged(self::FIELD_FROM_PORTAL,$this->fromPortal,$fromPortal);
		$this->fromPortal=$fromPortal;
		return $this;
	}

	/**
	 * get value for from_portal 
	 *
	 * type:VARCHAR,size:3,default:null,nullable
	 *
	 * @return mixed
	 */
	public function getFromPortal() {
		return $this->fromPortal;
	}

	/**
	 * Get table name
	 *
	 * @return string
	 */
	public static function getTableName() {
		return self::SQL_TABLE_NAME;
	}

	/**
	 * Get array with field id as index and field name as value
	 *
	 * @return array
	 */
	public static function getFieldNames() {
		return self::$FIELD_NAMES;
	}

	/**
	 * Get array with field id as index and property name as value
	 *
	 * @return array
	 */
	public static function getPropertyNames() {
		return self::$PROPERTY_NAMES;
	}

	/**
	 * get the field name for the passed field id.
	 *
	 * @param int $fieldId
	 * @param bool $fullyQualifiedName true if field name should be qualified by table name
	 * @return string field name for the passed field id, null if the field doesn't exist
	 */
	public static function getFieldNameByFieldId($fieldId, $fullyQualifiedName=true) {
		if (!array_key_exists($fieldId, self::$FIELD_NAMES)) {
			return null;
		}
		$fieldName=self::SQL_IDENTIFIER_QUOTE . self::$FIELD_NAMES[$fieldId] . self::SQL_IDENTIFIER_QUOTE;
		if ($fullyQualifiedName) {
			return self::SQL_IDENTIFIER_QUOTE . self::SQL_TABLE_NAME . self::SQL_IDENTIFIER_QUOTE . '.' . $fieldName;
		}
		return $fieldName;
	}

	/**
	 * Get array with field ids of identifiers
	 *
	 * @return array
	 */
	public static function getIdentifierFields() {
		return self::$PRIMARY_KEYS;
	}

	/**
	 * Get array with field ids of autoincrement fields
	 *
	 * @return array
	 */
	public static function getAutoincrementFields() {
		return self::$AUTOINCREMENT_FIELDS;
	}

	/**
	 * Get array with field id as index and property type as value
	 *
	 * @return array
	 */
	public static function getPropertyTypes() {
		return self::$PROPERTY_TYPES;
	}

	/**
	 * Get array with field id as index and field type as value
	 *
	 * @return array
	 */
	public static function getFieldTypes() {
		return self::$FIELD_TYPES;
	}

	/**
	 * Assign default values according to table
	 * 
	 */
	public function assignDefaultValues() {
		$this->assignByArray(self::$DEFAULT_VALUES);
	}


	/**
	 * return hash with the field name as index and the field value as value.
	 *
	 * @return array
	 */
	public function toHash() {
		$array=$this->toArray();
		$hash=array();
		foreach ($array as $fieldId=>$value) {
			$hash[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		return $hash;
	}

	/**
	 * return array with the field id as index and the field value as value.
	 *
	 * @return array
	 */
	public function toArray() {
		return array(
			self::FIELD_TICKETID=>$this->getTicketId(),
			self::FIELD_TICKET_NO=>$this->getTicketNo(),
			self::FIELD_GROUPNAME=>$this->getGroupName(),
			self::FIELD_PARENT_ID=>$this->getParentId(),
			self::FIELD_PRODUCT_ID=>$this->getProductId(),
			self::FIELD_PRIORITY=>$this->getPriority(),
			self::FIELD_SEVERITY=>$this->getSeverity(),
			self::FIELD_STATUS=>$this->getStatus(),
			self::FIELD_CATEGORY=>$this->getCategory(),
			self::FIELD_TITLE=>$this->getTitle(),
			self::FIELD_SOLUTION=>$this->getSolution(),
			self::FIELD_UPDATE_LOG=>$this->getUpdateLog(),
			self::FIELD_VERSION_ID=>$this->getVersionId(),
			self::FIELD_HOURS=>$this->getHours(),
			self::FIELD_DAYS=>$this->getDays(),
			self::FIELD_FROM_PORTAL=>$this->getFromPortal());
	}


	/**
	 * return array with the field id as index and the field value as value for the identifier fields.
	 *
	 * @return array
	 */
	public function getPrimaryKeyValues() {
		return array(
			self::FIELD_TICKETID=>$this->getTicketId());
	}

	/**
	 * cached statements
	 *
	 * @var array<string,array<string,PDOStatement>>
	 */
	private static $stmts=array();
	private static $cacheStatements=true;
	
	/**
	 * prepare passed string as statement or return cached if enabled and available
	 *
	 * @param PDO $db
	 * @param string $statement
	 * @return PDOStatement
	 */
	protected static function prepareStatement(PDO $db, $statement) {
		if(self::isCacheStatements()) {
			if (in_array($statement, array(self::SQL_INSERT, self::SQL_INSERT_AUTOINCREMENT, self::SQL_UPDATE, self::SQL_SELECT_PK, self::SQL_DELETE_PK))) {
				$dbInstanceId=spl_object_hash($db);
				if (empty(self::$stmts[$statement][$dbInstanceId])) {
					self::$stmts[$statement][$dbInstanceId]=$db->prepare($statement);
				}
				return self::$stmts[$statement][$dbInstanceId];
			}
		}
		return $db->prepare($statement);
	}

	/**
	 * Enable statement cache
	 *
	 * @param bool $cache
	 */
	public static function setCacheStatements($cache) {
		self::$cacheStatements=true==$cache;
	}

	/**
	 * Check if statement cache is enabled
	 *
	 * @return bool
	 */
	public static function isCacheStatements() {
		return self::$cacheStatements;
	}
	
	/**
	 * check if this instance exists in the database
	 *
	 * @param PDO $db
	 * @return bool
	 */
	public function existsInDatabase(PDO $db) {
		$filter=array();
		foreach ($this->getPrimaryKeyValues() as $fieldId=>$value) {
			$filter[]=new DFC($fieldId, $value, DFC::EXACT_NULLSAFE);
		}
		return 0!=count(self::findByFilter($db, $filter, true));
	}
	
	/**
	 * Update to database if exists, otherwise insert
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateInsertToDatabase(PDO $db) {
		if ($this->existsInDatabase($db)) {
			return $this->updateToDatabase($db);
		} else {
			return $this->insertIntoDatabase($db);
		}
	}

	/**
	 * Query by Example.
	 *
	 * Match by attributes of passed example instance and return matched rows as an array of VTigerTroubleTickets instances
	 *
	 * @param PDO $db a PDO Database instance
	 * @param VTigerTroubleTickets $example an example instance defining the conditions. All non-null properties will be considered a constraint, null values will be ignored.
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerTroubleTickets[]
	 */
	public static function findByExample(PDO $db,VTigerTroubleTickets $example, $and=true, $sort=null) {
		$exampleValues=$example->toArray();
		$filter=array();
		foreach ($exampleValues as $fieldId=>$value) {
			if (null!==$value) {
				$filter[$fieldId]=$value;
			}
		}
		return self::findByFilter($db, $filter, $and, $sort);
	}

	/**
	 * Query by filter.
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * Will return matched rows as an array of VTigerTroubleTickets instances.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $filter array of DFC instances defining the conditions
	 * @param boolean $and true if conditions should be and'ed, false if they should be or'ed
	 * @param array $sort array of DSC instances
	 * @return VTigerTroubleTickets[]
	 */
	public static function findByFilter(PDO $db, $filter, $and=true, $sort=null) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		$sql='SELECT * FROM `vtiger_troubletickets`'
		. self::buildSqlWhere($filter, $and, false, true)
		. self::buildSqlOrderBy($sort);

		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		return self::fromStatement($stmt);
	}

	/**
	 * Will execute the passed statement and return the result as an array of VTigerTroubleTickets instances
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerTroubleTickets[]
	 */
	public static function fromStatement(PDOStatement $stmt) {
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * returns the result as an array of VTigerTroubleTickets instances without executing the passed statement
	 *
	 * @param PDOStatement $stmt
	 * @return VTigerTroubleTickets[]
	 */
	public static function fromExecutedStatement(PDOStatement $stmt) {
		$resultInstances=array();
		while($result=$stmt->fetch(PDO::FETCH_ASSOC)) {
			$o=new VTigerTroubleTickets();
			$o->assignByHash($result);
			$o->notifyPristine();
			$resultInstances[]=$o;
		}
		$stmt->closeCursor();
		return $resultInstances;
	}

	/**
	 * Get sql WHERE part from filter.
	 *
	 * @param array $filter
	 * @param bool $and
	 * @param bool $fullyQualifiedNames true if field names should be qualified by table name
	 * @param bool $prependWhere true if WHERE should be prepended to conditions
	 * @return string
	 */
	public static function buildSqlWhere($filter, $and, $fullyQualifiedNames=true, $prependWhere=false) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		return $filter->buildSqlWhere(new self::$CLASS_NAME, $fullyQualifiedNames, $prependWhere);
	}

	/**
	 * get sql ORDER BY part from DSCs
	 *
	 * @param array $sort array of DSC instances
	 * @return string
	 */
	protected static function buildSqlOrderBy($sort) {
		return DSC::buildSqlOrderBy(new self::$CLASS_NAME, $sort);
	}

	/**
	 * bind values from filter to statement
	 *
	 * @param PDOStatement $stmt
	 * @param DFCInterface $filter
	 */
	public static function bindValuesForFilter(PDOStatement &$stmt, DFCInterface $filter) {
		$filter->bindValuesForFilter(new self::$CLASS_NAME, $stmt);
	}

	/**
	 * Execute select query and return matched rows as an array of VTigerTroubleTickets instances.
	 *
	 * The query should of course be on the table for this entity class and return all fields.
	 *
	 * @param PDO $db a PDO Database instance
	 * @param string $sql
	 * @return VTigerTroubleTickets[]
	 */
	public static function findBySql(PDO $db, $sql) {
		$stmt=$db->query($sql);
		return self::fromExecutedStatement($stmt);
	}

	/**
	 * Delete rows matching the filter
	 *
	 * The filter can be either an hash with the field id as index and the value as filter value,
	 * or a array of DFC instances.
	 *
	 * @param PDO $db
	 * @param array $filter
	 * @param bool $and
	 * @return mixed
	 */
	public static function deleteByFilter(PDO $db, $filter, $and=true) {
		if (!($filter instanceof DFCInterface)) {
			$filter=new DFCAggregate($filter, $and);
		}
		if (0==count($filter)) {
			throw new InvalidArgumentException('refusing to delete without filter'); // just comment out this line if you are brave
		}
		$sql='DELETE FROM `vtiger_troubletickets`'
		. self::buildSqlWhere($filter, $and, false, true);
		$stmt=self::prepareStatement($db, $sql);
		self::bindValuesForFilter($stmt, $filter);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Assign values from array with the field id as index and the value as value
	 *
	 * @param array $array
	 */
	public function assignByArray($array) {
		$result=array();
		foreach ($array as $fieldId=>$value) {
			$result[self::$FIELD_NAMES[$fieldId]]=$value;
		}
		$this->assignByHash($result);
	}

	/**
	 * Assign values from hash where the indexes match the tables field names
	 *
	 * @param array $result
	 */
	public function assignByHash($result) {
		$this->setTicketId($result['ticketid']);
		$this->setTicketNo($result['ticket_no']);
		$this->setGroupName($result['groupname']);
		$this->setParentId($result['parent_id']);
		$this->setProductId($result['product_id']);
		$this->setPriority($result['priority']);
		$this->setSeverity($result['severity']);
		$this->setStatus($result['status']);
		$this->setCategory($result['category']);
		$this->setTitle($result['title']);
		$this->setSolution($result['solution']);
		$this->setUpdateLog($result['update_log']);
		$this->setVersionId($result['version_id']);
		$this->setHours($result['hours']);
		$this->setDays($result['days']);
		$this->setFromPortal($result['from_portal']);
	}

	/**
	 * Get element instance by it's primary key(s).
	 * Will return null if no row was matched.
	 *
	 * @param PDO $db
	 * @return VTigerTroubleTickets
	 */
	public static function findById(PDO $db,$ticketId) {
		$stmt=self::prepareStatement($db,self::SQL_SELECT_PK);
		$stmt->bindValue(1,$ticketId);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$result=$stmt->fetch(PDO::FETCH_ASSOC);
		$stmt->closeCursor();
		if(!$result) {
			return null;
		}
		$o=new VTigerTroubleTickets();
		$o->assignByHash($result);
		$o->notifyPristine();
		return $o;
	}

	/**
	 * Bind all values to statement
	 *
	 * @param PDOStatement $stmt
	 */
	protected function bindValues(PDOStatement &$stmt) {
		$stmt->bindValue(1,$this->getTicketId());
		$stmt->bindValue(2,$this->getTicketNo());
		$stmt->bindValue(3,$this->getGroupName());
		$stmt->bindValue(4,$this->getParentId());
		$stmt->bindValue(5,$this->getProductId());
		$stmt->bindValue(6,$this->getPriority());
		$stmt->bindValue(7,$this->getSeverity());
		$stmt->bindValue(8,$this->getStatus());
		$stmt->bindValue(9,$this->getCategory());
		$stmt->bindValue(10,$this->getTitle());
		$stmt->bindValue(11,$this->getSolution());
		$stmt->bindValue(12,$this->getUpdateLog());
		$stmt->bindValue(13,$this->getVersionId());
		$stmt->bindValue(14,$this->getHours());
		$stmt->bindValue(15,$this->getDays());
		$stmt->bindValue(16,$this->getFromPortal());
	}


	/**
	 * Insert this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function insertIntoDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_INSERT);
		$this->bindValues($stmt);
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Update this instance into the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function updateToDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_UPDATE);
		$this->bindValues($stmt);
		$stmt->bindValue(17,$this->getTicketId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		$this->notifyPristine();
		return $affected;
	}


	/**
	 * Delete this instance from the database
	 *
	 * @param PDO $db
	 * @return mixed
	 */
	public function deleteFromDatabase(PDO $db) {
		$stmt=self::prepareStatement($db,self::SQL_DELETE_PK);
		$stmt->bindValue(1,$this->getTicketId());
		$affected=$stmt->execute();
		if (false===$affected) {
			$stmt->closeCursor();
			throw new Exception($stmt->errorCode() . ':' . var_export($stmt->errorInfo(), true), 0);
		}
		$stmt->closeCursor();
		return $affected;
	}

	/**
	 * Fetch VTigerSeTicketsRel's which this VTigerTroubleTickets references.
	 * `vtiger_troubletickets`.`ticketid` -> `vtiger_seticketsrel`.`ticketid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerSeTicketsRel[]
	 */
	public function fetchVTigerSeTicketsRelCollection(PDO $db, $sort=null) {
		$filter=array(VTigerSeTicketsRel::FIELD_TICKETID=>$this->getTicketId());
		return VTigerSeTicketsRel::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerTicketCf's which this VTigerTroubleTickets references.
	 * `vtiger_troubletickets`.`ticketid` -> `vtiger_ticketcf`.`ticketid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerTicketCf[]
	 */
	public function fetchVTigerTicketCfCollection(PDO $db, $sort=null) {
		$filter=array(VTigerTicketCf::FIELD_TICKETID=>$this->getTicketId());
		return VTigerTicketCf::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerTicketComments's which this VTigerTroubleTickets references.
	 * `vtiger_troubletickets`.`ticketid` -> `vtiger_ticketcomments`.`ticketid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerTicketComments[]
	 */
	public function fetchVTigerTicketCommentsCollection(PDO $db, $sort=null) {
		$filter=array(VTigerTicketComments::FIELD_TICKETID=>$this->getTicketId());
		return VTigerTicketComments::findByFilter($db, $filter, true, $sort);
	}

	/**
	 * Fetch VTigerCRmEntity which references this VTigerTroubleTickets. Will return null in case reference is invalid.
	 * `vtiger_troubletickets`.`ticketid` -> `vtiger_crmentity`.`crmid`
	 *
	 * @param PDO $db a PDO Database instance
	 * @param array $sort array of DSC instances
	 * @return VTigerCRmEntity
	 */
	public function fetchVTigerCRmEntity(PDO $db, $sort=null) {
		$filter=array(VTigerCRmEntity::FIELD_CRMID=>$this->getTicketId());
		$result=VTigerCRmEntity::findByFilter($db, $filter, true, $sort);
		return empty($result) ? null : $result[0];
	}

	/**
	 * return array with the property name as index and the field value as value.
	 * ezComponents support method
	 *
	 * @return array
	 */
	public function getState() {
		$array=$this->toArray();
		$state=array();
		foreach ($array as $fieldId=>$value) {
			$state[self::$PROPERTY_NAMES[$fieldId]]=$value;
		}
		return $state;
	}

	/**
	 * Assign values from hash where the indexes match the property names.
	 * ezComponents support method
	 *
	 * @param array $state
	 */
	public function setState(array $state) {
		$propertyNameToFieldId=array_flip(self::$PROPERTY_NAMES);
		$hash=$this->toHash();
		foreach ($state as $propertyName=>$value) {
			$hash[self::$FIELD_NAMES[$propertyNameToFieldId[$propertyName]]]=$value;
		}
		$this->assignByHash($hash);
	}

	/**
	 * get persistence definition for ezComponents
	 *
	 * @return ezcPersistentObjectDefinition
	 */
	public static function toEzcPersistentObjectDefinition() {
		static $typeMapping=array(
			Db2PhpEntity::PHP_TYPE_BOOL=>ezcPersistentObjectProperty::PHP_TYPE_BOOL,
			Db2PhpEntity::PHP_TYPE_INT=>ezcPersistentObjectProperty::PHP_TYPE_INT,
			Db2PhpEntity::PHP_TYPE_FLOAT=>ezcPersistentObjectProperty::PHP_TYPE_FLOAT,
			Db2PhpEntity::PHP_TYPE_STRING=>ezcPersistentObjectProperty::PHP_TYPE_STRING
		);
		$def=new ezcPersistentObjectDefinition();
		$def->table=self::SQL_TABLE_NAME;
		$def->class='VTigerTroubleTickets';
		if (!empty (self::$PRIMARY_KEYS)) {
			$pkField=self::$PRIMARY_KEYS[0];
			$def->idProperty=new ezcPersistentObjectIdProperty();
			$def->idProperty->columnName=self::$FIELD_NAMES[$pkField];
			$def->idProperty->propertyName=self::$PROPERTY_NAMES[$pkField];
			$def->idProperty->generator=new ezcPersistentGeneratorDefinition(
				in_array($pkField, self::$AUTOINCREMENT_FIELDS) ? 'ezcPersistentNativeGenerator' : 'ezcPersistentManualGenerator');
		} else {
			$pkField=null;
		}
		foreach (self::$PROPERTY_NAMES as $fieldId=>$propertyName) {
			if ($fieldId!==$pkField) {
				$def->properties[$propertyName]=new ezcPersistentObjectProperty();
				$def->properties[$propertyName]->columnName=self::$FIELD_NAMES[$fieldId];
				$def->properties[$propertyName]->propertyName=$propertyName;
				$def->properties[$propertyName]->propertyType=$typeMapping[self::$PROPERTY_TYPES[$fieldId]];
			}
		}
		return $def;
	}


	/**
	 * get element as DOM Document
	 *
	 * @return DOMDocument
	 */
	public function toDOM() {
		return self::hashToDomDocument($this->toHash(), 'VTigerTroubleTickets');
	}

	/**
	 * get single VTigerTroubleTickets instance from a DOMElement
	 *
	 * @param DOMElement $node
	 * @return VTigerTroubleTickets
	 */
	public static function fromDOMElement(DOMElement $node) {
		$o=new VTigerTroubleTickets();
		$o->assignByHash(self::domNodeToHash($node, self::$FIELD_NAMES, self::$DEFAULT_VALUES, self::$FIELD_TYPES));
			$o->notifyPristine();
		return $o;
	}

	/**
	 * get all instances of VTigerTroubleTickets from the passed DOMDocument
	 *
	 * @param DOMDocument $doc
	 * @return VTigerTroubleTickets[]
	 */
	public static function fromDOMDocument(DOMDocument $doc) {
		$instances=array();
		foreach ($doc->getElementsByTagName('VTigerTroubleTickets') as $node) {
			$instances[]=self::fromDOMElement($node);
		}
		return $instances;
	}

}
?>