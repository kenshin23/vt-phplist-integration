<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * Module to process a request for adding a new e-mailing campaing to Vtiger-PHPList integration.
 *
 * GNU General Public Licence v3
 * Copyright (C) 2012 Carlos Paparoni
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   VtigerPhplistIntegration
 * @package    CampaignModule
 * @author     Carlos Paparoni <carlos.paparoni@gmail.com>
 * @copyright  (C) 2012 Carlos Paparoni
 * @license    http://www.gnu.org/licenses/gpl.html GNU General Public Licence v3
 * @version    1.0
 * @link       http://d1m1.heliohost.org/code/php/vtiger-campaign-module
 */

//{{{ requires and includes
/*
 * Include main configuration file:
 */
require_once 'app/config.php';
/**
 * Requires & Includes section - for custom CRUD-like classes to handle Vtiger's database:
 * 
 * Tables updated when adding a new campaign in Vtiger, in alphabetical order:
 * vtiger_campaign		Main campaing information.
 * vtiger_campaignscf		Campaign custom fields, if present.
 * vtiger_crmentity		Contains campaign description, amongst other data.
 * vtiger_crmentity_seq		Has a record of last entity ID used, so it is kind of autogenerated.
 * vtiger_modentity_num		Current entity number updated (every time an entity is created, 
 *                              this table is updated.)
 * vtiger_tracker		Updated every time someone does something in vtiger. Keeps track of
 *                              who did what, and what (s)he did.
 */
require_once 'lib/DFCInterface.class.php';
require_once 'lib/DFC.class.php';
require_once 'lib/DSC.class.php';
require_once 'lib/DFCAggregate.class.php';
require_once 'lib/Db2PhpEntity.class.php';
require_once 'lib/Db2PhpEntityBase.class.php';
require_once 'lib/Db2PhpEntityModificationTracking.class.php';

require_once 'lib/vtiger/VTigerCampaign.class.php';
require_once 'lib/vtiger/VTigerCampaignsCf.class.php';
require_once 'lib/vtiger/VTigerCRmEntity.class.php';
require_once 'lib/vtiger/VTigerCRmEntitySeq.class.php';
require_once 'lib/vtiger/VTigerModEntityNUm.class.php';
require_once 'lib/vtiger/VTigerTracker.class.php';

require_once 'lib/vtiger/VtigerContactDetails.class.php';
require_once 'lib/vtiger/VtigerLeadDetails.class.php';

require_once 'lib/VTigerPhPListCampaigns.class.php';
require_once 'lib/VTigerPhPListJoin.class.php';

require_once 'lib/phplist/PhPListList.class.php';
require_once 'lib/phplist/PhPListListUser.class.php';
require_once 'lib/phplist/PhPListUserUser.class.php';
//}}}

//{{{ globals
/**
 * Global errors array to hold validation or database-operation errors to be sent back to user.
 */
$errors = array();

/**
 * Global PDO connection to Vtiger's Database.
 * Included from config.php
 */
//$dbconnect_vtiger;

/**
 * Global PDO connection to PHPlist's Database.
 * Included from config.php
 */
$dbConnectionPhplist;
//}}}
//{{{ Pseudo-singletons:
/**
 * Instance of the class VTigerCampaign
 * 
 * Handles Campaign data handling and database submission.
 */
$objectCampaign = new VTigerCampaign();

/**
 * Instance of the class VTigerCampaignCf. 
 * 
 * Handles Campaign Custom Fields data and database submission if necessary.
 */
$campaignscf = new VTigerCampaignsCf;

/**
 * Instance of the class VTigerCRmEntity. 
 * 
 * Handles a generic Vtiger entity.
 */
$objectCrmentity = new VTigerCRmEntity();

/**
 * Instance of the class VTigerCRmEntitySeq. 
 * 
 * Keeps a record of the last Vtiger entity id generated (in table vtiger_crmentity).
 */
$objectCrmentitySeq = new VTigerCRmEntitySeq();

/**
 * Instance of the class VTigerModEntityNUm
 * 
 * Handles Vtiger CRM Entity numbering based on entity type.
 */
$objectModentityNum = new VTigerModEntityNUm();

/**
 * Instance of the class VTigerTracker
 * 
 * Keeps an updated record of operations in Vtiger.
 */
$crmtracker = new VTigerTracker();

/**
 * Instance of the class VTigerContactDetails
 * 
 * Handles contacts inside vtiger database.
 */
$contactdetails = new VTigerContactDetails();

/**
 * Instance of the class VTigerLeasDetails
 * 
 * Handles contacts inside vtiger database.
 */
$leaddetails = new VTigerLeadDetails();

/**
 * Instance of the class VTigerPhPListJoin
 * 
 * Links to records in a join table for Vtiger and PHPList integration.
 */
$joinedExternalTablesList = new VTigerPhPListJoin();

/**
 * Instance of the class PhPListList
 * 
 * Handles operations on the phplist_list table.
 */
$objectPhplistList = new PhPListList();

/**
 * Instance of the class PhPListListUser
 * 
 * Handles operations on the phplist_list_user table.
 */
$objectPhplistListUser = new PhPListListUser();

/**
 * Instance of the class PhPListUserUser
 * 
 * Handles operations on the phplist_user_user table.
 */
$objectPhplistUserUser = new PhPListUserUser();
//}}}

/**
 * testFormSubmit
 * Displays posted form values in human-readable format.
 * @param   void
 * @return  void
 */
function testFormSubmit() {
    echo "<br/>POST Array:<pre>", print_r($_POST), "</pre>";
}

/**
 * Displays modified database CRUD objects in human-readable format.
 * @param   void
 * @global  VTigerModEntityNUm $objectModentityNum
 * @global  VTigerCampaign $objectCampaign
 * @global  VTigerCampaignsCf $campaignscf
 * @global  VTigerCRmEntity $objectCrmentity
 * @global  VTigerCRmEntitySeq $objectCrmentitySeq 
 * @return  void
 */
function testProcessForm() {
    global $objectModentityNum;
    global $objectCampaign;
    global $campaignscf;
    global $objectCrmentity;
    global $objectCrmentitySeq;
    
    echo "<br/>Campaign Object:<br/><pre>", print_r($objectCampaign), "</pre>";
    echo "<br/>CampaignCf Object:<br/><pre>", print_r($campaignscf), "</pre>";
    echo "<br/>CRM Entity Object:<br/><pre>", print_r($objectCrmentity), "</pre>";
    echo "<br/>CRM Entity Seq Object:<br/><pre>", print_r($objectCrmentitySeq), "</pre>";
    echo "<br/>Mod Entity Object:<br/><pre>", print_r($objectModentityNum), "</pre>";
}
 
/**
 * Handles server-side form validation of expected values. 
 * 
 * Also fills empty (non-mandatory) values with default info for database submission.
 *
 * @param   void
 * @global  array   $errors 
 * @return  bool    true if validation successful, false otherwise.
 */
function validateForm() {
    global $errors;
    //Only 2 values required to validate: name of campaign and expected close date:
    if( ! isset($_POST['campaignname']) or $_POST['campaignname'] == "") {
        $errors[]   = array("description" => "Debe proporcionar un nombre de campa&ntilde;a.");
    }
    
    if( ! isset($_POST['closingdate']) or $_POST['closingdate'] == "") {
        $errors[]   = array("description" => "Debe proporcionar una fecha.");
    }
    //Date comes from form in SQL-compatible format (YYYY-MM-DD) -- check it is valid:
    else {
        $valid  = false;
        $date   = array_combine(array("y","m","d"), explode("-", $strDate));
        if(intval($date['m']) && intval($date['d']) && intval($date['y'])){
            $y = $date['y']; $m = $date['m']; $d = $date['d'];
            $valid = checkdate($m,$d,$y);
        }
        if( !$valid ) {
            $errors[] = array("description" => "Formato de fecha inv&aacute;lido.");
        }
    }
}

/**
 * Handles database-side validation and submission of appropiate values.
 *
 * @global VTigerModEntityNUm $objectModentityNum
 * @global VTigerCampaign $objectCampaign
 * @global VTigerCRmEntity $objectCrmentity
 * @global PDO $dbConnectionVtiger 
 * @return object   if all parameters are correctly assigned, 
 *         false    otherwise.
 */

/**
 *
 */
function processForm() {
    global $objectModentityNum;
    global $objectCampaign;
    global $objectCrmentity;
    global $dbConnectionVtiger;
    
    //Get user or group id the campaign is assigned to:
    if($_POST['assigntype'] == "U" ) { 
        $assigned_to    = $_POST['assigned_user_id'];
    } 
    else {
        $assigned_to    = $_POST['assigned_group_id'];
    }
            
    //Fill Campaign fields:
    $campaign_name                  = $_POST['campaignname'];
    $campaign_type                  = (isset($_POST['campaigntype']) ? $_POST['campaigntype'] : "--None--");
    $campaign_status                = (isset($_POST['campaignstatus']) ? $_POST['campaignstatus'] : "--None--");
    $campaign_expectedrevenue       = (isset($_POST['expectedrevenue']) ? $_POST['expectedrevenue'] : 0);
    $campaign_budgetcost            = (isset($_POST['budgetcost']) ? $_POST['budgetcost'] : 0);
    $campaign_actualcost            = (isset($_POST['actualcost']) ? $_POST['actualcost'] : 0);
    $campaign_expectedresponse      = (isset($_POST['expectedresponse']) ? $_POST['expectedresponse'] : "--None--");
    $campaign_numsent               = (isset($_POST['numsent']) ? $_POST['numsent'] : 0);
    $campaign_product_id            = (isset($_POST['product_id']) ? $_POST['product_id'] : 0);
    $campaign_sponsor               = (isset($_POST['sponsor']) ? $_POST['sponsor'] : "");
    $campaign_target_audience       = (isset($_POST['targetaudience']) ? $_POST['targetaudience'] : "");
    $campaign_targetsize            = (isset($_POST['targetsize']) ? $_POST['targetsize'] : 0);
    $campaign_expectedresponsecount = (isset($_POST['expectedresponsecount']) ? $_POST['expectedresponsecount'] : 0);
    $campaign_expectedsalescount    = (isset($_POST['expectedsalescount']) ? $_POST['expectedsalescount'] : 0);
    $campaign_expectedroi           = (isset($_POST['expectedroi']) ? $_POST['expectedroi'] : 0);
    $campaign_actualresponsecount   = (isset($_POST['actualresponsecount']) ? $_POST['actualresponsecount'] : 0);
    $campaign_actualsalescount      = (isset($_POST['actualsalescount']) ? $_POST['actualsalescount'] : 0);
    $campaign_actualroi             = (isset($_POST['actualroi']) ? $_POST['actualroi'] : 0);
    $campaign_closing_date          = (isset($_POST['closingdate']) ? $_POST['closingdate'] : date("Y-m-d"));

    $campaign_product_name          = (isset($_POST['campaign_product_name']) ? $_POST['campaign_product_name'] : "");

    //Assign submitted or default campaign fields to CRUD object. 
    $objectCampaign->setCampaignName($campaign_name)
            ->setCampaignType($campaign_type)
            ->setCampaignsTatUs($campaign_status)
            ->setExpectedRevenue($campaign_expectedrevenue)
            ->setBudgetCost($campaign_budgetcost)
            ->setActualCost($campaign_actualcost)
            ->setExpectedResponse($campaign_expectedresponse)
            ->setNUmSent($campaign_numsent)
            ->setProductId($campaign_product_id)
            ->setSponsor($campaign_sponsor)
            ->setTargetAudience($campaign_target_audience)
            ->setTargetsIze($campaign_targetsize)
            ->setExpectedResponseCount($campaign_expectedresponsecount)
            ->setExpectedSalesCount($campaign_expectedsalescount)
            ->setExpectedRoi($campaign_expectedroi)
            ->setActualResponseCount($campaign_actualresponsecount)
            ->setActualSalesCount($campaign_actualsalescount)
            ->setActualRoi($campaign_actualroi)
            ->setClosingDate($campaign_closing_date);

    //Fill Campaign description field in appropiate object:
    $campaign_description           = (isset($_POST['description']) ? $_POST['description'] : "");
    $objectCrmentity->setDescription($campaign_description);
}

/**
 * 
 * @return  array   or
 *          NULL 
 */
function getContacts() {
    return array();
}

/**
 * return void
 */
function testGetContacts(){
    
}

/**
 *
 * @return  array   or
 *          NULL 
 */
function getLeads() {
    return array();
}

/**
 * return void
 */
function testGetLeads() {
    
}

/**
 * Uses custom API to add new campaign information to Vtiger's database.
 *
 * @global PDO $dbConnectionVtiger
 * @global VTigerCampaign $objectCampaign
 * @global VTigerCRmEntity $objectCrmentity
 * @global VTigerCRmEntitySeq $objectCrmentitySeq
 * @global VTigerModEntityNUm $objectModentityNum 
 */
function sendToVtiger() {
    global $dbConnectionVtiger;
    global $objectCampaign;
    global $objectCrmentity;
    global $objectCrmentitySeq;
    global $objectModentityNum;
    
    //The id number that was inserted on any previous operation is 
    //kept in table vtiger_crmentity_seq; 
    //It must be incremented after inserting any CRMEntity.
    $crmentityseqsql    = "SELECT * FROM vtiger_crmentity_seq LIMIT 1";
    $crmentityseqresult = VTigerCRmEntitySeq::findBySql($dbConnectionVtiger, $crmentityseqsql);
    $crmentityseqid     = $crmentityseqresult[0]->getId();
    $crmentityseqid++;
    $objectCrmentitySeq->setId($crmentityseqid);
    
    //Database CRUD code mostly throws exceptions on any error -- care is taken on operations that
    //do not:
    try {
        //Query the vtiger_modentity_num table for correct data to add to campaign_no field:
        //`semodule`, <-- key to look for: Campaigns 
        //`prefix`, 
        //`cur_id`
        $objectModentityNum->setSeModule("Campaigns");

        //findByExample returns an array, but we're only interested in getting one result:    
        $queryResultModEntityNum    = VTigerModEntityNUm::findByExample($dbConnectionVtiger, $objectModentityNum);
                
        if( !is_array($queryResultModEntityNum) or count($queryResultModEntityNum) > 1 ) {
            //TODO: Throw exception or do something...
        }
        else {
            $prefix_cam_no  = $queryResultModEntityNum[0]->getPrefix();
            $index_cam_no   = $queryResultModEntityNum[0]->getCurId();
        }
        //Now, set the campaingid and campaign_no properties since they're just about to be inserted 
        //into the database:
        $campaignNumber     = $prefix_cam_no . $index_cam_no;
        $objectCampaign->setCampaignId($crmentityseqid)->setCampaignNo($campaignNumber);
        
        $objectCampaign->insertIntoDatabase($dbConnectionVtiger);
        
        //If insert is done correctly, then update campaignscf, campaignrelstatus_seq, crmentity, 
        //crmentity_seq, modentity_num, and tracker:
        $crmentitysql       = "SELECT * FROM `vtiger_crmentity` ORDER BY `crmid` DESC LIMIT 1";
        $crmentitylatest    = VTigerCRmEntity::findBySql($dbConnectionVtiger, $crmentitysql);
        $crmentitycurrentid = $crmentitylatest[0]->getCrMid();
        $now    = date("Y-m-d H:i:s");
        $objectCrmentity->setCrMid($crmentityseqid)
                ->setSeType("Campaigns")
                ->setCreatedTime($now)
                ->setModifiedTime($now)
                ->setViewedTime($now)
                ->setStatus("NULL")
                ->setVersion(0)
                ->setPresence(1)
                ->setDeleted(0);
        $objectCrmentity->insertIntoDatabase($dbConnectionVtiger);
        
        //Now, update ModEntityNum in the database
        $queryResultModEntityNum[0]->setCurId($index_cam_no + 1);
        $queryResultModEntityNum[0]->updateToDatabase($dbConnectionVtiger);
        
        //TODO: update campaignscf, campaignrelstatus_seq, crmentity_seq and tracker as mentioned.
    } catch (Exception $exc) {
        echo $exc->getTraceAsString();
    }

}

/**

/**
 * Uses custom API to add new campaign-related information to PHPList's database.
 * 
 * @global VTigerCampaign $objectCampaign
 * @global VTigerCRmEntity $objectCrmentity
 * @global PhPListList $objectPhplistList
 * @global PhPListListUser $objectPhplistListUser
 * @global PhPListUserUser $objectPhplistUserUser
 * @global VTigerPhPListJoin $joinedExternalTablesList
 * @global PDO $dbConnectionVtiger
 * @global PDO $dbConnectionPhplist 
 * 
 * @param array $contactsList
 * @param array $leadsList
 * @return void
 */
function sendToPHPList($contactsList = Array(), $leadsList = Array()) { 
    global $objectCampaign;
    global $objectCrmentity;
    
    global $objectPhplistList;
    global $objectPhplistListUser;
    global $objectPhplistUserUser;
    
    global $joinedExternalTablesList;
    
    global $dbConnectionVtiger;
    global $dbConnectionPhplist;
    
    /**
     * List of users to add to the PHPList e-mail list.
     */
    $usersToList = array();

    //Database CRUD code throws exceptions on error:
    try {
        //Search for list with campaign name in database (to avoid duplicates):
        $objectPhplistList->setName($objectCampaign->getCampaignName());
        $listresult = PhPListList::findByExample($dbConnectionPhplist, $objectPhplistList);
        if($listresult == NULL) { 
            //List already exists. Append elements to it rather than create a new one.
            $listinsert = $listresult;
        }
        else {
            //Create a list in phplist's database:
            $objectPhplistList->setOwner(1)
                    ->setDescription($objectCrmentity->getDescription());
            $listinsert = $objectPhplistList->insertIntoDatabase($dbConnectionPhplist);
        }
        
        //If not already present, Create a user for each email passed.
        if(is_array($contactsList) && count($contactsList) > 0) {
            foreach ($contactsList as $contactId) {
                $contactsql = "SELECT * FROM vtiger_contactdetails WHERE `contactid`='" . $contactId 
                            ."' LIMIT 1"; 
                $contactresult  = VTigerContactDetails::findBySql($dbConnectionVtiger, $contactsql);
                //Get current contact email:
                $contactemail   = $contactresult->getEmail();
                //Check phplist user table for Contact email
                $objectPhplistUserUser->setEmail($contactemail);
                $found  = PhPListUserUser::findByExample($dbConnectionPhplist, $objectPhplistUserUser);

                //If not found, create user as contact:
                if($found == NULL)
                {
                    $inserted = $objectPhplistUserUser->insertIntoDatabase($dbConnectionPhplist);
                }
                else { //Else, return its id.
                    $inserted = $found;
                }
                //Add the newly added user id to the join table:
                $joinedExternalTablesList->setPhPListUserId($inserted->getId());
                $usersToList[]  = array("userid" => $inserted->getId,"usertype" => "contact");
            }
        }
        if(is_array($leadsList) && count($leadsList) > 0) {
            foreach ($leadsList as $leadId) {
                $leadsql = "SELECT * FROM vtiger_leaddetails WHERE `leadid`='" . $leadId 
                            ."' LIMIT 1";
                $leadresult  = VTigerContactDetails::findBySql($dbConnectionVtiger, $leadsql);
                //Get current contact email:
                $leademail   = $leadresult->getEmail();
                //Check phplist user table for Lead email
                $objectPhplistUserUser->setEmail($leademail);
                $found  = PhPListUserUser::findByExample($dbConnectionPhplist, $objectPhplistUserUser);
                //If not found, create user as lead:
                if($found == NULL)
                {
                    $inserted = $objectPhplistUserUser->insertIntoDatabase($dbConnectionPhplist);
                }
                else { //Else, return its id.
                    $inserted = $found;
                }
                //Add the newly added user id to the join table:
                $joinedExternalTablesList->setPhPListUserId($inserted->getId());
                $usersToList[]  = array("userid" => $inserted->getId,"usertype" => "lead");
            }
        }
        //Create or get ids of users (newly created or not) and add those users to the list.
        if(is_array($usersToList) and count($usersToList) > 0) {
            foreach ($usersToList as $user) {
                $objectPhplistListUser->setUserId($user['userid']);
                $objectPhplistListUser->setListId($listinsert->getId());
                $objectPhplistListUser->insertIntoDatabase($dbConnectionPhplist);
            }
        }
        
    } catch (Exception $exc) {
        echo $exc->getTraceAsString();
    }
}

function linkDatabase() {
    global $objectCampaign;
    global $objectPhplistList;
    global $dbconnect_bridge;
    
    try {
        $vtigerId   = $objectCampaign->getCampaignId();
        $phplistId  = $objectPhplistList->getId();
        
        if($vtigerId == NULL or $phplistId == NULL) {
            throw new Exception ("Not able to get corresponding IDs of campaign or list.");
        }
        else {
            $objectLink = new VTigerPhPListCampaigns();
            $objectLink->setPhPListListId($vtigerId);
            $objectLink->setVTigerCamPainGId($phplistId);
            $objectLink->insertIntoDatabase($dbconnect_bridge);
        }
    } catch (Exception $exc) {
        echo $exc->getTraceAsString();
    }
}

/** -- Bussiness Logic -- **/
testFormSubmit();

processForm();

testProcessForm();

$contactsList = getContacts();

$leadsList = getLeads();

testGetContacts();

testGetLeads();

sendToVtiger();

sendToPHPList($contactsList, $leadsList);

linkDatabase();
?>